{
    "sourceFile": "src/app/api/admin/clientes/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1740404008538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740485351611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n-import { options } from \"@/app/api/auth/[...nextauth]/options\"; // Configura√ß√£o do NextAuth\r\n+import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n+import bcrypt from \"bcryptjs\"; // Para criptografar senhas\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n \r\n+// ‚úÖ BUSCAR LISTA DE CLIENTES (GET)\r\n export async function GET(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -24,12 +26,13 @@\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"‚ùå Erro ao buscar clientes:\", error);\r\n-    return new Response(JSON.stringify({ error: \"Erro ao buscar clientes\" }), { status: 500 });\r\n+    return new Response(JSON.stringify({ error: \"Erro interno ao buscar clientes.\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ‚úÖ CRIAR NOVO CLIENTE (POST)\r\n export async function POST(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -44,11 +47,20 @@\n     }\r\n \r\n     console.log(\"üì° Criando novo cliente:\", email);\r\n \r\n+    // Verifica se o e-mail j√° est√° cadastrado\r\n+    const emailCheck = await pool.query(\"SELECT id FROM clientes WHERE email = $1\", [email]);\r\n+    if (emailCheck.rows.length > 0) {\r\n+      return new Response(JSON.stringify({ error: \"E-mail j√° cadastrado.\" }), { status: 409 });\r\n+    }\r\n+\r\n+    // Criptografa a senha antes de salvar\r\n+    const senhaHash = await bcrypt.hash(senha, 10);\r\n+\r\n     const result = await pool.query(\r\n       \"INSERT INTO clientes (nome, sobrenome, email, senha, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome, sobrenome, email\",\r\n-      [nome, sobrenome, email, senha]\r\n+      [nome, sobrenome, email, senhaHash]\r\n     );\r\n \r\n     return new Response(JSON.stringify({ success: true, cliente: result.rows[0] }), {\r\n       status: 201,\r\n@@ -56,12 +68,13 @@\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"‚ùå Erro ao criar cliente:\", error);\r\n-    return new Response(JSON.stringify({ error: \"Erro ao criar cliente\" }), { status: 500 });\r\n+    return new Response(JSON.stringify({ error: \"Erro interno ao criar cliente.\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ‚úÖ ATUALIZAR CLIENTE (PUT)\r\n export async function PUT(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -82,9 +95,9 @@\n       [nome, sobrenome, email, id]\r\n     );\r\n \r\n     if (result.rows.length === 0) {\r\n-      return new Response(JSON.stringify({ error: \"Cliente n√£o encontrado\" }), { status: 404 });\r\n+      return new Response(JSON.stringify({ error: \"Cliente n√£o encontrado.\" }), { status: 404 });\r\n     }\r\n \r\n     return new Response(JSON.stringify({ success: true, cliente: result.rows[0] }), {\r\n       status: 200,\r\n@@ -92,12 +105,13 @@\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"‚ùå Erro ao atualizar cliente:\", error);\r\n-    return new Response(JSON.stringify({ error: \"Erro ao atualizar cliente\" }), { status: 500 });\r\n+    return new Response(JSON.stringify({ error: \"Erro interno ao atualizar cliente.\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ‚úÖ EXCLUIR CLIENTES (DELETE)\r\n export async function DELETE(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -107,25 +121,25 @@\n \r\n     const { ids } = await req.json();\r\n \r\n     if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n-      return new Response(JSON.stringify({ error: \"IDs inv√°lidos\" }), { status: 400 });\r\n+      return new Response(JSON.stringify({ error: \"IDs inv√°lidos.\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"üóëÔ∏è Excluindo clientes:\", ids);\r\n \r\n-    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1) RETURNING id\", [ids]);\r\n+    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1)\", [ids]);\r\n \r\n     if (result.rowCount === 0) {\r\n-      return new Response(JSON.stringify({ error: \"Nenhum cliente encontrado para exclus√£o\" }), { status: 404 });\r\n+      return new Response(JSON.stringify({ error: \"Nenhum cliente encontrado para exclus√£o.\" }), { status: 404 });\r\n     }\r\n \r\n-    return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n+    return new Response(JSON.stringify({ success: true, deletedCount: result.rowCount }), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n \r\n   } catch (error) {\r\n     console.error(\"‚ùå Erro ao excluir clientes:\", error);\r\n-    return new Response(JSON.stringify({ error: \"Erro ao excluir clientes\" }), { status: 500 });\r\n+    return new Response(JSON.stringify({ error: \"Erro interno ao excluir clientes.\" }), { status: 500 });\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1740485774632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n import bcrypt from \"bcryptjs\"; // Para criptografar senhas\r\n+import { v4 as uuidv4 } from \"uuid\"; // Para gerar id_carteirinha √∫nico\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n@@ -10,17 +11,15 @@\n // ‚úÖ BUSCAR LISTA DE CLIENTES (GET)\r\n export async function GET(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n-\r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n     console.log(\"üì° Buscando lista de clientes...\");\r\n+    const result = await pool.query(\"SELECT id, nome, sobrenome, email, id_carteirinha FROM clientes\");\r\n \r\n-    const result = await pool.query(\"SELECT id, nome, sobrenome, email FROM clientes\");\r\n-\r\n     return new Response(JSON.stringify(result.rows), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n@@ -34,15 +33,13 @@\n // ‚úÖ CRIAR NOVO CLIENTE (POST)\r\n export async function POST(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n-\r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n     const { nome, sobrenome, email, senha } = await req.json();\r\n-\r\n     if (!nome || !sobrenome || !email || !senha) {\r\n       return new Response(JSON.stringify({ error: \"Todos os campos s√£o obrigat√≥rios\" }), { status: 400 });\r\n     }\r\n \r\n@@ -55,12 +52,15 @@\n     }\r\n \r\n     // Criptografa a senha antes de salvar\r\n     const senhaHash = await bcrypt.hash(senha, 10);\r\n+    const idCarteirinha = uuidv4(); // Gera ID √∫nico para carteirinha\r\n \r\n     const result = await pool.query(\r\n-      \"INSERT INTO clientes (nome, sobrenome, email, senha, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome, sobrenome, email\",\r\n-      [nome, sobrenome, email, senhaHash]\r\n+      `INSERT INTO clientes (nome, sobrenome, email, senha, id_carteirinha, data_criacao) \r\n+       VALUES ($1, $2, $3, $4, $5, NOW()) \r\n+       RETURNING id, nome, sobrenome, email, id_carteirinha`,\r\n+      [nome, sobrenome, email, senhaHash, idCarteirinha]\r\n     );\r\n \r\n     return new Response(JSON.stringify({ success: true, cliente: result.rows[0] }), {\r\n       status: 201,\r\n@@ -76,23 +76,24 @@\n // ‚úÖ ATUALIZAR CLIENTE (PUT)\r\n export async function PUT(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n-\r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n     const { id, nome, sobrenome, email } = await req.json();\r\n-\r\n     if (!id || !nome || !sobrenome || !email) {\r\n       return new Response(JSON.stringify({ error: \"Todos os campos s√£o obrigat√≥rios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"üì° Atualizando cliente:\", id);\r\n \r\n     const result = await pool.query(\r\n-      \"UPDATE clientes SET nome = $1, sobrenome = $2, email = $3 WHERE id = $4 RETURNING id, nome, sobrenome, email\",\r\n+      `UPDATE clientes \r\n+       SET nome = $1, sobrenome = $2, email = $3 \r\n+       WHERE id = $4 \r\n+       RETURNING id, nome, sobrenome, email, id_carteirinha`,\r\n       [nome, sobrenome, email, id]\r\n     );\r\n \r\n     if (result.rows.length === 0) {\r\n@@ -113,22 +114,20 @@\n // ‚úÖ EXCLUIR CLIENTES (DELETE)\r\n export async function DELETE(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n-\r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n     const { ids } = await req.json();\r\n-\r\n     if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"IDs inv√°lidos.\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"üóëÔ∏è Excluindo clientes:\", ids);\r\n \r\n-    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1)\", [ids]);\r\n+    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1) RETURNING id\", [ids]);\r\n \r\n     if (result.rowCount === 0) {\r\n       return new Response(JSON.stringify({ error: \"Nenhum cliente encontrado para exclus√£o.\" }), { status: 404 });\r\n     }\r\n"
                },
                {
                    "date": 1740486097575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,37 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n import bcrypt from \"bcryptjs\"; // Para criptografar senhas\r\n-import { v4 as uuidv4 } from \"uuid\"; // Para gerar id_carteirinha √∫nico\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n \r\n+// üîπ Fun√ß√£o para gerar um ID de carteirinha aleat√≥rio (6 caracteres alfanum√©ricos)\r\n+function generateRandomId() {\r\n+  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n+  let id = \"\";\r\n+  for (let i = 0; i < 6; i++) {\r\n+    id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n+  }\r\n+  return id;\r\n+}\r\n+\r\n+// üîπ Fun√ß√£o para garantir que o ID seja √∫nico no banco\r\n+async function generateUniqueCarteirinhaId() {\r\n+  let uniqueId;\r\n+  let exists = true;\r\n+\r\n+  while (exists) {\r\n+    uniqueId = generateRandomId();\r\n+    const checkId = await pool.query(\"SELECT id FROM clientes WHERE id_carteirinha = $1\", [uniqueId]);\r\n+    exists = checkId.rows.length > 0;\r\n+  }\r\n+\r\n+  return uniqueId;\r\n+}\r\n+\r\n // ‚úÖ BUSCAR LISTA DE CLIENTES (GET)\r\n export async function GET(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n@@ -16,8 +39,9 @@\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n     console.log(\"üì° Buscando lista de clientes...\");\r\n+\r\n     const result = await pool.query(\"SELECT id, nome, sobrenome, email, id_carteirinha FROM clientes\");\r\n \r\n     return new Response(JSON.stringify(result.rows), {\r\n       status: 200,\r\n@@ -50,11 +74,13 @@\n     if (emailCheck.rows.length > 0) {\r\n       return new Response(JSON.stringify({ error: \"E-mail j√° cadastrado.\" }), { status: 409 });\r\n     }\r\n \r\n+    // Gera ID de carteirinha √∫nico\r\n+    const idCarteirinha = await generateUniqueCarteirinhaId();\r\n+\r\n     // Criptografa a senha antes de salvar\r\n     const senhaHash = await bcrypt.hash(senha, 10);\r\n-    const idCarteirinha = uuidv4(); // Gera ID √∫nico para carteirinha\r\n \r\n     const result = await pool.query(\r\n       `INSERT INTO clientes (nome, sobrenome, email, senha, id_carteirinha, data_criacao) \r\n        VALUES ($1, $2, $3, $4, $5, NOW()) \r\n@@ -88,12 +114,9 @@\n \r\n     console.log(\"üì° Atualizando cliente:\", id);\r\n \r\n     const result = await pool.query(\r\n-      `UPDATE clientes \r\n-       SET nome = $1, sobrenome = $2, email = $3 \r\n-       WHERE id = $4 \r\n-       RETURNING id, nome, sobrenome, email, id_carteirinha`,\r\n+      \"UPDATE clientes SET nome = $1, sobrenome = $2, email = $3 WHERE id = $4 RETURNING id, nome, sobrenome, email, id_carteirinha\",\r\n       [nome, sobrenome, email, id]\r\n     );\r\n \r\n     if (result.rows.length === 0) {\r\n@@ -125,9 +148,9 @@\n     }\r\n \r\n     console.log(\"üóëÔ∏è Excluindo clientes:\", ids);\r\n \r\n-    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1) RETURNING id\", [ids]);\r\n+    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1)\", [ids]);\r\n \r\n     if (result.rowCount === 0) {\r\n       return new Response(JSON.stringify({ error: \"Nenhum cliente encontrado para exclus√£o.\" }), { status: 404 });\r\n     }\r\n"
                }
            ],
            "date": 1740404008538,
            "name": "Commit-0",
            "content": "import { Pool } from \"pg\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { options } from \"@/app/api/auth/[...nextauth]/options\"; // Configura√ß√£o do NextAuth\r\n\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\nexport async function GET(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    console.log(\"üì° Buscando lista de clientes...\");\r\n\r\n    const result = await pool.query(\"SELECT id, nome, sobrenome, email FROM clientes\");\r\n\r\n    return new Response(JSON.stringify(result.rows), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro ao buscar clientes:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao buscar clientes\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { nome, sobrenome, email, senha } = await req.json();\r\n\r\n    if (!nome || !sobrenome || !email || !senha) {\r\n      return new Response(JSON.stringify({ error: \"Todos os campos s√£o obrigat√≥rios\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"üì° Criando novo cliente:\", email);\r\n\r\n    const result = await pool.query(\r\n      \"INSERT INTO clientes (nome, sobrenome, email, senha, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome, sobrenome, email\",\r\n      [nome, sobrenome, email, senha]\r\n    );\r\n\r\n    return new Response(JSON.stringify({ success: true, cliente: result.rows[0] }), {\r\n      status: 201,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro ao criar cliente:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao criar cliente\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { id, nome, sobrenome, email } = await req.json();\r\n\r\n    if (!id || !nome || !sobrenome || !email) {\r\n      return new Response(JSON.stringify({ error: \"Todos os campos s√£o obrigat√≥rios\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"üì° Atualizando cliente:\", id);\r\n\r\n    const result = await pool.query(\r\n      \"UPDATE clientes SET nome = $1, sobrenome = $2, email = $3 WHERE id = $4 RETURNING id, nome, sobrenome, email\",\r\n      [nome, sobrenome, email, id]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"Cliente n√£o encontrado\" }), { status: 404 });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, cliente: result.rows[0] }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro ao atualizar cliente:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao atualizar cliente\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { ids } = await req.json();\r\n\r\n    if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"IDs inv√°lidos\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"üóëÔ∏è Excluindo clientes:\", ids);\r\n\r\n    const result = await pool.query(\"DELETE FROM clientes WHERE id = ANY($1) RETURNING id\", [ids]);\r\n\r\n    if (result.rowCount === 0) {\r\n      return new Response(JSON.stringify({ error: \"Nenhum cliente encontrado para exclus√£o\" }), { status: 404 });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro ao excluir clientes:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao excluir clientes\" }), { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}