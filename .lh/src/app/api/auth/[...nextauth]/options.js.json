{
    "sourceFile": "src/app/api/auth/[...nextauth]/options.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1740053432207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740053858370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,77 @@\n+import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n-import { randomBytes } from 'crypto';\n-export const fakeUsers = [{\n-  id: '1',\n-  email: 'user@demo.com',\n-  username: 'demo_user',\n-  password: '123456',\n-  firstName: 'Demo',\n-  lastName: 'User',\n-  role: 'Admin',\n-  token: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0ZWNoemFhIiwiYXVkIjoiaHR0cHM6Ly90ZWNoemFhLmdldGFwcHVpLmNvbS8iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVjaHphYSIsIkVtYWlsIjoidGVjaHphYXN0dWRpb0BnbWFpbC5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJUZXN0VG9rZW4ifQ.ud4LnFZ-mqhHEYiPf2wCLM7KvLGoAxhXTBSymRIZEFLleFkO119AXd8p3OfPCpdUWSyeZl8-pZyElANc_KHj5w'\n-}];\n-export const options = {\n-  providers: [CredentialsProvider({\n-    name: 'credentials',\n-    credentials: {\n-      email: {\n-        label: 'Email:',\n-        type: 'text',\n-        placeholder: 'Enter your username'\n-      },\n-      password: {\n-        label: 'Password',\n-        type: 'password'\n-      }\n+// Importe seu banco de dados ou método de consulta de usuário\n+import { db } from './seuBancoDeDados'; // Adapte o caminho\n+\n+export default NextAuth({\n+    providers: [\n+        CredentialsProvider({\n+            name: 'Credentials',\n+            credentials: {\n+                email: { label: 'Email', type: 'text' },\n+                password: { label: 'Senha', type: 'password' }\n+            },\n+            async authorize(credentials) {\n+                const { email, password } = credentials;\n+\n+                try {\n+                    // 1. Verificar se o usuário existe no banco de dados\n+                    const user = await db.users.findOne({ email });\n+\n+                    if (!user) {\n+                        throw new Error('Usuário não encontrado.');\n+                    }\n+\n+                    // 2. Verificar a senha\n+                    const isValidPassword = await bcrypt.compare(password, user.password); // Use bcrypt para comparar senhas hasheadas\n+\n+                    if (!isValidPassword) {\n+                        throw new Error('Senha incorreta.');\n+                    }\n+\n+                    // 3. Determinar o role com base no email\n+                    let role = 'cliente'; // Role padrão\n+\n+                    if (user.email.endsWith('@parceiro.com')) { // Exemplo: emails de parceiros terminam com @parceiro.com\n+                        role = 'parceiro';\n+                    } else if (user.email.endsWith('@admin.com')) { // Exemplo: emails de admin terminam com @admin.com\n+                        role = 'admin';\n+                    }\n+\n+                    // 4. Retornar o usuário com o role\n+                    return {\n+                        id: user._id,\n+                        email: user.email,\n+                        name: user.name,\n\\ No newline at end of file\n+                        role // Inclua o role no objeto do usuário\n+                    };\n+                } catch (error) {\n+                    console.error('Erro na autenticação:', error);\n+                    throw new Error('Ocorreu um erro durante a autenticação.');\n+                }\n+            }\n+        })\n+    ],\n+    secret: process.env.NEXTAUTH_SECRET,\n+    pages: {\n+        signIn: '/auth/login' // Página de login genérica\n     },\n-    async authorize(credentials, req) {\n-      const filteredUser = fakeUsers.find(user => {\n-        return user.email === credentials?.email && user.password === credentials?.password;\n-      });\n-      if (filteredUser) {\n-        return filteredUser;\n-      } else {\n-        throw new Error('Email or Password is not valid');\n-      }\n-    }\n-  })],\n-  secret: 'kvwLrfri/MBznUCofIoRH9+NvGu6GqvVdqO3mor1GuA=',\n-  pages: {\n-    signIn: '/auth/login-cliente'\n-  },\n-  callbacks: {\n-    async signIn({\n-      user,\n-      account,\n-      profile,\n-      email,\n-      credentials\n-    }) {\n-      return true;\n+    callbacks: {\n+        async session({ session, token }) {\n+            session.user = token.user;\n+            return session;\n+        }\n     },\n-    session: ({\n-      session,\n-      token\n-    }) => {\n-      session.user = {\n-        email: 'user@demo.com',\n-        name: 'Test User'\n-      };\n-      return Promise.resolve(session);\n+    events: {\n+        async signIn({ user, account, email }) {\n+            // Redirecionar para a página correta após o login\n+            if (user.role === 'cliente') {\n+                return '/carteirinha';\n+            } else if (user.role === 'parceiro') {\n+                return '/relatorio';\n+            } else if (user.role === 'admin') {\n+                return '/admin'; // Página de admin\n+            }\n+        }\n     }\n-  },\n-  session: {\n-    maxAge: 24 * 60 * 60 * 1000,\n-    generateSessionToken: () => {\n-      return randomBytes(32).toString('hex');\n-    }\n-  }\n-};\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740053986871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,32 @@\n import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n-// Importe seu banco de dados ou método de consulta de usuário\n-import { db } from './seuBancoDeDados'; // Adapte o caminho\n \n+// Dados de usuários simulados (JSON)\n+const users = [\n+    {\n+        id: 1,\n+        email: 'cliente@exemplo.com',\n+        password: 'senha123',\n+        name: 'Cliente Teste',\n+        role: 'cliente'\n+    },\n+    {\n+        id: 2,\n+        email: 'parceiro@exemplo.com',\n+        password: 'senha456',\n+        name: 'Parceiro Teste',\n+        role: 'parceiro'\n+    },\n+    {\n+        id: 3,\n+        email: 'admin@exemplo.com',\n+        password: 'senha789',\n+        name: 'Admin Teste',\n+        role: 'admin'\n+    }\n+];\n+\n export default NextAuth({\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n@@ -13,49 +36,33 @@\n             },\n             async authorize(credentials) {\n                 const { email, password } = credentials;\n \n-                try {\n-                    // 1. Verificar se o usuário existe no banco de dados\n-                    const user = await db.users.findOne({ email });\n+                // 1. Encontrar o usuário no array JSON\n+                const user = users.find(user => user.email === email);\n \n-                    if (!user) {\n-                        throw new Error('Usuário não encontrado.');\n-                    }\n+                if (!user) {\n+                    throw new Error('Usuário não encontrado.');\n+                }\n \n-                    // 2. Verificar a senha\n-                    const isValidPassword = await bcrypt.compare(password, user.password); // Use bcrypt para comparar senhas hasheadas\n+                // 2. Verificar a senha (comparação simples para teste)\n+                if (user.password !== password) {\n+                    throw new Error('Senha incorreta.');\n+                }\n \n-                    if (!isValidPassword) {\n-                        throw new Error('Senha incorreta.');\n-                    }\n-\n-                    // 3. Determinar o role com base no email\n-                    let role = 'cliente'; // Role padrão\n-\n-                    if (user.email.endsWith('@parceiro.com')) { // Exemplo: emails de parceiros terminam com @parceiro.com\n-                        role = 'parceiro';\n-                    } else if (user.email.endsWith('@admin.com')) { // Exemplo: emails de admin terminam com @admin.com\n-                        role = 'admin';\n-                    }\n-\n-                    // 4. Retornar o usuário com o role\n-                    return {\n-                        id: user._id,\n-                        email: user.email,\n-                        name: user.name,\n-                        role // Inclua o role no objeto do usuário\n-                    };\n-                } catch (error) {\n-                    console.error('Erro na autenticação:', error);\n-                    throw new Error('Ocorreu um erro durante a autenticação.');\n-                }\n+                // 3. Retornar o usuário com o role\n+                return {\n+                    id: user.id,\n+                    email: user.email,\n+                    name: user.name,\n+                    role: user.role\n+                };\n             }\n         })\n     ],\n     secret: process.env.NEXTAUTH_SECRET,\n     pages: {\n-        signIn: '/auth/login' // Página de login genérica\n+        signIn: '/auth/login'\n     },\n     callbacks: {\n         async session({ session, token }) {\n             session.user = token.user;\n@@ -69,9 +76,9 @@\n                 return '/carteirinha';\n             } else if (user.role === 'parceiro') {\n                 return '/relatorio';\n             } else if (user.role === 'admin') {\n-                return '/admin'; // Página de admin\n+                return '/admin';\n             }\n         }\n     }\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740054026440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,24 @@\n // Dados de usuários simulados (JSON)\n const users = [\n     {\n         id: 1,\n-        email: 'cliente@exemplo.com',\n-        password: 'senha123',\n+        email: 'cliente@protege.com.br',\n+        password: '12345678',\n         name: 'Cliente Teste',\n         role: 'cliente'\n     },\n     {\n         id: 2,\n-        email: 'parceiro@exemplo.com',\n-        password: 'senha456',\n+        email: 'parceiro@protege.com.b',\n+        password: '12345678',\n         name: 'Parceiro Teste',\n         role: 'parceiro'\n     },\n     {\n         id: 3,\n-        email: 'admin@exemplo.com',\n-        password: 'senha789',\n+        email: 'admin@protege.com.b',\n+        password: '12345678',\n         name: 'Admin Teste',\n         role: 'admin'\n     }\n ];\n"
                },
                {
                    "date": 1740055166382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// options.js\n import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n \n // Dados de usuários simulados (JSON)\n@@ -11,23 +12,23 @@\n         role: 'cliente'\n     },\n     {\n         id: 2,\n-        email: 'parceiro@protege.com.b',\n+        email: 'parceiro@protege.com.br',\n         password: '12345678',\n         name: 'Parceiro Teste',\n         role: 'parceiro'\n     },\n     {\n         id: 3,\n-        email: 'admin@protege.com.b',\n+        email: 'admin@protege.com.br',\n         password: '12345678',\n         name: 'Admin Teste',\n         role: 'admin'\n     }\n ];\n \n-export default NextAuth({\n+const authOptions = { // Crie uma variável para as opções\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n             credentials: {\n@@ -58,9 +59,9 @@\n                 };\n             }\n         })\n     ],\n-    secret: process.env.NEXTAUTH_SECRET,\n+    secret: process.env.NEXTAUTH_SECRET, // NÃO ESQUEÇA DESTA LINHA!\n     pages: {\n         signIn: '/auth/login'\n     },\n     callbacks: {\n@@ -80,5 +81,7 @@\n                 return '/admin';\n             }\n         }\n     }\n-});\n\\ No newline at end of file\n+};\n+\n+export default NextAuth(authOptions); // Exporta o resultado da chamada de NextAuth()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740055389020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         role: 'admin'\n     }\n ];\n \n-const authOptions = { // Crie uma variável para as opções\n+export const options = { // Exportação nomeada\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n             credentials: {\n@@ -81,7 +81,5 @@\n                 return '/admin';\n             }\n         }\n     }\n-};\n-\n-export default NextAuth(authOptions); // Exporta o resultado da chamada de NextAuth()\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740056197900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,19 @@\n             return session;\n         }\n     },\n     events: {\n-        async signIn({ user, account, email }) {\n-            // Redirecionar para a página correta após o login\n-            if (user.role === 'cliente') {\n+        async signIn({ user, account, email, callbackUrl }) { // callbackUrl aqui\n+            console.log(\"Role do usuário:\", user?.role); // Verifique o role do usuário\n+            console.log(\"Callback URL:\", callbackUrl); // Verifique o callbackUrl\n+\n+            if (user?.role === 'cliente') {\n                 return '/carteirinha';\n-            } else if (user.role === 'parceiro') {\n+            } else if (user?.role === 'parceiro') {\n                 return '/relatorio';\n-            } else if (user.role === 'admin') {\n+            } else if (user?.role === 'admin') {\n                 return '/admin';\n             }\n+            return callbackUrl || '/'; // Use callbackUrl ou página padrão\n         }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740320488516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,19 +70,19 @@\n             return session;\n         }\n     },\n     events: {\n-        async signIn({ user, account, email, callbackUrl }) { // callbackUrl aqui\n-            console.log(\"Role do usuário:\", user?.role); // Verifique o role do usuário\n-            console.log(\"Callback URL:\", callbackUrl); // Verifique o callbackUrl\n-\n+        async signIn({ user, account, email, callbackUrl }) {\n+            console.log(\"Role do usuário:\", user?.role);\n+            console.log(\"Callback URL:\", callbackUrl);\n+    \n             if (user?.role === 'cliente') {\n                 return '/carteirinha';\n             } else if (user?.role === 'parceiro') {\n                 return '/relatorio';\n             } else if (user?.role === 'admin') {\n                 return '/admin';\n             }\n-            return callbackUrl || '/'; // Use callbackUrl ou página padrão\n+            return callbackUrl || '/';\n         }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740320505883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,20 +69,16 @@\n             session.user = token.user;\n             return session;\n         }\n     },\n-    events: {\n-        async signIn({ user, account, email, callbackUrl }) {\n-            console.log(\"Role do usuário:\", user?.role);\n-            console.log(\"Callback URL:\", callbackUrl);\n+    callbacks: {\n+        async redirect({ url, baseUrl, user }) {\n+            console.log(\"Redirecionamento do usuário:\", user?.role);\n     \n-            if (user?.role === 'cliente') {\n-                return '/carteirinha';\n-            } else if (user?.role === 'parceiro') {\n-                return '/relatorio';\n-            } else if (user?.role === 'admin') {\n-                return '/admin';\n-            }\n-            return callbackUrl || '/';\n+            if (user?.role === 'cliente') return `${baseUrl}/carteirinha`;\n+            if (user?.role === 'parceiro') return `${baseUrl}/relatorio`;\n+            if (user?.role === 'admin') return `${baseUrl}/admin`;\n+    \n+            return url.startsWith(baseUrl) ? url : baseUrl;\n         }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740320669415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,15 +70,22 @@\n             return session;\n         }\n     },\n     callbacks: {\n-        async redirect({ url, baseUrl, user }) {\n-            console.log(\"Redirecionamento do usuário:\", user?.role);\n+        async session({ session, token }) {\n+            session.user = token.user;\n+            return session;\n+        },\n+        async redirect({ url, baseUrl }) {\n+            const session = await fetch(`${baseUrl}/api/auth/session`).then(res => res.json());\n+            const role = session?.user?.role;\n     \n-            if (user?.role === 'cliente') return `${baseUrl}/carteirinha`;\n-            if (user?.role === 'parceiro') return `${baseUrl}/relatorio`;\n-            if (user?.role === 'admin') return `${baseUrl}/admin`;\n+            console.log('Redirecionamento baseado no role:', role);\n     \n-            return url.startsWith(baseUrl) ? url : baseUrl;\n+            if (role === 'cliente') return `${baseUrl}/carteirinha`;\n+            if (role === 'parceiro') return `${baseUrl}/relatorio`;\n+            if (role === 'admin') return `${baseUrl}/admin`;\n+    \n+            return baseUrl;\n         }\n     }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740320805251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,21 +71,12 @@\n         }\n     },\n     callbacks: {\n         async session({ session, token }) {\n+            console.log(\"🔍 Session antes de adicionar role:\", session);\n             session.user = token.user;\n+            console.log(\"✅ Session depois de adicionar role:\", session);\n             return session;\n         },\n-        async redirect({ url, baseUrl }) {\n-            const session = await fetch(`${baseUrl}/api/auth/session`).then(res => res.json());\n-            const role = session?.user?.role;\n+    }\n     \n-            console.log('Redirecionamento baseado no role:', role);\n-    \n-            if (role === 'cliente') return `${baseUrl}/carteirinha`;\n-            if (role === 'parceiro') return `${baseUrl}/relatorio`;\n-            if (role === 'admin') return `${baseUrl}/admin`;\n-    \n-            return baseUrl;\n-        }\n-    }\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740326436412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,13 +70,23 @@\n             return session;\n         }\n     },\n     callbacks: {\n-        async session({ session, token }) {\n-            console.log(\"🔍 Session antes de adicionar role:\", session);\n-            session.user = token.user;\n-            console.log(\"✅ Session depois de adicionar role:\", session);\n-            return session;\n-        },\n+        async redirect({ url, baseUrl, token }) {\n+            console.log(\"🔄 Redirecionando... URL original:\", url);\n+            console.log(\"🔍 Token recebido:\", token);\n+    \n+            if (!token || !token.user) return baseUrl; // Evita erro caso token não exista\n+    \n+            const role = token.user.role;\n+            console.log(\"🎯 Role detectado:\", role);\n+    \n+            if (role === 'cliente') return `${baseUrl}/carteirinha`;\n+            if (role === 'parceiro') return `${baseUrl}/relatorio`;\n+            if (role === 'admin') return `${baseUrl}/admin`;\n+    \n+            return baseUrl;\n+        }\n     }\n     \n+    \n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740326848423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         role: 'admin'\n     }\n ];\n \n-export const options = { // Exportação nomeada\n+export const options = {\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n             credentials: {\n@@ -64,29 +64,36 @@\n     pages: {\n         signIn: '/auth/login'\n     },\n     callbacks: {\n+        // Adiciona o usuário ao token JWT para que seja possível acessar seus dados na sessão\n+        async jwt({ token, user }) {\n+            if (user) {\n+                token.user = user;\n+            }\n+            return token;\n+        },\n+        // Inclui os dados do usuário na sessão\n         async session({ session, token }) {\n             session.user = token.user;\n             return session;\n-        }\n-    },\n-    callbacks: {\n+        },\n+        // Redireciona o usuário de acordo com seu role\n         async redirect({ url, baseUrl, token }) {\n             console.log(\"🔄 Redirecionando... URL original:\", url);\n             console.log(\"🔍 Token recebido:\", token);\n-    \n-            if (!token || !token.user) return baseUrl; // Evita erro caso token não exista\n-    \n+\n+            if (!token || !token.user) return baseUrl;\n+\n\\ No newline at end of file\n             const role = token.user.role;\n             console.log(\"🎯 Role detectado:\", role);\n-    \n+\n             if (role === 'cliente') return `${baseUrl}/carteirinha`;\n             if (role === 'parceiro') return `${baseUrl}/relatorio`;\n             if (role === 'admin') return `${baseUrl}/admin`;\n-    \n+\n             return baseUrl;\n         }\n     }\n-    \n-    \n-};\n+};\n+\n+export default NextAuth(options);\n"
                },
                {
                    "date": 1740327547709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,97 +3,99 @@\n import CredentialsProvider from 'next-auth/providers/credentials';\n \n // Dados de usuários simulados (JSON)\n const users = [\n-    {\n-        id: 1,\n-        email: 'cliente@protege.com.br',\n-        password: '12345678',\n-        name: 'Cliente Teste',\n-        role: 'cliente'\n-    },\n-    {\n-        id: 2,\n-        email: 'parceiro@protege.com.br',\n-        password: '12345678',\n-        name: 'Parceiro Teste',\n-        role: 'parceiro'\n-    },\n-    {\n-        id: 3,\n-        email: 'admin@protege.com.br',\n-        password: '12345678',\n-        name: 'Admin Teste',\n-        role: 'admin'\n-    }\n+  {\n+    id: 1,\n+    email: 'cliente@protege.com.br',\n+    password: '12345678',\n+    name: 'Cliente Teste',\n+    role: 'cliente'\n+  },\n+  {\n+    id: 2,\n+    email: 'parceiro@protege.com.br',\n+    password: '12345678',\n+    name: 'Parceiro Teste',\n+    role: 'parceiro'\n+  },\n+  {\n+    id: 3,\n+    email: 'admin@protege.com.br',\n+    password: '12345678',\n+    name: 'Admin Teste',\n+    role: 'admin'\n+  }\n ];\n \n export const options = {\n-    providers: [\n-        CredentialsProvider({\n-            name: 'Credentials',\n-            credentials: {\n-                email: { label: 'Email', type: 'text' },\n-                password: { label: 'Senha', type: 'password' }\n-            },\n-            async authorize(credentials) {\n-                const { email, password } = credentials;\n+  providers: [\n+    CredentialsProvider({\n+      name: 'Credentials',\n+      credentials: {\n+        email: { label: 'Email', type: 'text' },\n+        password: { label: 'Senha', type: 'password' }\n+      },\n+      async authorize(credentials) {\n+        const { email, password } = credentials;\n \n-                // 1. Encontrar o usuário no array JSON\n-                const user = users.find(user => user.email === email);\n+        // 1. Encontrar o usuário no array JSON\n+        const user = users.find(user => user.email === email);\n \n-                if (!user) {\n-                    throw new Error('Usuário não encontrado.');\n-                }\n+        if (!user) {\n+          throw new Error('Usuário não encontrado.');\n+        }\n \n-                // 2. Verificar a senha (comparação simples para teste)\n-                if (user.password !== password) {\n-                    throw new Error('Senha incorreta.');\n-                }\n+        // 2. Verificar a senha (comparação simples para teste)\n+        if (user.password !== password) {\n+          throw new Error('Senha incorreta.');\n+        }\n \n-                // 3. Retornar o usuário com o role\n-                return {\n-                    id: user.id,\n-                    email: user.email,\n-                    name: user.name,\n-                    role: user.role\n-                };\n-            }\n\\ No newline at end of file\n-        })\n-    ],\n-    secret: process.env.NEXTAUTH_SECRET, // NÃO ESQUEÇA DESTA LINHA!\n-    pages: {\n-        signIn: '/auth/login'\n+        // 3. Retornar o usuário com o role\n+        return {\n+          id: user.id,\n+          email: user.email,\n+          name: user.name,\n+          role: user.role\n+        };\n+      }\n+    })\n+  ],\n+  secret: process.env.NEXTAUTH_SECRET, // NÃO ESQUEÇA DESTA LINHA!\n+  pages: {\n+    signIn: '/auth/login'\n+  },\n+  callbacks: {\n+    // Adiciona o usuário ao token JWT para que seja possível acessar seus dados na sessão\n+    async jwt({ token, user }) {\n+      if (user) {\n+        token.user = user;\n+      }\n+      return token;\n     },\n-    callbacks: {\n-        // Adiciona o usuário ao token JWT para que seja possível acessar seus dados na sessão\n-        async jwt({ token, user }) {\n-            if (user) {\n-                token.user = user;\n-            }\n-            return token;\n-        },\n-        // Inclui os dados do usuário na sessão\n-        async session({ session, token }) {\n-            session.user = token.user;\n-            return session;\n-        },\n-        // Redireciona o usuário de acordo com seu role\n-        async redirect({ url, baseUrl, token }) {\n-            console.log(\"🔄 Redirecionando... URL original:\", url);\n-            console.log(\"🔍 Token recebido:\", token);\n+    // Inclui os dados do usuário na sessão\n+    async session({ session, token }) {\n+      session.user = token.user;\n+      return session;\n+    },\n+    // Redireciona o usuário de acordo com seu role ou usa a URL passada se não houver token (logout)\n+    async redirect({ url, baseUrl, token }) {\n+      console.log(\"🔄 Redirecionando... URL original:\", url);\n+      console.log(\"🔍 Token recebido:\", token);\n \n-            if (!token || !token.user) return baseUrl;\n+      // Se não houver token, provavelmente é logout, então use a URL passada\n+      if (!token || !token.user) {\n+        return url.startsWith('/') ? `${baseUrl}${url}` : url;\n+      }\n \n-            const role = token.user.role;\n-            console.log(\"🎯 Role detectado:\", role);\n+      const role = token.user.role;\n+      console.log(\"🎯 Role detectado:\", role);\n+      if (role === 'cliente') return `${baseUrl}/carteirinha`;\n+      if (role === 'parceiro') return `${baseUrl}/relatorio`;\n+      if (role === 'admin') return `${baseUrl}/admin`;\n \n-            if (role === 'cliente') return `${baseUrl}/carteirinha`;\n-            if (role === 'parceiro') return `${baseUrl}/relatorio`;\n-            if (role === 'admin') return `${baseUrl}/admin`;\n-\n-            return baseUrl;\n-        }\n+      return baseUrl;\n     }\n+  }\n };\n \n-export default NextAuth(options);\n+export default NextAuth(options);\n"
                },
                {
                    "date": 1740329642323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,12 @@\n // options.js\n import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n+import { Pool } from 'pg';\n \n-// Dados de usuários simulados (JSON)\n-const users = [\n-  {\n-    id: 1,\n-    email: 'cliente@protege.com.br',\n-    password: '12345678',\n-    name: 'Cliente Teste',\n-    role: 'cliente'\n-  },\n-  {\n-    id: 2,\n-    email: 'parceiro@protege.com.br',\n-    password: '12345678',\n-    name: 'Parceiro Teste',\n-    role: 'parceiro'\n-  },\n-  {\n-    id: 3,\n-    email: 'admin@protege.com.br',\n-    password: '12345678',\n-    name: 'Admin Teste',\n-    role: 'admin'\n-  }\n-];\n+const pool = new Pool({\n+  connectionString: process.env.DATABASE_URL,\n+});\n \n export const options = {\n   providers: [\n     CredentialsProvider({\n@@ -37,36 +17,64 @@\n       },\n       async authorize(credentials) {\n         const { email, password } = credentials;\n \n-        // 1. Encontrar o usuário no array JSON\n-        const user = users.find(user => user.email === email);\n+        try {\n+          // Consulta que tenta encontrar o usuário em qualquer uma das três tabelas (clientes, parceiros, admins).\n+          // Cada SELECT adiciona uma role estática para sabermos de onde veio o usuário.\n+          const query = `\n+            SELECT id, email, senha AS \"password\", 'cliente' AS role\n+            FROM clientes\n+            WHERE email = $1\n \n-        if (!user) {\n-          throw new Error('Usuário não encontrado.');\n-        }\n+            UNION\n \n-        // 2. Verificar a senha (comparação simples para teste)\n-        if (user.password !== password) {\n-          throw new Error('Senha incorreta.');\n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n+            FROM parceiros\n+            WHERE email = $1\n+\n+            UNION\n+\n+            SELECT id, email, senha AS \"password\", 'admin' AS role\n+            FROM admins\n+            WHERE email = $1\n+          `;\n+\n+          const result = await pool.query(query, [email]);\n+\n+          // Se não achar nenhum registro, significa que não existe user com esse email\n+          if (result.rows.length === 0) {\n+            throw new Error('Usuário não encontrado.');\n+          }\n+\n+          const userRecord = result.rows[0];\n+          \n+          // Verifica a senha (no exemplo, estamos armazenando em texto puro; em produção, use hash/bcrypt)\n+          if (userRecord.password !== password) {\n+            throw new Error('Senha incorreta.');\n+          }\n+\n+          // Retorna o objeto do usuário no formato que o NextAuth espera\n+          return {\n+            id: userRecord.id,\n+            email: userRecord.email,\n+            // Aqui usamos um \"nome\" genérico, mas você pode compor com nome e sobrenome se estiver disponível na tabela\n+            name: 'Usuário',\n+            role: userRecord.role\n+          };\n+        } catch (err) {\n+          // Lança o erro para aparecer na tela de login (ou no console)\n+          throw new Error(err.message);\n         }\n-\n-        // 3. Retornar o usuário com o role\n-        return {\n-          id: user.id,\n-          email: user.email,\n-          name: user.name,\n-          role: user.role\n-        };\n       }\n     })\n   ],\n-  secret: process.env.NEXTAUTH_SECRET, // NÃO ESQUEÇA DESTA LINHA!\n+  secret: process.env.NEXTAUTH_SECRET,\n   pages: {\n     signIn: '/auth/login'\n   },\n   callbacks: {\n-    // Adiciona o usuário ao token JWT para que seja possível acessar seus dados na sessão\n+    // Adiciona o usuário ao token JWT\n     async jwt({ token, user }) {\n       if (user) {\n         token.user = user;\n       }\n@@ -76,9 +84,9 @@\n     async session({ session, token }) {\n       session.user = token.user;\n       return session;\n     },\n-    // Redireciona o usuário de acordo com seu role ou usa a URL passada se não houver token (logout)\n+    // Redireciona de acordo com a role\n     async redirect({ url, baseUrl, token }) {\n       console.log(\"🔄 Redirecionando... URL original:\", url);\n       console.log(\"🔍 Token recebido:\", token);\n \n@@ -88,12 +96,14 @@\n       }\n \n       const role = token.user.role;\n       console.log(\"🎯 Role detectado:\", role);\n+\n       if (role === 'cliente') return `${baseUrl}/carteirinha`;\n       if (role === 'parceiro') return `${baseUrl}/relatorio`;\n       if (role === 'admin') return `${baseUrl}/admin`;\n \n+      // Caso não corresponda a nenhuma role conhecida\n       return baseUrl;\n     }\n   }\n };\n"
                },
                {
                    "date": 1740330097781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,54 +16,57 @@\n         password: { label: 'Senha', type: 'password' }\n       },\n       async authorize(credentials) {\n         const { email, password } = credentials;\n-\n+      \n         try {\n-          // Consulta que tenta encontrar o usuário em qualquer uma das três tabelas (clientes, parceiros, admins).\n-          // Cada SELECT adiciona uma role estática para sabermos de onde veio o usuário.\n+          console.log(\"📡 Consultando banco de dados para:\", email);\n+          \n           const query = `\n             SELECT id, email, senha AS \"password\", 'cliente' AS role\n             FROM clientes\n             WHERE email = $1\n-\n+      \n             UNION\n-\n+      \n             SELECT id, email, senha AS \"password\", 'parceiro' AS role\n             FROM parceiros\n             WHERE email = $1\n-\n+      \n             UNION\n-\n+      \n             SELECT id, email, senha AS \"password\", 'admin' AS role\n             FROM admins\n             WHERE email = $1\n           `;\n-\n+      \n           const result = await pool.query(query, [email]);\n-\n-          // Se não achar nenhum registro, significa que não existe user com esse email\n+      \n+          console.log(\"🔍 Resultado da Query:\", result.rows);\n+      \n           if (result.rows.length === 0) {\n-            throw new Error('Usuário não encontrado.');\n+            console.log(\"❌ Usuário não encontrado!\");\n+            throw new Error(\"Usuário não encontrado.\");\n           }\n-\n+      \n           const userRecord = result.rows[0];\n-          \n-          // Verifica a senha (no exemplo, estamos armazenando em texto puro; em produção, use hash/bcrypt)\n+      \n+          // Comparação simples de senha (substitua por hash em produção)\n           if (userRecord.password !== password) {\n-            throw new Error('Senha incorreta.');\n+            console.log(\"❌ Senha incorreta!\");\n+            throw new Error(\"Senha incorreta.\");\n           }\n-\n-          // Retorna o objeto do usuário no formato que o NextAuth espera\n+      \n+          console.log(\"✅ Login bem-sucedido:\", userRecord);\n+      \n           return {\n             id: userRecord.id,\n             email: userRecord.email,\n-            // Aqui usamos um \"nome\" genérico, mas você pode compor com nome e sobrenome se estiver disponível na tabela\n-            name: 'Usuário',\n+            name: \"Usuário\",\n             role: userRecord.role\n           };\n         } catch (err) {\n-          // Lança o erro para aparecer na tela de login (ou no console)\n+          console.error(\"⚠️ Erro na autenticação:\", err.message);\n           throw new Error(err.message);\n         }\n       }\n     })\n"
                },
                {
                    "date": 1740330226921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,25 +21,14 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-            SELECT id, email, senha AS \"password\", 'cliente' AS role\n-            FROM clientes\n-            WHERE email = $1\n+  SELECT id, email, senha AS \"password\", 'cliente' AS role\n+  FROM clientes\n+  WHERE email = $1\n+`;\n+\n       \n-            UNION\n-      \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n-            FROM parceiros\n-            WHERE email = $1\n-      \n-            UNION\n-      \n-            SELECT id, email, senha AS \"password\", 'admin' AS role\n-            FROM admins\n-            WHERE email = $1\n-          `;\n-      \n           const result = await pool.query(query, [email]);\n       \n           console.log(\"🔍 Resultado da Query:\", result.rows);\n       \n"
                },
                {
                    "date": 1740330336775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,25 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-  SELECT id, email, senha AS \"password\", 'cliente' AS role\n-  FROM clientes\n-  WHERE email = $1\n-`;\n-\n+            SELECT id, email, senha AS \"password\", 'cliente' AS role\n+            FROM clientes\n+            WHERE email = $1\n       \n+            UNION\n+      \n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n+            FROM parceiros\n+            WHERE email = $1\n+      \n+            UNION\n+      \n+            SELECT id, email, senha AS \"password\", 'admin' AS role\n+            FROM admins\n+            WHERE email = $1\n+          `;\n+      \n           const result = await pool.query(query, [email]);\n       \n           console.log(\"🔍 Resultado da Query:\", result.rows);\n       \n"
                },
                {
                    "date": 1740330690766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n             WHERE email = $1\n       \n             UNION\n       \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role, nicho\n             FROM parceiros\n             WHERE email = $1\n       \n             UNION\n"
                },
                {
                    "date": 1740330713957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n             WHERE email = $1\n       \n             UNION\n       \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role, nicho\n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role,\n             FROM parceiros\n             WHERE email = $1\n       \n             UNION\n"
                },
                {
                    "date": 1740332008397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n             WHERE email = $1\n       \n             UNION\n       \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role,\n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n             FROM parceiros\n             WHERE email = $1\n       \n             UNION\n"
                },
                {
                    "date": 1740334307908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-            SELECT id, email, senha AS \"password\", 'cliente' AS role\n+            SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha\n             FROM clientes\n             WHERE email = $1\n       \n             UNION\n"
                },
                {
                    "date": 1740334448527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,25 +21,26 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-            SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha\n-            FROM clientes\n-            WHERE email = $1\n+  SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha\n+  FROM clientes\n+  WHERE email = $1\n+\n+  UNION ALL\n+\n+  SELECT id, nome_empresa AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha\n+  FROM parceiros\n+  WHERE email = $1\n+\n+  UNION ALL\n+\n+  SELECT id, 'Admin' AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha\n+  FROM admins\n+  WHERE email = $1\n+`;\n+\n       \n-            UNION\n-      \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n-            FROM parceiros\n-            WHERE email = $1\n-      \n-            UNION\n-      \n-            SELECT id, email, senha AS \"password\", 'admin' AS role\n-            FROM admins\n-            WHERE email = $1\n-          `;\n-      \n           const result = await pool.query(query, [email]);\n       \n           console.log(\"🔍 Resultado da Query:\", result.rows);\n       \n"
                },
                {
                    "date": 1740334686240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,26 +21,25 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-  SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha\n-  FROM clientes\n-  WHERE email = $1\n-\n-  UNION ALL\n-\n-  SELECT id, nome_empresa AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha\n-  FROM parceiros\n-  WHERE email = $1\n-\n-  UNION ALL\n-\n-  SELECT id, 'Admin' AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha\n-  FROM admins\n-  WHERE email = $1\n-`;\n-\n+            SELECT id, email, senha AS \"password\", 'cliente' AS role\n+            FROM clientes\n+            WHERE email = $1\n       \n+            UNION\n+      \n+            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n+            FROM parceiros\n+            WHERE email = $1\n+      \n+            UNION\n+      \n+            SELECT id, email, senha AS \"password\", 'admin' AS role\n+            FROM admins\n+            WHERE email = $1\n+          `;\n+      \n           const result = await pool.query(query, [email]);\n       \n           console.log(\"🔍 Resultado da Query:\", result.rows);\n       \n"
                },
                {
                    "date": 1740334781822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,48 +21,51 @@\n         try {\n           console.log(\"📡 Consultando banco de dados para:\", email);\n           \n           const query = `\n-            SELECT id, email, senha AS \"password\", 'cliente' AS role\n+            SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha AS \"password\", 'cliente' AS role\n             FROM clientes\n             WHERE email = $1\n       \n             UNION\n       \n-            SELECT id, email, senha AS \"password\", 'parceiro' AS role\n+            SELECT id, nome_empresa AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha AS \"password\", 'parceiro' AS role\n             FROM parceiros\n             WHERE email = $1\n       \n             UNION\n       \n-            SELECT id, email, senha AS \"password\", 'admin' AS role\n+            SELECT id, 'Admin' AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha AS \"password\", 'admin' AS role\n             FROM admins\n             WHERE email = $1\n           `;\n-      \n+\n           const result = await pool.query(query, [email]);\n-      \n+\n           console.log(\"🔍 Resultado da Query:\", result.rows);\n-      \n+\n           if (result.rows.length === 0) {\n             console.log(\"❌ Usuário não encontrado!\");\n             throw new Error(\"Usuário não encontrado.\");\n           }\n-      \n+\n           const userRecord = result.rows[0];\n-      \n+\n           // Comparação simples de senha (substitua por hash em produção)\n           if (userRecord.password !== password) {\n             console.log(\"❌ Senha incorreta!\");\n             throw new Error(\"Senha incorreta.\");\n           }\n-      \n+\n           console.log(\"✅ Login bem-sucedido:\", userRecord);\n-      \n+\n           return {\n             id: userRecord.id,\n+            nome: userRecord.nome,\n+            sobrenome: userRecord.sobrenome,\n             email: userRecord.email,\n-            name: \"Usuário\",\n+            id_carteirinha: userRecord.id_carteirinha,\n+            data_ultimo_voucher: userRecord.data_ultimo_voucher,\n             role: userRecord.role\n           };\n         } catch (err) {\n           console.error(\"⚠️ Erro na autenticação:\", err.message);\n"
                },
                {
                    "date": 1740334907163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,15 +25,15 @@\n             SELECT id, nome, sobrenome, email, id_carteirinha, data_ultimo_voucher, senha AS \"password\", 'cliente' AS role\n             FROM clientes\n             WHERE email = $1\n       \n-            UNION\n+            UNION ALL\n       \n             SELECT id, nome_empresa AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha AS \"password\", 'parceiro' AS role\n             FROM parceiros\n             WHERE email = $1\n       \n-            UNION\n+            UNION ALL\n       \n             SELECT id, 'Admin' AS nome, NULL AS sobrenome, email, NULL AS id_carteirinha, NULL AS data_ultimo_voucher, senha AS \"password\", 'admin' AS role\n             FROM admins\n             WHERE email = $1\n"
                },
                {
                    "date": 1740484968288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n       console.log(\"🎯 Role detectado:\", role);\n \n       if (role === 'cliente') return `${baseUrl}/carteirinha`;\n       if (role === 'parceiro') return `${baseUrl}/relatorio`;\n-      if (role === 'admin') return `${baseUrl}/admin`;\n+      if (role === 'admin') return `${baseUrl}/dashboard`;\n \n       // Caso não corresponda a nenhuma role conhecida\n       return baseUrl;\n     }\n"
                }
            ],
            "date": 1740053432207,
            "name": "Commit-0",
            "content": "import CredentialsProvider from 'next-auth/providers/credentials';\nimport { randomBytes } from 'crypto';\nexport const fakeUsers = [{\n  id: '1',\n  email: 'user@demo.com',\n  username: 'demo_user',\n  password: '123456',\n  firstName: 'Demo',\n  lastName: 'User',\n  role: 'Admin',\n  token: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0ZWNoemFhIiwiYXVkIjoiaHR0cHM6Ly90ZWNoemFhLmdldGFwcHVpLmNvbS8iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVjaHphYSIsIkVtYWlsIjoidGVjaHphYXN0dWRpb0BnbWFpbC5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJUZXN0VG9rZW4ifQ.ud4LnFZ-mqhHEYiPf2wCLM7KvLGoAxhXTBSymRIZEFLleFkO119AXd8p3OfPCpdUWSyeZl8-pZyElANc_KHj5w'\n}];\nexport const options = {\n  providers: [CredentialsProvider({\n    name: 'credentials',\n    credentials: {\n      email: {\n        label: 'Email:',\n        type: 'text',\n        placeholder: 'Enter your username'\n      },\n      password: {\n        label: 'Password',\n        type: 'password'\n      }\n    },\n    async authorize(credentials, req) {\n      const filteredUser = fakeUsers.find(user => {\n        return user.email === credentials?.email && user.password === credentials?.password;\n      });\n      if (filteredUser) {\n        return filteredUser;\n      } else {\n        throw new Error('Email or Password is not valid');\n      }\n    }\n  })],\n  secret: 'kvwLrfri/MBznUCofIoRH9+NvGu6GqvVdqO3mor1GuA=',\n  pages: {\n    signIn: '/auth/login-cliente'\n  },\n  callbacks: {\n    async signIn({\n      user,\n      account,\n      profile,\n      email,\n      credentials\n    }) {\n      return true;\n    },\n    session: ({\n      session,\n      token\n    }) => {\n      session.user = {\n        email: 'user@demo.com',\n        name: 'Test User'\n      };\n      return Promise.resolve(session);\n    }\n  },\n  session: {\n    maxAge: 24 * 60 * 60 * 1000,\n    generateSessionToken: () => {\n      return randomBytes(32).toString('hex');\n    }\n  }\n};"
        }
    ]
}