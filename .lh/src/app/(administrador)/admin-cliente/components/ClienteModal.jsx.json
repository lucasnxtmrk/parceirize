{
    "sourceFile": "src/app/(administrador)/admin-cliente/components/ClienteModal.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1740485237908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740486223992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,116 @@\n-import { useEffect } from \"react\";\r\n-import { Modal, Button, Form } from \"react-bootstrap\";\r\n+\"use client\";\r\n+\r\n+import React, { useState, useEffect } from \"react\";\r\n+import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n import { useForm, Controller } from \"react-hook-form\";\r\n \r\n-const ClienteModal = ({ show, handleClose, cliente, onSave }) => {\r\n+// üîπ Fun√ß√£o para gerar ID de carteirinha aleat√≥rio (6 caracteres alfanum√©ricos)\r\n+const generateRandomId = () => {\r\n+    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n+    let id = \"\";\r\n+    for (let i = 0; i < 6; i++) {\r\n+        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n+    }\r\n+    return id;\r\n+};\r\n+\r\n+const ClientModal = ({ show, handleClose, onClientCreated }) => {\r\n     const { control, handleSubmit, setValue, reset } = useForm({\r\n         defaultValues: {\r\n             nome: \"\",\r\n             sobrenome: \"\",\r\n             email: \"\",\r\n-            id_carteirinha: \"\",\r\n             senha: \"\",\r\n+            id_carteirinha: generateRandomId(), // Gera automaticamente ao abrir o modal\r\n         },\r\n     });\r\n \r\n+    const [loading, setLoading] = useState(false);\r\n+    const [error, setError] = useState(null);\r\n+    const [message, setMessage] = useState(null);\r\n+\r\n+    // Gera um novo ID sempre que o modal for aberto\r\n     useEffect(() => {\r\n-        if (cliente) {\r\n-            setValue(\"nome\", cliente.nome || \"\");\r\n-            setValue(\"sobrenome\", cliente.sobrenome || \"\");\r\n-            setValue(\"email\", cliente.email || \"\");\r\n-            setValue(\"id_carteirinha\", cliente.id_carteirinha || \"\");\r\n-            setValue(\"senha\", \"\"); // N√£o carregamos a senha\r\n-        } else {\r\n-            reset();\r\n+        if (show) {\r\n+            setValue(\"id_carteirinha\", generateRandomId());\r\n         }\r\n-    }, [cliente, setValue, reset]);\r\n+    }, [show, setValue]);\r\n \r\n-    const onSubmit = (formData) => {\r\n-        onSave(formData);\r\n-        handleClose();\r\n+    const onSubmit = async (formData) => {\r\n+        setLoading(true);\r\n+        setError(null);\r\n+        setMessage(null);\r\n+\r\n+        try {\r\n+            const response = await fetch(\"/api/admin/clientes\", {\r\n+                method: \"POST\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify(formData),\r\n+            });\r\n+\r\n+            const data = await response.json();\r\n+\r\n+            if (!response.ok) {\r\n+                throw new Error(data.error || \"Erro ao criar cliente\");\r\n+            }\r\n+\r\n+            setMessage(\"Cliente criado com sucesso!\");\r\n+            onClientCreated(); // Atualiza a lista de clientes na p√°gina principal\r\n+            reset(); // Reseta o formul√°rio\r\n+            handleClose(); // Fecha o modal\r\n+\r\n+        } catch (err) {\r\n+            setError(err.message);\r\n+        } finally {\r\n+            setLoading(false);\r\n+        }\r\n     };\r\n \r\n     return (\r\n         <Modal show={show} onHide={handleClose} centered>\r\n             <Modal.Header closeButton>\r\n-                <Modal.Title>{cliente ? \"Editar Cliente\" : \"Novo Cliente\"}</Modal.Title>\r\n+                <Modal.Title>Criar Novo Cliente</Modal.Title>\r\n             </Modal.Header>\r\n             <Modal.Body>\r\n-                <Form onSubmit={handleSubmit(onSubmit)}>\r\n-                    <Form.Group className=\"mb-3\">\r\n-                        <Form.Label>Nome</Form.Label>\r\n-                        <Controller name=\"nome\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} required />} />\r\n-                    </Form.Group>\r\n+                {error && <p className=\"text-danger\">{error}</p>}\r\n+                {message && <p className=\"text-success\">{message}</p>}\r\n \r\n-                    <Form.Group className=\"mb-3\">\r\n-                        <Form.Label>Sobrenome</Form.Label>\r\n-                        <Controller name=\"sobrenome\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} required />} />\r\n-                    </Form.Group>\r\n+                <form onSubmit={handleSubmit(onSubmit)}>\r\n+                    <FormGroup>\r\n+                        <FormLabel>Nome</FormLabel>\r\n+                        <Controller name=\"nome\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-                    <Form.Group className=\"mb-3\">\r\n-                        <Form.Label>E-mail</Form.Label>\r\n-                        <Controller name=\"email\" control={control} render={({ field }) => <Form.Control type=\"email\" {...field} required />} />\r\n-                    </Form.Group>\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>Sobrenome</FormLabel>\r\n+                        <Controller name=\"sobrenome\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-                    <Form.Group className=\"mb-3\">\r\n-                        <Form.Label>ID da Carteirinha</Form.Label>\r\n-                        <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} />} />\r\n-                    </Form.Group>\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>E-mail</FormLabel>\r\n+                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-                    <Form.Group className=\"mb-3\">\r\n-                        <Form.Label>Senha</Form.Label>\r\n-                        <Controller name=\"senha\" control={control} render={({ field }) => <Form.Control type=\"password\" {...field} required={!cliente} />} />\r\n-                    </Form.Group>\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>Senha</FormLabel>\r\n+                        <Controller name=\"senha\" control={control} render={({ field }) => <FormControl type=\"password\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-                    <div className=\"d-flex justify-content-end gap-2\">\r\n-                        <Button variant=\"secondary\" onClick={handleClose}>\r\n-                            Cancelar\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>ID da Carteirinha</FormLabel>\r\n+                        <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n+                    </FormGroup>\r\n+\r\n+                    <div className=\"d-flex justify-content-end mt-4\">\r\n+                        <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n+                        <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n+                            {loading ? \"Salvando...\" : \"Criar Cliente\"}\r\n                         </Button>\r\n-                        <Button type=\"submit\" variant=\"primary\">\r\n-                            {cliente ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n-                        </Button>\r\n                     </div>\r\n-                </Form>\r\n+                </form>\r\n             </Modal.Body>\r\n         </Modal>\r\n     );\r\n };\r\n \r\n-export default ClienteModal;\r\n+export default ClientModal;\r\n"
                },
                {
                    "date": 1740486565877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,27 +13,50 @@\n     }\r\n     return id;\r\n };\r\n \r\n+// üîπ Fun√ß√£o para gerar um ID √∫nico no banco\r\n+const generateUniqueId = async () => {\r\n+    let newId;\r\n+    let exists = true;\r\n+\r\n+    while (exists) {\r\n+        newId = generateRandomId();\r\n+        try {\r\n+            const response = await fetch(`/api/admin/verify-carteirinha?id=${newId}`);\r\n+            const data = await response.json();\r\n+            exists = data.exists;\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao verificar ID da carteirinha:\", error);\r\n+            exists = false; // Em caso de erro, assume que o ID n√£o existe\r\n+        }\r\n+    }\r\n+\r\n+    return newId;\r\n+};\r\n+\r\n const ClientModal = ({ show, handleClose, onClientCreated }) => {\r\n     const { control, handleSubmit, setValue, reset } = useForm({\r\n         defaultValues: {\r\n             nome: \"\",\r\n             sobrenome: \"\",\r\n             email: \"\",\r\n             senha: \"\",\r\n-            id_carteirinha: generateRandomId(), // Gera automaticamente ao abrir o modal\r\n+            id_carteirinha: \"\",\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n-    // Gera um novo ID sempre que o modal for aberto\r\n+    // üîπ Gera um novo ID sempre que o modal for aberto\r\n     useEffect(() => {\r\n         if (show) {\r\n-            setValue(\"id_carteirinha\", generateRandomId());\r\n+            setValue(\"id_carteirinha\", \"Gerando...\");\r\n+            generateUniqueId().then((uniqueId) => {\r\n+                setValue(\"id_carteirinha\", uniqueId);\r\n+            });\r\n         }\r\n     }, [show, setValue]);\r\n \r\n     const onSubmit = async (formData) => {\r\n@@ -54,12 +77,11 @@\n                 throw new Error(data.error || \"Erro ao criar cliente\");\r\n             }\r\n \r\n             setMessage(\"Cliente criado com sucesso!\");\r\n-            onClientCreated(); // Atualiza a lista de clientes na p√°gina principal\r\n-            reset(); // Reseta o formul√°rio\r\n-            handleClose(); // Fecha o modal\r\n-\r\n+            onClientCreated();\r\n+            reset();\r\n+            handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n         } finally {\r\n             setLoading(false);\r\n"
                },
                {
                    "date": 1740487172210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,16 +26,16 @@\n             const data = await response.json();\r\n             exists = data.exists;\r\n         } catch (error) {\r\n             console.error(\"Erro ao verificar ID da carteirinha:\", error);\r\n-            exists = false; // Em caso de erro, assume que o ID n√£o existe\r\n+            exists = false;\r\n         }\r\n     }\r\n \r\n     return newId;\r\n };\r\n \r\n-const ClientModal = ({ show, handleClose, onClientCreated }) => {\r\n+const ClienteModal = ({ show, handleClose, onClientCreated, cliente }) => {\r\n     const { control, handleSubmit, setValue, reset } = useForm({\r\n         defaultValues: {\r\n             nome: \"\",\r\n             sobrenome: \"\",\r\n@@ -47,40 +47,53 @@\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n+    const isEditMode = Boolean(cliente); // Define se estamos editando um cliente existente\r\n \r\n-    // üîπ Gera um novo ID sempre que o modal for aberto\r\n     useEffect(() => {\r\n         if (show) {\r\n-            setValue(\"id_carteirinha\", \"Gerando...\");\r\n-            generateUniqueId().then((uniqueId) => {\r\n-                setValue(\"id_carteirinha\", uniqueId);\r\n-            });\r\n+            reset(); // Reseta o formul√°rio ao abrir o modal\r\n+\r\n+            if (isEditMode) {\r\n+                // Se for edi√ß√£o, preenche os campos com os dados do cliente\r\n+                setValue(\"nome\", cliente.nome);\r\n+                setValue(\"sobrenome\", cliente.sobrenome);\r\n+                setValue(\"email\", cliente.email);\r\n+                setValue(\"id_carteirinha\", cliente.id_carteirinha || \"N/A\");\r\n+            } else {\r\n+                // Se for novo cliente, gera um ID de carteirinha √∫nico\r\n+                setValue(\"id_carteirinha\", \"Gerando...\");\r\n+                generateUniqueId().then((uniqueId) => {\r\n+                    setValue(\"id_carteirinha\", uniqueId);\r\n+                });\r\n+            }\r\n         }\r\n-    }, [show, setValue]);\r\n+    }, [show, cliente, setValue, reset]);\r\n \r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n         setMessage(null);\r\n \r\n+        const method = isEditMode ? \"PUT\" : \"POST\";\r\n+        const url = \"/api/admin/clientes\";\r\n+\r\n         try {\r\n-            const response = await fetch(\"/api/admin/clientes\", {\r\n-                method: \"POST\",\r\n+            const response = await fetch(url, {\r\n+                method,\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify(formData),\r\n+                body: JSON.stringify(isEditMode ? { ...formData, id: cliente.id } : formData),\r\n             });\r\n \r\n             const data = await response.json();\r\n \r\n             if (!response.ok) {\r\n-                throw new Error(data.error || \"Erro ao criar cliente\");\r\n+                throw new Error(data.error || \"Erro ao salvar cliente\");\r\n             }\r\n \r\n-            setMessage(\"Cliente criado com sucesso!\");\r\n+            setMessage(isEditMode ? \"Cliente atualizado com sucesso!\" : \"Cliente criado com sucesso!\");\r\n             onClientCreated();\r\n-            reset();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n         } finally {\r\n@@ -90,9 +103,9 @@\n \r\n     return (\r\n         <Modal show={show} onHide={handleClose} centered>\r\n             <Modal.Header closeButton>\r\n-                <Modal.Title>Criar Novo Cliente</Modal.Title>\r\n+                <Modal.Title>{isEditMode ? \"Editar Cliente\" : \"Criar Novo Cliente\"}</Modal.Title>\r\n             </Modal.Header>\r\n             <Modal.Body>\r\n                 {error && <p className=\"text-danger\">{error}</p>}\r\n                 {message && <p className=\"text-success\">{message}</p>}\r\n@@ -109,15 +122,17 @@\n                     </FormGroup>\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n                         <FormLabel>E-mail</FormLabel>\r\n-                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n+                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required disabled={isEditMode} />} />\r\n                     </FormGroup>\r\n \r\n-                    <FormGroup className=\"mt-3\">\r\n-                        <FormLabel>Senha</FormLabel>\r\n-                        <Controller name=\"senha\" control={control} render={({ field }) => <FormControl type=\"password\" {...field} required />} />\r\n-                    </FormGroup>\r\n+                    {!isEditMode && (\r\n+                        <FormGroup className=\"mt-3\">\r\n+                            <FormLabel>Senha</FormLabel>\r\n+                            <Controller name=\"senha\" control={control} render={({ field }) => <FormControl type=\"password\" {...field} required />} />\r\n+                        </FormGroup>\r\n+                    )}\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n                         <FormLabel>ID da Carteirinha</FormLabel>\r\n                         <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n@@ -125,14 +140,14 @@\n \r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n                         <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n-                            {loading ? \"Salvando...\" : \"Criar Cliente\"}\r\n+                            {loading ? \"Salvando...\" : isEditMode ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n                         </Button>\r\n                     </div>\r\n                 </form>\r\n             </Modal.Body>\r\n         </Modal>\r\n     );\r\n };\r\n \r\n-export default ClientModal;\r\n+export default ClienteModal;\r\n"
                },
                {
                    "date": 1740487458947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n-    const [message, setMessage] = useState(null);\r\n+    const [message] = useState(null);\r\n     const isEditMode = Boolean(cliente); // Define se estamos editando um cliente existente\r\n \r\n     useEffect(() => {\r\n         if (show) {\r\n@@ -72,9 +72,8 @@\n \r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n-        setMessage(null);\r\n \r\n         const method = isEditMode ? \"PUT\" : \"POST\";\r\n         const url = \"/api/admin/clientes\";\r\n \r\n@@ -90,9 +89,8 @@\n             if (!response.ok) {\r\n                 throw new Error(data.error || \"Erro ao salvar cliente\");\r\n             }\r\n \r\n-            setMessage(isEditMode ? \"Cliente atualizado com sucesso!\" : \"Cliente criado com sucesso!\");\r\n             onClientCreated();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n"
                },
                {
                    "date": 1740487497431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n                     </FormGroup>\r\n \r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n                         <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n-                        <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n+                        <Button variant=\"success\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                             {loading ? \"Salvando...\" : isEditMode ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n                         </Button>\r\n                     </div>\r\n                 </form>\r\n"
                },
                {
                    "date": 1740487506619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                         <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n                     </FormGroup>\r\n \r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n-                        <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n+                        <Button variant=\"danger\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"success\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                             {loading ? \"Salvando...\" : isEditMode ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n                         </Button>\r\n                     </div>\r\n"
                },
                {
                    "date": 1740487595790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n                         <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n                     </FormGroup>\r\n \r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n-                        <Button variant=\"danger\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n+                        <Button variant=\"primary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"success\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                             {loading ? \"Salvando...\" : isEditMode ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n                         </Button>\r\n                     </div>\r\n"
                },
                {
                    "date": 1740487633679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n                     </FormGroup>\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n                         <FormLabel>E-mail</FormLabel>\r\n-                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required disabled={isEditMode} />} />\r\n+                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n                     {!isEditMode && (\r\n                         <FormGroup className=\"mt-3\">\r\n"
                }
            ],
            "date": 1740485237908,
            "name": "Commit-0",
            "content": "import { useEffect } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\nconst ClienteModal = ({ show, handleClose, cliente, onSave }) => {\r\n    const { control, handleSubmit, setValue, reset } = useForm({\r\n        defaultValues: {\r\n            nome: \"\",\r\n            sobrenome: \"\",\r\n            email: \"\",\r\n            id_carteirinha: \"\",\r\n            senha: \"\",\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (cliente) {\r\n            setValue(\"nome\", cliente.nome || \"\");\r\n            setValue(\"sobrenome\", cliente.sobrenome || \"\");\r\n            setValue(\"email\", cliente.email || \"\");\r\n            setValue(\"id_carteirinha\", cliente.id_carteirinha || \"\");\r\n            setValue(\"senha\", \"\"); // N√£o carregamos a senha\r\n        } else {\r\n            reset();\r\n        }\r\n    }, [cliente, setValue, reset]);\r\n\r\n    const onSubmit = (formData) => {\r\n        onSave(formData);\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{cliente ? \"Editar Cliente\" : \"Novo Cliente\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Nome</Form.Label>\r\n                        <Controller name=\"nome\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} required />} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Sobrenome</Form.Label>\r\n                        <Controller name=\"sobrenome\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} required />} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>E-mail</Form.Label>\r\n                        <Controller name=\"email\" control={control} render={({ field }) => <Form.Control type=\"email\" {...field} required />} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>ID da Carteirinha</Form.Label>\r\n                        <Controller name=\"id_carteirinha\" control={control} render={({ field }) => <Form.Control type=\"text\" {...field} />} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Label>Senha</Form.Label>\r\n                        <Controller name=\"senha\" control={control} render={({ field }) => <Form.Control type=\"password\" {...field} required={!cliente} />} />\r\n                    </Form.Group>\r\n\r\n                    <div className=\"d-flex justify-content-end gap-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Cancelar\r\n                        </Button>\r\n                        <Button type=\"submit\" variant=\"primary\">\r\n                            {cliente ? \"Salvar Altera√ß√µes\" : \"Criar Cliente\"}\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ClienteModal;\r\n"
        }
    ]
}