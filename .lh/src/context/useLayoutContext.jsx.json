{
    "sourceFile": "src/context/useLayoutContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748464364871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748464364871,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { createContext, use, useCallback, useEffect, useMemo, useState } from 'react';\nimport { toggleDocumentAttribute } from '@/utils/layout';\nimport useQueryParams from '@/hooks/useQueryParams';\nimport useLocalStorage from '@/hooks/useLocalStorage';\nconst ThemeContext = createContext(undefined);\nconst useLayoutContext = () => {\n  const context = use(ThemeContext);\n  if (!context) {\n    throw new Error('useLayoutContext can only be used within LayoutProvider');\n  }\n  return context;\n};\nconst getPreferredTheme = () => window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\nconst LayoutProvider = ({\n  children\n}) => {\n\n  \n  const queryParams = useQueryParams();\n  const override = !!(queryParams.layout_theme || queryParams.topbar_theme || queryParams.menu_theme || queryParams.menu_size);\n  const INIT_STATE = {\n  theme: queryParams['layout_theme'] || 'light',\n  topbarTheme: queryParams['topbar_theme'] || 'light',\n  menu: {\n    theme: queryParams['menu_theme'] || 'dark',\n    size: queryParams['menu_size'] || 'default'\n  }\n};\n\nconst [settings, setSettings] = useLocalStorage('__REBACK_NEXT_CONFIG__', INIT_STATE, override);\n\n// Corrigir menu colapsado apÃ³s resize\nuseEffect(() => {\n  const handleResize = () => {\n    if (window.innerWidth > 992 && settings.menu.size !== 'default') {\n      updateSettings({\n        ...settings,\n        menu: {\n          ...settings.menu,\n          size: 'default'\n        }\n      });\n    }\n  };\n\n  window.addEventListener('resize', handleResize);\n  return () => window.removeEventListener('resize', handleResize);\n}, [settings]);\n  \n  const [offcanvasStates, setOffcanvasStates] = useState({\n    showThemeCustomizer: false,\n    showActivityStream: false,\n    showBackdrop: false\n  });\n\n  // update settings\n  const updateSettings = _newSettings => setSettings({\n    ...settings,\n    ..._newSettings\n  });\n\n  // update theme mode\n  const changeTheme = newTheme => {\n    updateSettings({\n      theme: newTheme\n    });\n  };\n\n  // change topbar theme\n  const changeTopbarTheme = newTheme => {\n    updateSettings({\n      topbarTheme: newTheme\n    });\n  };\n\n  // change menu theme\n  const changeMenuTheme = newTheme => {\n    updateSettings({\n      menu: {\n        ...settings.menu,\n        theme: newTheme\n      }\n    });\n  };\n\n  // change menu theme\n  const changeMenuSize = newSize => {\n    updateSettings({\n      menu: {\n        ...settings.menu,\n        size: newSize\n      }\n    });\n  };\n\n  // toggle theme customizer offcanvas\n  const toggleThemeCustomizer = () => {\n    setOffcanvasStates({\n      ...offcanvasStates,\n      showThemeCustomizer: !offcanvasStates.showThemeCustomizer\n    });\n  };\n\n  // toggle activity stream offcanvas\n  const toggleActivityStream = () => {\n    setOffcanvasStates({\n      ...offcanvasStates,\n      showActivityStream: !offcanvasStates.showActivityStream\n    });\n  };\n  const themeCustomizer = {\n    open: offcanvasStates.showThemeCustomizer,\n    toggle: toggleThemeCustomizer\n  };\n  const activityStream = {\n    open: offcanvasStates.showActivityStream,\n    toggle: toggleActivityStream\n  };\n\n  // toggle backdrop\n  const toggleBackdrop = useCallback(() => {\n    const htmlTag = document.getElementsByTagName('html')[0];\n    if (offcanvasStates.showBackdrop) htmlTag.classList.remove('sidebar-enable');else htmlTag.classList.add('sidebar-enable');\n    setOffcanvasStates({\n      ...offcanvasStates,\n      showBackdrop: !offcanvasStates.showBackdrop\n    });\n  }, [offcanvasStates.showBackdrop]);\n  useEffect(() => {\n    toggleDocumentAttribute('data-bs-theme', settings.theme);\n    toggleDocumentAttribute('data-topbar-color', settings.topbarTheme);\n    toggleDocumentAttribute('data-menu-color', settings.menu.theme);\n    toggleDocumentAttribute('data-menu-size', settings.menu.size);\n    return () => {\n      toggleDocumentAttribute('data-bs-theme', settings.theme, true);\n      toggleDocumentAttribute('data-topbar-color', settings.topbarTheme, true);\n      toggleDocumentAttribute('data-menu-color', settings.menu.theme, true);\n      toggleDocumentAttribute('data-menu-size', settings.menu.size, true);\n    };\n  }, [settings]);\n  const resetSettings = () => updateSettings(INIT_STATE);\n  return <ThemeContext.Provider value={useMemo(() => ({\n    ...settings,\n    themeMode: settings.theme,\n    changeTheme,\n    changeTopbarTheme,\n    changeMenu: {\n      theme: changeMenuTheme,\n      size: changeMenuSize\n    },\n    themeCustomizer,\n    activityStream,\n    toggleBackdrop,\n    resetSettings\n  }), [settings, offcanvasStates])}>\n      {children}\n      {offcanvasStates.showBackdrop && <div className=\"offcanvas-backdrop fade show\" onClick={toggleBackdrop} />}\n    </ThemeContext.Provider>;\n};\nexport { LayoutProvider, useLayoutContext };"
        }
    ]
}