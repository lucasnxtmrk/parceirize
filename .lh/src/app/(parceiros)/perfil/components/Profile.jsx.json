{
    "sourceFile": "src/app/(parceiros)/perfil/components/Profile.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 59,
            "patches": [
                {
                    "date": 1740049269100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740049437112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,19 +20,22 @@\n             </CardHeader>\n             <CardBody>\n                 <Row>\n                     <Col xs={12}>\n-                        <div className=\"avatar-lg mb-3\">\n-                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                    <div className=\"avatar-lg mb-3\">\n+                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\" style={{ width: '150px', height: '150px', overflow: 'hidden' }}> {/* Tamanho fixo e overflow hidden */}\n                                 <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n-                                    <div className=\"avatar-xs cursor-pointer\">\n-                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n-                                            <IconifyIcon icon=\"bx:camera\" />\n-                                        </span>\n-                                    </div>\n+                                    {/* ... */}\n                                 </label>\n                                 <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n-                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n+                                <Image \n+                                    id=\"preview\" \n+                                    src={avatar1} \n+                                    alt=\"Preview Image\" \n+                                    className=\"rounded-circle img-fluid\" \n+                                    width={150}  // Largura fixa\n+                                    height={150} // Altura fixa\n+                                />\n                             </div>\n                         </div>\n                         <Row>\n                             <Col md={6}>\n"
                },
                {
                    "date": 1740049450188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,22 +20,19 @@\n             </CardHeader>\n             <CardBody>\n                 <Row>\n                     <Col xs={12}>\n-                    <div className=\"avatar-lg mb-3\">\n-                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\" style={{ width: '150px', height: '150px', overflow: 'hidden' }}> {/* Tamanho fixo e overflow hidden */}\n+                        <div className=\"avatar-lg mb-3\">\n+                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n                                 <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n-                                    {/* ... */}\n+                                    <div className=\"avatar-xs cursor-pointer\">\n+                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n+                                            <IconifyIcon icon=\"bx:camera\" />\n+                                        </span>\n+                                    </div>\n                                 </label>\n                                 <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n-                                <Image \n-                                    id=\"preview\" \n-                                    src={avatar1} \n-                                    alt=\"Preview Image\" \n-                                    className=\"rounded-circle img-fluid\" \n-                                    width={150}  // Largura fixa\n-                                    height={150} // Altura fixa\n-                                />\n+                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n                             </div>\n                         </div>\n                         <Row>\n                             <Col md={6}>\n"
                },
                {
                    "date": 1740049487176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,19 +20,22 @@\n             </CardHeader>\n             <CardBody>\n                 <Row>\n                     <Col xs={12}>\n-                        <div className=\"avatar-lg mb-3\">\n-                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                        <div className=\"avatar-lg mb-3\" style={{ width: '120px', height: '120px' }}>\n+                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\" style={{ width: '150px', height: '150px', overflow: 'hidden' }}> {/* Tamanho fixo e overflow hidden */}\n                                 <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n-                                    <div className=\"avatar-xs cursor-pointer\">\n-                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n-                                            <IconifyIcon icon=\"bx:camera\" />\n-                                        </span>\n-                                    </div>\n+                                    {/* ... */}\n                                 </label>\n                                 <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n-                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n+                                <Image \n+                                    id=\"preview\" \n+                                    src={avatar1} \n+                                    alt=\"Preview Image\" \n+                                    className=\"rounded-circle img-fluid\" \n+                                    width={150}  // Largura fixa\n+                                    height={150} // Altura fixa\n+                                />\n                             </div>\n                         </div>\n                         <Row>\n                             <Col md={6}>\n"
                },
                {
                    "date": 1740049495700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,22 +20,19 @@\n             </CardHeader>\n             <CardBody>\n                 <Row>\n                     <Col xs={12}>\n-                        <div className=\"avatar-lg mb-3\" style={{ width: '120px', height: '120px' }}>\n-                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\" style={{ width: '150px', height: '150px', overflow: 'hidden' }}> {/* Tamanho fixo e overflow hidden */}\n+                        <div className=\"avatar-lg mb-3\">\n+                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n                                 <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n-                                    {/* ... */}\n+                                    <div className=\"avatar-xs cursor-pointer\">\n+                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n+                                            <IconifyIcon icon=\"bx:camera\" />\n+                                        </span>\n+                                    </div>\n                                 </label>\n                                 <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n-                                <Image \n-                                    id=\"preview\" \n-                                    src={avatar1} \n-                                    alt=\"Preview Image\" \n-                                    className=\"rounded-circle img-fluid\" \n-                                    width={150}  // Largura fixa\n-                                    height={150} // Altura fixa\n-                                />\n+                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n                             </div>\n                         </div>\n                         <Row>\n                             <Col md={6}>\n"
                },
                {
                    "date": 1740049913330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n+import Avatar from './Avatar'; // Importe o componente Avatar\n \n+\n const ProfilePage = () => {\n     const { control } = useForm();\n \n     return (\n@@ -20,19 +22,11 @@\n             </CardHeader>\n             <CardBody>\n                 <Row>\n                     <Col xs={12}>\n-                        <div className=\"avatar-lg mb-3\">\n+                    <div className=\"avatar-lg mb-3\">\n                             <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n-                                    <div className=\"avatar-xs cursor-pointer\">\n-                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n-                                            <IconifyIcon icon=\"bx:camera\" />\n-                                        </span>\n-                                    </div>\n-                                </label>\n-                                <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n-                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n+                                <Avatar src={avatar1} alt=\"Preview Image\" /> {/* Use o componente Avatar aqui */}\n                             </div>\n                         </div>\n                         <Row>\n                             <Col md={6}>\n"
                },
                {
                    "date": 1740049935503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import SelectFormInput from '@/components/from/SelectFormInput';\n import Avatar from './Avatar'; // Importe o componente Avatar\n \n \n-const ProfilePage = () => {\n+const Profile = () => {\n     const { control } = useForm();\n \n     return (\n         <Card>\n@@ -102,5 +102,5 @@\n         </Card>\n     );\n };\n \n-export default ProfilePage;\n\\ No newline at end of file\n+export default Profile;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740049965952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,10 @@\n import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n-import Avatar from './Avatar'; // Importe o componente Avatar\n+import { Avatar } from './Avatar'; // Correct for named export\n \n-\n const Profile = () => {\n     const { control } = useForm();\n \n     return (\n"
                },
                {
                    "date": 1740050072910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,10 @@\n import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n-import { Avatar } from './Avatar'; // Correct for named export\n+import Avatar from './Avatar'; // Correct path to your Avatar component\n+import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Correct path to your image\n \n const Profile = () => {\n     const { control } = useForm();\n \n"
                },
                {
                    "date": 1740050175889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n 'use client';\n \n-import avatar1 from '@/assets/images/users/dummy-avatar.jpg';\n+import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Importe a imagem apenas uma vez\n import IconifyIcon from '@/components/wrappers/IconifyIcon';\n import { useForm } from 'react-hook-form';\n import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n import Avatar from './Avatar'; // Correct path to your Avatar component\n-import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Correct path to your image\n \n const Profile = () => {\n     const { control } = useForm();\n \n"
                },
                {
                    "date": 1740050224413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n 'use client';\n \n import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Importe a imagem apenas uma vez\n-import IconifyIcon from '@/components/wrappers/IconifyIcon';\n-import { useForm } from 'react-hook-form';\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n+import IconifyIcon from '@/components/IconifyIcon'; // Example if it's a default exportimport { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n import Avatar from './Avatar'; // Correct path to your Avatar component\n"
                },
                {
                    "date": 1740050627257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n 'use client';\n \n import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Importe a imagem apenas uma vez\n-import IconifyIcon from '@/components/IconifyIcon'; // Example if it's a default exportimport { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n+import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n import Avatar from './Avatar'; // Correct path to your Avatar component\n"
                },
                {
                    "date": 1740050681794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,11 @@\n import Image from 'next/image';\n import TextFormInput from '@/components/from/TextFormInput';\n import SelectFormInput from '@/components/from/SelectFormInput';\n import Avatar from './Avatar'; // Correct path to your Avatar component\n+import { useForm } from 'react-hook-form';\n \n+\n const Profile = () => {\n     const { control } = useForm();\n \n     return (\n"
                },
                {
                    "date": 1740050712403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,19 +82,8 @@\n                                     containerClassName=\"mb-3\"\n                                     control={control}\n                                 />\n                             </Col>\n-                            <Col md={6}>\n-                                <SelectFormInput\n-                                    name=\"country\"\n-                                    label=\"Country\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                    options={[\n-                                        // ... (lista de países)\n-                                    ]}\n-                                />\n-                            </Col>\n                         </Row>\n                     </Col>\n                 </Row>\n             </CardBody>\n"
                },
                {
                    "date": 1740050781629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n                                 />\n                             </Col>\n                             <Col md={6}>\n                                 <TextFormInput\n-                                    name=\"voucherCode\"\n-                                    label=\"Código do Voucher\"\n-                                    placeholder=\"Digite o código do voucher\"\n+                                    name=\"email\"\n+                                    label=\"Email\"\n+                                    placeholder=\"Digite o seu E-mail\"\n                                     containerClassName=\"mb-3\"\n                                     control={control}\n                                 />\n                             </Col>\n@@ -57,33 +57,15 @@\n                                 />\n                             </Col>\n                             <Col md={6}>\n                                 <TextFormInput\n-                                    name=\"fName\"\n-                                    label=\"First Name\"\n-                                    placeholder=\"Digite seu primeiro nome\"\n+                                    name=\"voucherCode\"\n+                                    label=\"Código do Voucher\"\n+                                    placeholder=\"Digite o código do voucher\"\n                                     containerClassName=\"mb-3\"\n                                     control={control}\n                                 />\n                             </Col>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"lName\"\n-                                    label=\"Last Name\"\n-                                    placeholder=\"Digite seu último nome\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                />\n-                            </Col>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"number\"\n-                                    label=\"Number\"\n-                                    placeholder=\"Digite seu número de telefone\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                />\n-                            </Col>\n                         </Row>\n                     </Col>\n                 </Row>\n             </CardBody>\n"
                },
                {
                    "date": 1740336932395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,138 @@\n-'use client';\n+\"use client\";\n \n-import avatar1 from '@/assets/images/users/dummy-avatar.jpg'; // Importe a imagem apenas uma vez\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\n-import Image from 'next/image';\n-import TextFormInput from '@/components/from/TextFormInput';\n-import SelectFormInput from '@/components/from/SelectFormInput';\n-import Avatar from './Avatar'; // Correct path to your Avatar component\n-import { useForm } from 'react-hook-form';\n+import { useState, useEffect } from \"react\";\n+import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n+import Avatar from \"./Avatar\";\n+import TextFormInput from \"@/components/from/TextFormInput\";\n+import { useForm, Controller } from \"react-hook-form\";\n \n-\n const Profile = () => {\n-    const { control } = useForm();\n+    const { control, handleSubmit, setValue } = useForm();\n+    const [loading, setLoading] = useState(true);\n+    const [error, setError] = useState(null);\n+    const [message, setMessage] = useState(null);\n \n+    useEffect(() => {\n+        // Buscar os dados do parceiro\n+        const fetchProfile = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/perfil\");\n+                if (!response.ok) {\n+                    throw new Error(\"Erro ao buscar perfil\");\n+                }\n+                const data = await response.json();\n+                \n+                // Preencher os campos com os dados do parceiro\n+                setValue(\"companyName\", data.nome_empresa);\n+                setValue(\"email\", data.email);\n+                setValue(\"nicho\", data.nicho);\n+                setValue(\"foto\", data.foto);\n+                setLoading(false);\n+            } catch (err) {\n+                setError(err.message);\n+                setLoading(false);\n+            }\n+        };\n+\n+        fetchProfile();\n+    }, [setValue]);\n+\n+    const onSubmit = async (formData) => {\n+        setMessage(null);\n+        setError(null);\n+\n+        try {\n+            const response = await fetch(\"/api/parceiro/perfil\", {\n+                method: \"PUT\",\n+                headers: { \"Content-Type\": \"application/json\" },\n+                body: JSON.stringify({\n+                    nome_empresa: formData.companyName,\n+                    email: formData.email,\n+                    foto: formData.foto,\n+                    nicho: formData.nicho,\n+                }),\n+            });\n+\n+            const data = await response.json();\n+\n+            if (!response.ok) {\n+                throw new Error(data.error || \"Erro ao atualizar perfil\");\n+            }\n+\n+            setMessage(\"Perfil atualizado com sucesso!\");\n+        } catch (err) {\n+            setError(err.message);\n+        }\n+    };\n\\ No newline at end of file\n+\n+    if (loading) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n+\n     return (\n         <Card>\n             <CardHeader>\n-                <CardTitle as={'h5'} className=\"anchor\" id=\"basic-wizard\">\n-                    Informações do Perfil\n-                </CardTitle>\n+                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n             </CardHeader>\n             <CardBody>\n-                <Row>\n-                    <Col xs={12}>\n-                    <div className=\"avatar-lg mb-3\">\n-                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                <Avatar src={avatar1} alt=\"Preview Image\" /> {/* Use o componente Avatar aqui */}\n+                {error && <p className=\"text-danger\">{error}</p>}\n+                {message && <p className=\"text-success\">{message}</p>}\n+\n+                <form onSubmit={handleSubmit(onSubmit)}>\n+                    <Row>\n+                        <Col xs={12}>\n+                            <div className=\"avatar-lg mb-3\">\n+                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                                    <Avatar src=\"/assets/images/users/dummy-avatar.jpg\" alt=\"Foto do Parceiro\" />\n+                                </div>\n                             </div>\n-                        </div>\n-                        <Row>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"companyName\"\n-                                    label=\"Nome da Empresa\"\n-                                    placeholder=\"Digite o nome da empresa\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                />\n-                            </Col>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"email\"\n-                                    label=\"Email\"\n-                                    placeholder=\"Digite o seu E-mail\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                />\n-                            </Col>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"discount\"\n-                                    label=\"Desconto (%)\"\n-                                    placeholder=\"Digite o valor do desconto\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                    disabled // Desabilitado para edição\n-                                />\n-                            </Col>\n-                            <Col md={6}>\n-                                <TextFormInput\n-                                    name=\"voucherCode\"\n-                                    label=\"Código do Voucher\"\n-                                    placeholder=\"Digite o código do voucher\"\n-                                    containerClassName=\"mb-3\"\n-                                    control={control}\n-                                />\n-                            </Col>\n-                        </Row>\n-                    </Col>\n-                </Row>\n+                            <Row>\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"companyName\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"email\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"Email\" {...field} containerClassName=\"mb-3\" disabled />\n+                                        )}\n+                                    />\n+                                </Col>\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"nicho\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"Nicho\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"foto\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+                            </Row>\n+                            <Button type=\"submit\" variant=\"primary\">\n+                                Salvar Alterações\n+                            </Button>\n+                        </Col>\n+                    </Row>\n+                </form>\n             </CardBody>\n         </Card>\n     );\n };\n \n-export default Profile;\n+export default Profile;\n"
                },
                {
                    "date": 1740337035077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,17 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm();\n+    const { control, handleSubmit, setValue } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+    });\n+\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n@@ -22,12 +30,12 @@\n                 }\n                 const data = await response.json();\n                 \n                 // Preencher os campos com os dados do parceiro\n-                setValue(\"companyName\", data.nome_empresa);\n-                setValue(\"email\", data.email);\n-                setValue(\"nicho\", data.nicho);\n-                setValue(\"foto\", data.foto);\n+                setValue(\"companyName\", data.nome_empresa || \"\");\n+                setValue(\"email\", data.email || \"\");\n+                setValue(\"nicho\", data.nicho || \"\");\n+                setValue(\"foto\", data.foto || \"\");\n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n                 setLoading(false);\n@@ -134,5 +142,5 @@\n         </Card>\n     );\n };\n \n-export default Profile;\n\\ No newline at end of file\n+export default Profile;\n"
                },
                {
                    "date": 1740337399514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n                     <Row>\n                         <Col xs={12}>\n                             <div className=\"avatar-lg mb-3\">\n                                 <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src=\"/assets/images/users/dummy-avatar.jpg\" alt=\"Foto do Parceiro\" />\n+                                <Avatar src={watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\"} alt=\"Foto do Parceiro\" />\n                                 </div>\n                             </div>\n                             <Row>\n                                 <Col md={6}>\n"
                },
                {
                    "date": 1740337474073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm({\n+    const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n"
                },
                {
                    "date": 1740337539245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller } from \"react-hook-form\";\n+import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n     const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n"
                },
                {
                    "date": 1740337645336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, setValue, watch } = useForm({\n+    const { control, handleSubmit, setValue } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n@@ -19,8 +19,11 @@\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n+    // Monitora a mudança da URL da foto\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+\n     useEffect(() => {\n         // Buscar os dados do parceiro\n         const fetchProfile = async () => {\n             try {\n@@ -90,9 +93,9 @@\n                     <Row>\n                         <Col xs={12}>\n                             <div className=\"avatar-lg mb-3\">\n                                 <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                <Avatar src={watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\"} alt=\"Foto do Parceiro\" />\n+                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n                                 </div>\n                             </div>\n                             <Row>\n                                 <Col md={6}>\n"
                },
                {
                    "date": 1740337820015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\";\n+import { useState, useEffect } from \"react\"; // ✅ Certifique-se de que useEffect está importado!\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n"
                },
                {
                    "date": 1740338240056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\";\n \n-import { useState, useEffect } from \"react\"; // ✅ Certifique-se de que useEffect está importado!\n+import React, { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n@@ -19,26 +19,27 @@\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Monitora a mudança da URL da foto\n+    // Monitora mudanças na URL da foto dinamicamente\n     const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n \n+    // Efeito para buscar os dados do parceiro ao carregar a página\n     useEffect(() => {\n-        // Buscar os dados do parceiro\n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n                 if (!response.ok) {\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n-                \n-                // Preencher os campos com os dados do parceiro\n+\n+                // Atualiza os campos do formulário com os dados recebidos\n                 setValue(\"companyName\", data.nome_empresa || \"\");\n                 setValue(\"email\", data.email || \"\");\n                 setValue(\"nicho\", data.nicho || \"\");\n                 setValue(\"foto\", data.foto || \"\");\n+\n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n                 setLoading(false);\n@@ -47,8 +48,9 @@\n \n         fetchProfile();\n     }, [setValue]);\n \n+    // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n \n@@ -57,9 +59,8 @@\n                 method: \"PUT\",\n                 headers: { \"Content-Type\": \"application/json\" },\n                 body: JSON.stringify({\n                     nome_empresa: formData.companyName,\n-                    email: formData.email,\n                     foto: formData.foto,\n                     nicho: formData.nicho,\n                 }),\n             });\n@@ -75,8 +76,9 @@\n             setError(err.message);\n         }\n     };\n \n+    // Exibir carregamento enquanto os dados estão sendo buscados\n     if (loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n@@ -91,51 +93,79 @@\n \n                 <form onSubmit={handleSubmit(onSubmit)}>\n                     <Row>\n                         <Col xs={12}>\n+                            {/* Avatar do Parceiro */}\n                             <div className=\"avatar-lg mb-3\">\n                                 <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n                                     <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n                                 </div>\n                             </div>\n+\n                             <Row>\n+                                {/* Nome da Empresa (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"companyName\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n+                                            <TextFormInput\n+                                                label=\"Nome da Empresa\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n                                         )}\n                                     />\n                                 </Col>\n+\n+                                {/* E-mail (Somente Leitura) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"email\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput label=\"Email\" {...field} containerClassName=\"mb-3\" disabled />\n+                                            <TextFormInput\n+                                                label=\"E-mail\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                                disabled // Email não pode ser editado\n+                                            />\n                                         )}\n                                     />\n                                 </Col>\n+\n+                                {/* Nicho de Atuação (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"nicho\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput label=\"Nicho\" {...field} containerClassName=\"mb-3\" />\n+                                            <TextFormInput\n+                                                label=\"Nicho de Atuação\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n                                         )}\n                                     />\n                                 </Col>\n+\n+                                {/* URL da Foto (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"foto\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n+                                            <TextFormInput\n+                                                label=\"URL da Foto\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n                                         )}\n                                     />\n                                 </Col>\n                             </Row>\n+\n+                            {/* Botão para salvar alterações */}\n                             <Button type=\"submit\" variant=\"primary\">\n                                 Salvar Alterações\n                             </Button>\n                         </Col>\n"
                },
                {
                    "date": 1740338335492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n \"use client\";\n \n-import React, { useState, useEffect } from \"react\";\n+import React from \"react\";\n+import { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n"
                },
                {
                    "date": 1740338381351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \"use client\";\n \n-import React from \"react\";\n-import { useState, useEffect } from \"react\";\n+import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n"
                },
                {
                    "date": 1740339482413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+\"use client\";\n+\n+import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n+import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n+import Avatar from \"./Avatar\";\n+import TextFormInput from \"@/components/from/TextFormInput\";\n+import { useForm, Controller, useWatch } from \"react-hook-form\";\n+\n+const Profile = () => {\n+    const { control, handleSubmit, setValue } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+    });\n+\n+    const [loading, setLoading] = useState(true);\n+    const [error, setError] = useState(null);\n+    const [message, setMessage] = useState(null);\n+\n+    // Monitora mudanças na URL da foto dinamicamente\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+\n+    // Efeito para buscar os dados do parceiro ao carregar a página\n+    useEffect(() => {\n+        if (typeof window === \"undefined\") return; // Garante que só roda no cliente\n+    \n+        const fetchProfile = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/perfil\");\n+                if (!response.ok) {\n+                    throw new Error(\"Erro ao buscar perfil\");\n+                }\n+                const data = await response.json();\n+    \n+                setValue(\"companyName\", data.nome_empresa || \"\");\n+                setValue(\"email\", data.email || \"\");\n+                setValue(\"nicho\", data.nicho || \"\");\n+                setValue(\"foto\", data.foto || \"\");\n+    \n+                setLoading(false);\n+            } catch (err) {\n+                setError(err.message);\n+                setLoading(false);\n+            }\n+        };\n+    \n+        fetchProfile();\n+    }, [setValue]);\n+\n+    // Função para envio do formulário\n+    const onSubmit = async (formData) => {\n+        setMessage(null);\n+        setError(null);\n+\n+        try {\n+            const response = await fetch(\"/api/parceiro/perfil\", {\n+                method: \"PUT\",\n+                headers: { \"Content-Type\": \"application/json\" },\n+                body: JSON.stringify({\n+                    nome_empresa: formData.companyName,\n+                    foto: formData.foto,\n+                    nicho: formData.nicho,\n+                }),\n+            });\n+\n+            const data = await response.json();\n+\n+            if (!response.ok) {\n+                throw new Error(data.error || \"Erro ao atualizar perfil\");\n+            }\n+\n+            setMessage(\"Perfil atualizado com sucesso!\");\n+        } catch (err) {\n+            setError(err.message);\n+        }\n+    };\n+\n+    // Exibir carregamento enquanto os dados estão sendo buscados\n+    if (loading) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n+\n+    return (\n+        <Card>\n+            <CardHeader>\n+                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n+            </CardHeader>\n+            <CardBody>\n+                {error && <p className=\"text-danger\">{error}</p>}\n+                {message && <p className=\"text-success\">{message}</p>}\n+\n+                <form onSubmit={handleSubmit(onSubmit)}>\n+                    <Row>\n+                        <Col xs={12}>\n+                            {/* Avatar do Parceiro */}\n+                            <div className=\"avatar-lg mb-3\">\n+                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n+                                </div>\n+                            </div>\n+\n+                            <Row>\n+                                {/* Nome da Empresa (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"companyName\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"Nome da Empresa\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* E-mail (Somente Leitura) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"email\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"E-mail\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                                disabled // Email não pode ser editado\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* Nicho de Atuação (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"nicho\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"Nicho de Atuação\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* URL da Foto (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"foto\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"URL da Foto\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+                            </Row>\n+\n+                            {/* Botão para salvar alterações */}\n+                            <Button type=\"submit\" variant=\"primary\">\n+                                Salvar Alterações\n+                            </Button>\n+                        </Col>\n+                    </Row>\n+                </form>\n+            </CardBody>\n+        </Card>\n+    );\n+};\n+\n+export default Profile;\n"
                },
                {
                    "date": 1740339594824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+\"use client\";\n+import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n+import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n+import Avatar from \"./Avatar\";\n+import TextFormInput from \"@/components/from/TextFormInput\";\n+import { useForm, Controller, useWatch } from \"react-hook-form\";\n+\n+const Profile = () => {\n+    const { control, handleSubmit, setValue } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+    });\n+\n+    const [loading, setLoading] = useState(true);\n+    const [error, setError] = useState(null);\n+    const [message, setMessage] = useState(null);\n+\n+    // Monitora mudanças na URL da foto dinamicamente\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+\n+    // Efeito para buscar os dados do parceiro ao carregar a página\n+    useEffect(() => {\n+        if (typeof window === \"undefined\") return; // Garante que só roda no cliente\n+    \n+        const fetchProfile = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/perfil\");\n+                if (!response.ok) {\n+                    throw new Error(\"Erro ao buscar perfil\");\n+                }\n+                const data = await response.json();\n+    \n+                setValue(\"companyName\", data.nome_empresa || \"\");\n+                setValue(\"email\", data.email || \"\");\n+                setValue(\"nicho\", data.nicho || \"\");\n+                setValue(\"foto\", data.foto || \"\");\n+    \n+                setLoading(false);\n+            } catch (err) {\n+                setError(err.message);\n+                setLoading(false);\n+            }\n+        };\n+    \n+        fetchProfile();\n+    }, [setValue]);\n+\n+    // Função para envio do formulário\n+    const onSubmit = async (formData) => {\n+        setMessage(null);\n+        setError(null);\n+\n+        try {\n+            const response = await fetch(\"/api/parceiro/perfil\", {\n+                method: \"PUT\",\n+                headers: { \"Content-Type\": \"application/json\" },\n+                body: JSON.stringify({\n+                    nome_empresa: formData.companyName,\n+                    foto: formData.foto,\n+                    nicho: formData.nicho,\n+                }),\n+            });\n+\n+            const data = await response.json();\n+\n+            if (!response.ok) {\n+                throw new Error(data.error || \"Erro ao atualizar perfil\");\n+            }\n+\n+            setMessage(\"Perfil atualizado com sucesso!\");\n+        } catch (err) {\n+            setError(err.message);\n+        }\n+    };\n+\n+    // Exibir carregamento enquanto os dados estão sendo buscados\n+    if (loading) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n+\n+    return (\n+        <Card>\n+            <CardHeader>\n+                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n+            </CardHeader>\n+            <CardBody>\n+                {error && <p className=\"text-danger\">{error}</p>}\n+                {message && <p className=\"text-success\">{message}</p>}\n+\n+                <form onSubmit={handleSubmit(onSubmit)}>\n+                    <Row>\n+                        <Col xs={12}>\n+                            {/* Avatar do Parceiro */}\n+                            <div className=\"avatar-lg mb-3\">\n+                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n+                                </div>\n+                            </div>\n+\n+                            <Row>\n+                                {/* Nome da Empresa (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"companyName\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"Nome da Empresa\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* E-mail (Somente Leitura) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"email\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"E-mail\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                                disabled // Email não pode ser editado\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* Nicho de Atuação (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"nicho\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"Nicho de Atuação\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                {/* URL da Foto (Editável) */}\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"foto\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput\n+                                                label=\"URL da Foto\"\n+                                                {...field}\n+                                                containerClassName=\"mb-3\"\n+                                            />\n+                                        )}\n+                                    />\n+                                </Col>\n+                            </Row>\n+\n+                            {/* Botão para salvar alterações */}\n+                            <Button type=\"submit\" variant=\"primary\">\n+                                Salvar Alterações\n+                            </Button>\n+                        </Col>\n+                    </Row>\n+                </form>\n+            </CardBody>\n+        </Card>\n+    );\n+};\n+\n+export default Profile;\n"
                },
                {
                    "date": 1740365599157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,399 +1,30 @@\n \"use client\";\n-import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n+import React, { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-    });\n+    const { control, handleSubmit, setValue } = useForm();\n \n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Monitora mudanças na URL da foto dinamicamente\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n-\n     // Efeito para buscar os dados do parceiro ao carregar a página\n     useEffect(() => {\n-        if (typeof window === \"undefined\") return; // Garante que só roda no cliente\n-    \n-        const fetchProfile = async () => {\n-            try {\n-                const response = await fetch(\"/api/parceiro/perfil\");\n-                if (!response.ok) {\n-                    throw new Error(\"Erro ao buscar perfil\");\n-                }\n-                const data = await response.json();\n-    \n-                setValue(\"companyName\", data.nome_empresa || \"\");\n-                setValue(\"email\", data.email || \"\");\n-                setValue(\"nicho\", data.nicho || \"\");\n-                setValue(\"foto\", data.foto || \"\");\n-    \n-                setLoading(false);\n-            } catch (err) {\n-                setError(err.message);\n-                setLoading(false);\n-            }\n-        };\n-    \n-        fetchProfile();\n-    }, [setValue]);\n+        if (typeof window === \"undefined\") return;\n \n-    // Função para envio do formulário\n-    const onSubmit = async (formData) => {\n-        setMessage(null);\n-        setError(null);\n-\n-        try {\n-            const response = await fetch(\"/api/parceiro/perfil\", {\n-                method: \"PUT\",\n-                headers: { \"Content-Type\": \"application/json\" },\n-                body: JSON.stringify({\n-                    nome_empresa: formData.companyName,\n-                    foto: formData.foto,\n-                    nicho: formData.nicho,\n-                }),\n-            });\n-\n-            const data = await response.json();\n-\n-            if (!response.ok) {\n-                throw new Error(data.error || \"Erro ao atualizar perfil\");\n-            }\n-\n-            setMessage(\"Perfil atualizado com sucesso!\");\n-        } catch (err) {\n-            setError(err.message);\n-        }\n-    };\n-\n-    // Exibir carregamento enquanto os dados estão sendo buscados\n-    if (loading) {\n-        return <div className=\"text-center\">Carregando perfil...</div>;\n-    }\n-\n-    return (\n-        <Card>\n-            <CardHeader>\n-                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n-            </CardHeader>\n-            <CardBody>\n-                {error && <p className=\"text-danger\">{error}</p>}\n-                {message && <p className=\"text-success\">{message}</p>}\n-\n-                <form onSubmit={handleSubmit(onSubmit)}>\n-                    <Row>\n-                        <Col xs={12}>\n-                            {/* Avatar do Parceiro */}\n-                            <div className=\"avatar-lg mb-3\">\n-                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                                </div>\n-                            </div>\n-\n-                            <Row>\n-                                {/* Nome da Empresa (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"companyName\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nome da Empresa\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* E-mail (Somente Leitura) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"email\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"E-mail\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                                disabled // Email não pode ser editado\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* Nicho de Atuação (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"nicho\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nicho de Atuação\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* URL da Foto (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"foto\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"URL da Foto\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-                            </Row>\n-\n-                            {/* Botão para salvar alterações */}\n-                            <Button type=\"submit\" variant=\"primary\">\n-                                Salvar Alterações\n-                            </Button>\n-                        </Col>\n-                    </Row>\n-                </form>\n-            </CardBody>\n-        </Card>\n-    );\n-};\n-\n-export default Profile;\n-\"use client\";\n-\n-import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n-import Avatar from \"./Avatar\";\n-import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller, useWatch } from \"react-hook-form\";\n-\n-const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-    });\n-\n-    const [loading, setLoading] = useState(true);\n-    const [error, setError] = useState(null);\n-    const [message, setMessage] = useState(null);\n-\n-    // Monitora mudanças na URL da foto dinamicamente\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n-\n-    // Efeito para buscar os dados do parceiro ao carregar a página\n-    useEffect(() => {\n-        if (typeof window === \"undefined\") return; // Garante que só roda no cliente\n-    \n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n                 if (!response.ok) {\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n-    \n-                setValue(\"companyName\", data.nome_empresa || \"\");\n-                setValue(\"email\", data.email || \"\");\n-                setValue(\"nicho\", data.nicho || \"\");\n-                setValue(\"foto\", data.foto || \"\");\n-    \n-                setLoading(false);\n-            } catch (err) {\n-                setError(err.message);\n-                setLoading(false);\n-            }\n-        };\n-    \n-        fetchProfile();\n-    }, [setValue]);\n \n-    // Função para envio do formulário\n-    const onSubmit = async (formData) => {\n-        setMessage(null);\n-        setError(null);\n-\n-        try {\n-            const response = await fetch(\"/api/parceiro/perfil\", {\n-                method: \"PUT\",\n-                headers: { \"Content-Type\": \"application/json\" },\n-                body: JSON.stringify({\n-                    nome_empresa: formData.companyName,\n-                    foto: formData.foto,\n-                    nicho: formData.nicho,\n-                }),\n-            });\n-\n-            const data = await response.json();\n-\n-            if (!response.ok) {\n-                throw new Error(data.error || \"Erro ao atualizar perfil\");\n-            }\n-\n-            setMessage(\"Perfil atualizado com sucesso!\");\n-        } catch (err) {\n-            setError(err.message);\n-        }\n-    };\n-\n-    // Exibir carregamento enquanto os dados estão sendo buscados\n-    if (loading) {\n-        return <div className=\"text-center\">Carregando perfil...</div>;\n-    }\n-\n-    return (\n-        <Card>\n-            <CardHeader>\n-                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n-            </CardHeader>\n-            <CardBody>\n-                {error && <p className=\"text-danger\">{error}</p>}\n-                {message && <p className=\"text-success\">{message}</p>}\n-\n-                <form onSubmit={handleSubmit(onSubmit)}>\n-                    <Row>\n-                        <Col xs={12}>\n-                            {/* Avatar do Parceiro */}\n-                            <div className=\"avatar-lg mb-3\">\n-                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                                </div>\n-                            </div>\n-\n-                            <Row>\n-                                {/* Nome da Empresa (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"companyName\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nome da Empresa\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* E-mail (Somente Leitura) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"email\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"E-mail\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                                disabled // Email não pode ser editado\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* Nicho de Atuação (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"nicho\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nicho de Atuação\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                {/* URL da Foto (Editável) */}\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"foto\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"URL da Foto\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n-                                        )}\n-                                    />\n-                                </Col>\n-                            </Row>\n-\n-                            {/* Botão para salvar alterações */}\n-                            <Button type=\"submit\" variant=\"primary\">\n-                                Salvar Alterações\n-                            </Button>\n-                        </Col>\n-                    </Row>\n-                </form>\n-            </CardBody>\n-        </Card>\n-    );\n-};\n-\n-export default Profile;\n-\"use client\";\n-\n-import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n-import Avatar from \"./Avatar\";\n-import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller, useWatch } from \"react-hook-form\";\n-\n-const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-    });\n-\n-    const [loading, setLoading] = useState(true);\n-    const [error, setError] = useState(null);\n-    const [message, setMessage] = useState(null);\n-\n-    // Monitora mudanças na URL da foto dinamicamente\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n-\n-    // Efeito para buscar os dados do parceiro ao carregar a página\n-    useEffect(() => {\n-        const fetchProfile = async () => {\n-            try {\n-                const response = await fetch(\"/api/parceiro/perfil\");\n-                if (!response.ok) {\n-                    throw new Error(\"Erro ao buscar perfil\");\n-                }\n-                const data = await response.json();\n-\n-                // Atualiza os campos do formulário com os dados recebidos\n                 setValue(\"companyName\", data.nome_empresa || \"\");\n                 setValue(\"email\", data.email || \"\");\n                 setValue(\"nicho\", data.nicho || \"\");\n                 setValue(\"foto\", data.foto || \"\");\n@@ -407,8 +38,11 @@\n \n         fetchProfile();\n     }, [setValue]);\n \n+    // Verifica se control está definido antes de usar useWatch\n+    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+\n     // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n@@ -452,82 +86,57 @@\n \n                 <form onSubmit={handleSubmit(onSubmit)}>\n                     <Row>\n                         <Col xs={12}>\n-                            {/* Avatar do Parceiro */}\n                             <div className=\"avatar-lg mb-3\">\n                                 <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n                                     <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n                                 </div>\n                             </div>\n \n                             <Row>\n-                                {/* Nome da Empresa (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"companyName\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nome da Empresa\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n+                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n                                         )}\n                                     />\n                                 </Col>\n \n-                                {/* E-mail (Somente Leitura) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"email\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"E-mail\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                                disabled // Email não pode ser editado\n-                                            />\n+                                            <TextFormInput label=\"E-mail\" {...field} containerClassName=\"mb-3\" disabled />\n                                         )}\n                                     />\n                                 </Col>\n \n-                                {/* Nicho de Atuação (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"nicho\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"Nicho de Atuação\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n+                                            <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n                                         )}\n                                     />\n                                 </Col>\n \n-                                {/* URL da Foto (Editável) */}\n                                 <Col md={6}>\n                                     <Controller\n                                         name=\"foto\"\n                                         control={control}\n                                         render={({ field }) => (\n-                                            <TextFormInput\n-                                                label=\"URL da Foto\"\n-                                                {...field}\n-                                                containerClassName=\"mb-3\"\n-                                            />\n+                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n                                         )}\n                                     />\n                                 </Col>\n                             </Row>\n \n-                            {/* Botão para salvar alterações */}\n-                            <Button type=\"submit\" variant=\"primary\">\n-                                Salvar Alterações\n-                            </Button>\n+                            <Button type=\"submit\" variant=\"primary\">Salvar Alterações</Button>\n                         </Col>\n                     </Row>\n                 </form>\n             </CardBody>\n"
                },
                {
                    "date": 1740365764772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,26 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, setValue } = useForm();\n+    const { control, handleSubmit, setValue, reset } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+        mode: \"onChange\", // Garante que o formulário reage a mudanças\n+    });\n \n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Efeito para buscar os dados do parceiro ao carregar a página\n+    // Aguarde o controle ser inicializado antes de usar useWatch\n+    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+\n+    // Busca os dados do parceiro\n     useEffect(() => {\n         if (typeof window === \"undefined\") return;\n \n         const fetchProfile = async () => {\n@@ -23,12 +34,14 @@\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n \n-                setValue(\"companyName\", data.nome_empresa || \"\");\n-                setValue(\"email\", data.email || \"\");\n-                setValue(\"nicho\", data.nicho || \"\");\n-                setValue(\"foto\", data.foto || \"\");\n+                reset({\n+                    companyName: data.nome_empresa || \"\",\n+                    email: data.email || \"\",\n+                    nicho: data.nicho || \"\",\n+                    foto: data.foto || \"\",\n+                });\n \n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n@@ -36,13 +49,10 @@\n             }\n         };\n \n         fetchProfile();\n-    }, [setValue]);\n+    }, [reset]);\n \n-    // Verifica se control está definido antes de usar useWatch\n-    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n-\n     // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n"
                },
                {
                    "date": 1740399541420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n \"use client\";\n-import React, { useState, useEffect } from \"react\";\n+\n+import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n"
                },
                {
                    "date": 1740399674035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n     // Aguarde o controle ser inicializado antes de usar useWatch\n-    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) ?? \"/assets/images/users/dummy-avatar.jpg\";\n \n     // Busca os dados do parceiro\n     useEffect(() => {\n         if (typeof window === \"undefined\") return;\n"
                },
                {
                    "date": 1740399731852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,15 +105,17 @@\n                             </div>\n \n                             <Row>\n                                 <Col md={6}>\n-                                    <Controller\n-                                        name=\"companyName\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n+                                {control && (\n+    <Controller\n+        name=\"companyName\"\n+        control={control}\n+        render={({ field }) => (\n+            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n+        )}\n+    />\n+)}\n                                 </Col>\n \n                                 <Col md={6}>\n                                     <Controller\n"
                },
                {
                    "date": 1740399793880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,33 +26,35 @@\n \n     // Busca os dados do parceiro\n     useEffect(() => {\n         if (typeof window === \"undefined\") return;\n-\n+    \n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n                 if (!response.ok) {\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n-\n+    \n+                // Garante que `reset` só ocorre quando os dados são carregados\n                 reset({\n                     companyName: data.nome_empresa || \"\",\n                     email: data.email || \"\",\n                     nicho: data.nicho || \"\",\n                     foto: data.foto || \"\",\n                 });\n-\n+    \n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n                 setLoading(false);\n             }\n         };\n-\n+    \n         fetchProfile();\n-    }, [reset]);\n+    }, [reset]); // Dependência correta\n+    \n \n     // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n"
                },
                {
                    "date": 1740399900535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+\"use client\";\n+\n+import React, { useState, useEffect } from \"react\";\n+import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n+import Avatar from \"./Avatar\";\n+import TextFormInput from \"@/components/from/TextFormInput\";\n+import { useForm, Controller, useWatch } from \"react-hook-form\";\n+\n+const Profile = () => {\n+    const [isClient, setIsClient] = useState(false); // Estado para verificar se está no cliente\n+\n+    useEffect(() => {\n+        setIsClient(true); // Define como true quando o componente monta no cliente\n+    }, []);\n+\n+    const { control, handleSubmit, setValue, reset } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+        mode: \"onChange\",\n+    });\n+\n+    const [loading, setLoading] = useState(true);\n+    const [error, setError] = useState(null);\n+    const [message, setMessage] = useState(null);\n+\n+    // Só executa useWatch quando `isClient` for verdadeiro\n+    const fotoUrl = isClient ? useWatch({ control, name: \"foto\" }) ?? \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+\n+    useEffect(() => {\n+        if (!isClient) return;\n+\n+        const fetchProfile = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/perfil\");\n+                if (!response.ok) {\n+                    throw new Error(\"Erro ao buscar perfil\");\n+                }\n+                const data = await response.json();\n+\n+                reset({\n+                    companyName: data.nome_empresa || \"\",\n+                    email: data.email || \"\",\n+                    nicho: data.nicho || \"\",\n+                    foto: data.foto || \"\",\n+                });\n+\n+                setLoading(false);\n+            } catch (err) {\n+                setError(err.message);\n+                setLoading(false);\n+            }\n+        };\n+\n+        fetchProfile();\n+    }, [reset, isClient]);\n+\n+    const onSubmit = async (formData) => {\n+        setMessage(null);\n+        setError(null);\n+\n+        try {\n+            const response = await fetch(\"/api/parceiro/perfil\", {\n+                method: \"PUT\",\n+                headers: { \"Content-Type\": \"application/json\" },\n+                body: JSON.stringify({\n+                    nome_empresa: formData.companyName,\n+                    foto: formData.foto,\n+                    nicho: formData.nicho,\n+                }),\n+            });\n+\n+            const data = await response.json();\n+\n+            if (!response.ok) {\n+                throw new Error(data.error || \"Erro ao atualizar perfil\");\n+            }\n+\n+            setMessage(\"Perfil atualizado com sucesso!\");\n+        } catch (err) {\n+            setError(err.message);\n+        }\n+    };\n+\n+    if (!isClient || loading) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n+\n+    return (\n+        <Card>\n+            <CardHeader>\n+                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n+            </CardHeader>\n+            <CardBody>\n+                {error && <p className=\"text-danger\">{error}</p>}\n+                {message && <p className=\"text-success\">{message}</p>}\n+\n+                <form onSubmit={handleSubmit(onSubmit)}>\n+                    <Row>\n+                        <Col xs={12}>\n+                            <div className=\"avatar-lg mb-3\">\n+                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n+                                </div>\n+                            </div>\n+\n+                            <Row>\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"companyName\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"email\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"E-mail\" {...field} containerClassName=\"mb-3\" disabled />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"nicho\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"foto\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n+                            </Row>\n+\n+                            <Button type=\"submit\" variant=\"primary\">Salvar Alterações</Button>\n+                        </Col>\n+                    </Row>\n+                </form>\n+            </CardBody>\n+        </Card>\n+    );\n+};\n+\n+export default Profile;\n"
                },
                {
                    "date": 1740399975665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,12 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const [isClient, setIsClient] = useState(false); // Estado para verificar se está no cliente\n+    const [isClient, setIsClient] = useState(false); // Garante que estamos no cliente\n \n     useEffect(() => {\n-        setIsClient(true); // Define como true quando o componente monta no cliente\n+        setIsClient(true);\n     }, []);\n \n     const { control, handleSubmit, setValue, reset } = useForm({\n         defaultValues: {\n@@ -26,10 +26,10 @@\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Só executa useWatch quando `isClient` for verdadeiro\n-    const fotoUrl = isClient ? useWatch({ control, name: \"foto\" }) ?? \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+    // ✅ Sempre chamar o hook, mas usar um fallback caso ainda esteja carregando\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n \n     useEffect(() => {\n         if (!isClient) return;\n \n@@ -158,166 +158,4 @@\n     );\n };\n \n export default Profile;\n-\"use client\";\n-\n-import React, { useState, useEffect } from \"react\"; // Importe o useEffect aqui\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n-import Avatar from \"./Avatar\";\n-import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller, useWatch } from \"react-hook-form\";\n-\n-const Profile = () => {\n-    const { control, handleSubmit, setValue, reset } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-        mode: \"onChange\", // Garante que o formulário reage a mudanças\n-    });\n-\n-    const [loading, setLoading] = useState(true);\n-    const [error, setError] = useState(null);\n-    const [message, setMessage] = useState(null);\n-\n-    // Aguarde o controle ser inicializado antes de usar useWatch\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) ?? \"/assets/images/users/dummy-avatar.jpg\";\n-\n-    // Busca os dados do parceiro\n-    useEffect(() => {\n-        if (typeof window === \"undefined\") return;\n-    \n-        const fetchProfile = async () => {\n-            try {\n-                const response = await fetch(\"/api/parceiro/perfil\");\n-                if (!response.ok) {\n-                    throw new Error(\"Erro ao buscar perfil\");\n-                }\n-                const data = await response.json();\n-    \n-                // Garante que `reset` só ocorre quando os dados são carregados\n-                reset({\n-                    companyName: data.nome_empresa || \"\",\n-                    email: data.email || \"\",\n-                    nicho: data.nicho || \"\",\n-                    foto: data.foto || \"\",\n-                });\n-    \n-                setLoading(false);\n-            } catch (err) {\n-                setError(err.message);\n-                setLoading(false);\n-            }\n-        };\n-    \n-        fetchProfile();\n-    }, [reset]); // Dependência correta\n-    \n-\n-    // Função para envio do formulário\n-    const onSubmit = async (formData) => {\n-        setMessage(null);\n-        setError(null);\n-\n-        try {\n-            const response = await fetch(\"/api/parceiro/perfil\", {\n-                method: \"PUT\",\n-                headers: { \"Content-Type\": \"application/json\" },\n-                body: JSON.stringify({\n-                    nome_empresa: formData.companyName,\n-                    foto: formData.foto,\n-                    nicho: formData.nicho,\n-                }),\n-            });\n-\n-            const data = await response.json();\n-\n-            if (!response.ok) {\n-                throw new Error(data.error || \"Erro ao atualizar perfil\");\n-            }\n-\n-            setMessage(\"Perfil atualizado com sucesso!\");\n-        } catch (err) {\n-            setError(err.message);\n-        }\n-    };\n-\n-    // Exibir carregamento enquanto os dados estão sendo buscados\n-    if (loading) {\n-        return <div className=\"text-center\">Carregando perfil...</div>;\n-    }\n-\n-    return (\n-        <Card>\n-            <CardHeader>\n-                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n-            </CardHeader>\n-            <CardBody>\n-                {error && <p className=\"text-danger\">{error}</p>}\n-                {message && <p className=\"text-success\">{message}</p>}\n-\n-                <form onSubmit={handleSubmit(onSubmit)}>\n-                    <Row>\n-                        <Col xs={12}>\n-                            <div className=\"avatar-lg mb-3\">\n-                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                                </div>\n-                            </div>\n-\n-                            <Row>\n-                                <Col md={6}>\n-                                {control && (\n-    <Controller\n-        name=\"companyName\"\n-        control={control}\n-        render={({ field }) => (\n-            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n-        )}\n-    />\n-)}\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"email\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"E-mail\" {...field} containerClassName=\"mb-3\" disabled />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"nicho\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"foto\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n-                            </Row>\n-\n-                            <Button type=\"submit\" variant=\"primary\">Salvar Alterações</Button>\n-                        </Col>\n-                    </Row>\n-                </form>\n-            </CardBody>\n-        </Card>\n-    );\n-};\n-\n-export default Profile;\n"
                },
                {
                    "date": 1740400135137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,30 +6,39 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const [isClient, setIsClient] = useState(false); // Garante que estamos no cliente\n+    const [isClient, setIsClient] = useState(false); // Garantimos que estamos no cliente\n+    const [formMethods, setFormMethods] = useState(null); // Armazena os métodos do useForm\n \n     useEffect(() => {\n         setIsClient(true);\n+\n+        // Inicializamos o useForm somente quando isClient for true\n+        setFormMethods(useForm({\n+            defaultValues: {\n+                companyName: \"\",\n+                email: \"\",\n+                nicho: \"\",\n+                foto: \"\",\n+            },\n+            mode: \"onChange\",\n+        }));\n     }, []);\n \n-    const { control, handleSubmit, setValue, reset } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-        mode: \"onChange\",\n-    });\n+    // Evita erro caso ainda não tenha sido inicializado\n+    if (!isClient || !formMethods) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n \n+    const { control, handleSubmit, setValue, reset } = formMethods;\n+\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // ✅ Sempre chamar o hook, mas usar um fallback caso ainda esteja carregando\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+    // ✅ Garante que `control` existe antes de chamar `useWatch`\n+    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n \n     useEffect(() => {\n         if (!isClient) return;\n \n@@ -84,9 +93,9 @@\n             setError(err.message);\n         }\n     };\n \n-    if (!isClient || loading) {\n+    if (loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n     return (\n"
                },
                {
                    "date": 1740400146053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,39 +6,30 @@\n import TextFormInput from \"@/components/from/TextFormInput\";\n import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const [isClient, setIsClient] = useState(false); // Garantimos que estamos no cliente\n-    const [formMethods, setFormMethods] = useState(null); // Armazena os métodos do useForm\n+    const [isClient, setIsClient] = useState(false); // Garante que estamos no cliente\n \n     useEffect(() => {\n         setIsClient(true);\n-\n-        // Inicializamos o useForm somente quando isClient for true\n-        setFormMethods(useForm({\n-            defaultValues: {\n-                companyName: \"\",\n-                email: \"\",\n-                nicho: \"\",\n-                foto: \"\",\n-            },\n-            mode: \"onChange\",\n-        }));\n     }, []);\n \n-    // Evita erro caso ainda não tenha sido inicializado\n-    if (!isClient || !formMethods) {\n-        return <div className=\"text-center\">Carregando perfil...</div>;\n-    }\n+    const { control, handleSubmit, setValue, reset } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+        mode: \"onChange\",\n+    });\n \n-    const { control, handleSubmit, setValue, reset } = formMethods;\n-\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // ✅ Garante que `control` existe antes de chamar `useWatch`\n-    const fotoUrl = control ? useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\" : \"/assets/images/users/dummy-avatar.jpg\";\n+    // ✅ Sempre chamar o hook, mas usar um fallback caso ainda esteja carregando\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n \n     useEffect(() => {\n         if (!isClient) return;\n \n@@ -93,9 +84,9 @@\n             setError(err.message);\n         }\n     };\n \n-    if (loading) {\n+    if (!isClient || loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n     return (\n"
                },
                {
                    "date": 1740400492888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,13 @@\n \"use client\";\n \n import React, { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n-import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller, useWatch } from \"react-hook-form\";\n+import { useForm, Controller } from \"react-hook-form\";\n \n const Profile = () => {\n-    const [isClient, setIsClient] = useState(false); // Garante que estamos no cliente\n-\n-    useEffect(() => {\n-        setIsClient(true);\n-    }, []);\n-\n-    const { control, handleSubmit, setValue, reset } = useForm({\n+    const { control, handleSubmit, reset, setValue, watch } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n@@ -26,14 +19,12 @@\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // ✅ Sempre chamar o hook, mas usar um fallback caso ainda esteja carregando\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+    // Observa o campo de imagem\n+    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n \n     useEffect(() => {\n-        if (!isClient) return;\n-\n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n                 if (!response.ok) {\n@@ -55,9 +46,9 @@\n             }\n         };\n \n         fetchProfile();\n-    }, [reset, isClient]);\n+    }, [reset]);\n \n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n@@ -84,9 +75,22 @@\n             setError(err.message);\n         }\n     };\n \n-    if (!isClient || loading) {\n+    // ✅ Função para processar upload de imagem\n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+\n+        if (file) {\n+            const reader = new FileReader();\n+            reader.onloadend = () => {\n+                setValue(\"foto\", reader.result); // Atualiza o campo foto com a imagem em base64\n+            };\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    if (loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n     return (\n@@ -100,12 +104,28 @@\n \n                 <form onSubmit={handleSubmit(onSubmit)}>\n                     <Row>\n                         <Col xs={12}>\n-                            <div className=\"avatar-lg mb-3\">\n-                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                                </div>\n+                            {/* ✅ Nova área de upload de imagem */}\n+                            <div className=\"mb-3 text-center\">\n+                                <img\n+                                    src={fotoUrl}\n+                                    alt=\"Foto do Parceiro\"\n+                                    style={{\n+                                        width: \"120px\",\n+                                        height: \"120px\",\n+                                        borderRadius: \"50%\",\n+                                        objectFit: \"cover\",\n+                                        display: \"block\",\n+                                        margin: \"0 auto 10px\",\n+                                    }}\n+                                />\n+                                <input\n+                                    type=\"file\"\n+                                    accept=\"image/*\"\n+                                    onChange={handleImageUpload}\n+                                    className=\"form-control\"\n+                                />\n                             </div>\n \n                             <Row>\n                                 <Col md={6}>\n@@ -136,18 +156,8 @@\n                                             <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n                                         )}\n                                     />\n                                 </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"foto\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n                             </Row>\n \n                             <Button type=\"submit\" variant=\"primary\">Salvar Alterações</Button>\n                         </Col>\n"
                },
                {
                    "date": 1740400560728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,19 +10,19 @@\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n-            foto: \"\",\n+            foto: \"/assets/images/users/dummy-avatar.jpg\",\n         },\n         mode: \"onChange\",\n     });\n \n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Observa o campo de imagem\n-    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n+    // ✅ Observa o campo \"foto\" corretamente\n+    const fotoUrl = watch(\"foto\");\n \n     useEffect(() => {\n         const fetchProfile = async () => {\n             try {\n@@ -35,9 +35,9 @@\n                 reset({\n                     companyName: data.nome_empresa || \"\",\n                     email: data.email || \"\",\n                     nicho: data.nicho || \"\",\n-                    foto: data.foto || \"\",\n+                    foto: data.foto || \"/assets/images/users/dummy-avatar.jpg\",\n                 });\n \n                 setLoading(false);\n             } catch (err) {\n"
                },
                {
                    "date": 1740400759762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,54 @@\n \"use client\";\n-\n import React, { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n+import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller } from \"react-hook-form\";\n+import { useForm, Controller, useWatch } from \"react-hook-form\";\n \n const Profile = () => {\n-    const { control, handleSubmit, reset, setValue, watch } = useForm({\n+    const {\n+        control,\n+        handleSubmit,\n+        setValue,\n+        reset,\n+        formState: { isSubmitting },\n+    } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n-            foto: \"/assets/images/users/dummy-avatar.jpg\",\n+            foto: \"\",\n         },\n         mode: \"onChange\",\n     });\n \n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // ✅ Observa o campo \"foto\" corretamente\n-    const fotoUrl = watch(\"foto\");\n+    // Aguarde o controle ser inicializado antes de usar useWatch\n+    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n \n+    // Busca os dados do parceiro\n     useEffect(() => {\n+        if (typeof window === \"undefined\") return;\n+\n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n                 if (!response.ok) {\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n \n+                console.log(\"Dados carregados:\", data); // Log para depuração\n+\n                 reset({\n-                    companyName: data.nome_empresa || \"\",\n-                    email: data.email || \"\",\n-                    nicho: data.nicho || \"\",\n-                    foto: data.foto || \"/assets/images/users/dummy-avatar.jpg\",\n+                    companyName: data?.nome_empresa || \"\",\n+                    email: data?.email || \"\",\n+                    nicho: data?.nicho || \"\",\n+                    foto: data?.foto || \"\",\n                 });\n \n                 setLoading(false);\n             } catch (err) {\n@@ -48,8 +59,9 @@\n \n         fetchProfile();\n     }, [reset]);\n \n+    // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n \n@@ -75,21 +87,9 @@\n             setError(err.message);\n         }\n     };\n \n-    // ✅ Função para processar upload de imagem\n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-\n-        if (file) {\n-            const reader = new FileReader();\n-            reader.onloadend = () => {\n-                setValue(\"foto\", reader.result); // Atualiza o campo foto com a imagem em base64\n-            };\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n+    // Exibir carregamento enquanto os dados estão sendo buscados\n     if (loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n@@ -104,28 +104,12 @@\n \n                 <form onSubmit={handleSubmit(onSubmit)}>\n                     <Row>\n                         <Col xs={12}>\n-                            {/* ✅ Nova área de upload de imagem */}\n-                            <div className=\"mb-3 text-center\">\n-                                <img\n-                                    src={fotoUrl}\n-                                    alt=\"Foto do Parceiro\"\n-                                    style={{\n-                                        width: \"120px\",\n-                                        height: \"120px\",\n-                                        borderRadius: \"50%\",\n-                                        objectFit: \"cover\",\n-                                        display: \"block\",\n-                                        margin: \"0 auto 10px\",\n-                                    }}\n-                                />\n-                                <input\n-                                    type=\"file\"\n-                                    accept=\"image/*\"\n-                                    onChange={handleImageUpload}\n-                                    className=\"form-control\"\n-                                />\n+                            <div className=\"avatar-lg mb-3\">\n+                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n+                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n+                                </div>\n                             </div>\n \n                             <Row>\n                                 <Col md={6}>\n@@ -156,11 +140,23 @@\n                                             <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n                                         )}\n                                     />\n                                 </Col>\n+\n+                                <Col md={6}>\n+                                    <Controller\n+                                        name=\"foto\"\n+                                        control={control}\n+                                        render={({ field }) => (\n+                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n+                                        )}\n+                                    />\n+                                </Col>\n                             </Row>\n \n-                            <Button type=\"submit\" variant=\"primary\">Salvar Alterações</Button>\n+                            <Button type=\"submit\" variant=\"primary\" disabled={isSubmitting}>\n+                                {isSubmitting ? \"Salvando...\" : \"Salvar Alterações\"}\n+                            </Button>\n                         </Col>\n                     </Row>\n                 </form>\n             </CardBody>\n"
                },
                {
                    "date": 1740400968180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,18 @@\n import React, { useState, useEffect } from \"react\";\n import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n import Avatar from \"./Avatar\";\n import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller, useWatch } from \"react-hook-form\";\n+import { useForm, Controller } from \"react-hook-form\";\n \n const Profile = () => {\n     const {\n         control,\n         handleSubmit,\n         setValue,\n         reset,\n         formState: { isSubmitting },\n+        watch, // <- Correção: usei watch em vez de useWatch()\n     } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n@@ -25,12 +26,11 @@\n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Aguarde o controle ser inicializado antes de usar useWatch\n-    const fotoUrl = useWatch({ control, name: \"foto\" }) || \"/assets/images/users/dummy-avatar.jpg\";\n+    // Correção: usar watch corretamente como no SelectFormInput\n+    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n \n-    // Busca os dados do parceiro\n     useEffect(() => {\n         if (typeof window === \"undefined\") return;\n \n         const fetchProfile = async () => {\n@@ -40,9 +40,9 @@\n                     throw new Error(\"Erro ao buscar perfil\");\n                 }\n                 const data = await response.json();\n \n-                console.log(\"Dados carregados:\", data); // Log para depuração\n+                console.log(\"Dados carregados:\", data);\n \n                 reset({\n                     companyName: data?.nome_empresa || \"\",\n                     email: data?.email || \"\",\n@@ -59,9 +59,8 @@\n \n         fetchProfile();\n     }, [reset]);\n \n-    // Função para envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n \n@@ -87,9 +86,8 @@\n             setError(err.message);\n         }\n     };\n \n-    // Exibir carregamento enquanto os dados estão sendo buscados\n     if (loading) {\n         return <div className=\"text-center\">Carregando perfil...</div>;\n     }\n \n"
                },
                {
                    "date": 1740401208889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,165 +1,52 @@\n-\"use client\";\n-import React, { useState, useEffect } from \"react\";\n-import { Col, Row, Card, CardBody, CardHeader, CardTitle, Button } from \"react-bootstrap\";\n-import Avatar from \"./Avatar\";\n-import TextFormInput from \"@/components/from/TextFormInput\";\n-import { useForm, Controller } from \"react-hook-form\";\n+'use client';\n \n-const Profile = () => {\n-    const {\n-        control,\n-        handleSubmit,\n-        setValue,\n-        reset,\n-        formState: { isSubmitting },\n-        watch, // <- Correção: usei watch em vez de useWatch()\n-    } = useForm({\n-        defaultValues: {\n-            companyName: \"\",\n-            email: \"\",\n-            nicho: \"\",\n-            foto: \"\",\n-        },\n-        mode: \"onChange\",\n-    });\n+import { Button, Col, Form, FormCheck, FormControl, FormGroup, FormLabel, FormSelect, InputGroup } from 'react-bootstrap';\n+import ComponentContainerCard from '@/components/ComponentContainerCard';\n \n-    const [loading, setLoading] = useState(true);\n-    const [error, setError] = useState(null);\n-    const [message, setMessage] = useState(null);\n-\n-    // Correção: usar watch corretamente como no SelectFormInput\n-    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n-\n-    useEffect(() => {\n-        if (typeof window === \"undefined\") return;\n-\n-        const fetchProfile = async () => {\n-            try {\n-                const response = await fetch(\"/api/parceiro/perfil\");\n-                if (!response.ok) {\n-                    throw new Error(\"Erro ao buscar perfil\");\n-                }\n-                const data = await response.json();\n-\n-                console.log(\"Dados carregados:\", data);\n-\n-                reset({\n-                    companyName: data?.nome_empresa || \"\",\n-                    email: data?.email || \"\",\n-                    nicho: data?.nicho || \"\",\n-                    foto: data?.foto || \"\",\n-                });\n-\n-                setLoading(false);\n-            } catch (err) {\n-                setError(err.message);\n-                setLoading(false);\n-            }\n-        };\n-\n-        fetchProfile();\n-    }, [reset]);\n-\n-    const onSubmit = async (formData) => {\n-        setMessage(null);\n-        setError(null);\n-\n-        try {\n-            const response = await fetch(\"/api/parceiro/perfil\", {\n-                method: \"PUT\",\n-                headers: { \"Content-Type\": \"application/json\" },\n-                body: JSON.stringify({\n-                    nome_empresa: formData.companyName,\n-                    foto: formData.foto,\n-                    nicho: formData.nicho,\n-                }),\n-            });\n-\n-            const data = await response.json();\n-\n-            if (!response.ok) {\n-                throw new Error(data.error || \"Erro ao atualizar perfil\");\n-            }\n-\n-            setMessage(\"Perfil atualizado com sucesso!\");\n-        } catch (err) {\n-            setError(err.message);\n-        }\n-    };\n-\n-    if (loading) {\n-        return <div className=\"text-center\">Carregando perfil...</div>;\n-    }\n-\n-    return (\n-        <Card>\n-            <CardHeader>\n-                <CardTitle as=\"h5\">Informações do Perfil</CardTitle>\n-            </CardHeader>\n-            <CardBody>\n-                {error && <p className=\"text-danger\">{error}</p>}\n-                {message && <p className=\"text-success\">{message}</p>}\n-\n-                <form onSubmit={handleSubmit(onSubmit)}>\n-                    <Row>\n-                        <Col xs={12}>\n-                            <div className=\"avatar-lg mb-3\">\n-                                <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n-                                    <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                                </div>\n-                            </div>\n-\n-                            <Row>\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"companyName\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"Nome da Empresa\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"email\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"E-mail\" {...field} containerClassName=\"mb-3\" disabled />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"nicho\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"Nicho de Atuação\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n-\n-                                <Col md={6}>\n-                                    <Controller\n-                                        name=\"foto\"\n-                                        control={control}\n-                                        render={({ field }) => (\n-                                            <TextFormInput label=\"URL da Foto\" {...field} containerClassName=\"mb-3\" />\n-                                        )}\n-                                    />\n-                                </Col>\n-                            </Row>\n-\n-                            <Button type=\"submit\" variant=\"primary\" disabled={isSubmitting}>\n-                                {isSubmitting ? \"Salvando...\" : \"Salvar Alterações\"}\n-                            </Button>\n-                        </Col>\n-                    </Row>\n-                </form>\n-            </CardBody>\n-        </Card>\n-    );\n-};\n-\n+const BrowserDefault = () => {\n+    return <ComponentContainerCard id=\"browser-defaults\" title=\"Browser Default\" description={<>Depending on your browser and OS, you’ll see a slightly different style of feedback.</>}>\n+        <form className=\"row g-3\">\n+          <Col md={4}>\n+            <FormLabel htmlFor=\"validationDefault01\">First name</FormLabel>\n+            <FormControl type=\"text\" id=\"validationDefault01\" defaultValue=\"Mark\" required />\n+          </Col>\n+          <Col md={4}>\n+            <FormLabel htmlFor=\"validationDefault02\">Last name</FormLabel>\n+            <FormControl type=\"text\" id=\"validationDefault02\" defaultValue=\"Otto\" required />\n+          </Col>\n+          <Col md={4}>\n+            <FormLabel htmlFor=\"validationDefaultUsername\">Username</FormLabel>\n+            <div className=\"input-group\">\n+              <span className=\"input-group-text\" id=\"inputGroupPrepend2\">\n+                @\n+              </span>\n+              <FormControl type=\"text\" id=\"validationDefaultUsername\" aria-describedby=\"inputGroupPrepend2\" required />\n+            </div>\n+          </Col>\n+          <Col md={6}>\n+            <FormLabel htmlFor=\"validationDefault03\">City</FormLabel>\n+            <FormControl type=\"text\" id=\"validationDefault03\" required />\n+          </Col>\n+          <Col md={3}>\n+            <FormLabel htmlFor=\"validationDefault04\">State</FormLabel>\n+            <FormSelect id=\"validationDefault04\" required>\n+              <option disabled>Choose...</option>\n+              <option>...</option>\n+            </FormSelect>\n+          </Col>\n+          <Col md={3}>\n+            <FormLabel htmlFor=\"validationDefault05\">Zip</FormLabel>\n+            <FormControl type=\"text\" id=\"validationDefault05\" required />\n+          </Col>\n+          <Col xs={12}>\n+            <FormCheck label=\"Agree to terms and conditions\" id=\"term1\" required />\n+          </Col>\n+          <Col xs={12}>\n+            <Button variant=\"primary\" type=\"submit\">\n+              Submit form\n+            </Button>\n+          </Col>\n+        </form>\n+      </ComponentContainerCard>;\n+  };\n export default Profile;\n"
                },
                {
                    "date": 1740401217635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,5 +48,5 @@\n           </Col>\n         </form>\n       </ComponentContainerCard>;\n   };\n-export default Profile;\n+export default BrowserDefault;\n"
                },
                {
                    "date": 1740401513264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,167 @@\n-'use client';\n+\"use client\";\n \n-import { Button, Col, Form, FormCheck, FormControl, FormGroup, FormLabel, FormSelect, InputGroup } from 'react-bootstrap';\n-import ComponentContainerCard from '@/components/ComponentContainerCard';\n+import React, { useState, useEffect, useCallback } from \"react\";\n+import { Button, Col, Form, FormControl, FormGroup, FormLabel, FormSelect } from \"react-bootstrap\";\n+import { useForm, Controller } from \"react-hook-form\";\n+import { useDropzone } from \"react-dropzone\";\n+import ComponentContainerCard from \"@/components/ComponentContainerCard\";\n+import Avatar from \"@/components/Avatar\";\n \n const BrowserDefault = () => {\n-    return <ComponentContainerCard id=\"browser-defaults\" title=\"Browser Default\" description={<>Depending on your browser and OS, you’ll see a slightly different style of feedback.</>}>\n-        <form className=\"row g-3\">\n-          <Col md={4}>\n-            <FormLabel htmlFor=\"validationDefault01\">First name</FormLabel>\n-            <FormControl type=\"text\" id=\"validationDefault01\" defaultValue=\"Mark\" required />\n-          </Col>\n-          <Col md={4}>\n-            <FormLabel htmlFor=\"validationDefault02\">Last name</FormLabel>\n-            <FormControl type=\"text\" id=\"validationDefault02\" defaultValue=\"Otto\" required />\n-          </Col>\n-          <Col md={4}>\n-            <FormLabel htmlFor=\"validationDefaultUsername\">Username</FormLabel>\n-            <div className=\"input-group\">\n-              <span className=\"input-group-text\" id=\"inputGroupPrepend2\">\n-                @\n-              </span>\n-              <FormControl type=\"text\" id=\"validationDefaultUsername\" aria-describedby=\"inputGroupPrepend2\" required />\n-            </div>\n-          </Col>\n-          <Col md={6}>\n-            <FormLabel htmlFor=\"validationDefault03\">City</FormLabel>\n-            <FormControl type=\"text\" id=\"validationDefault03\" required />\n-          </Col>\n-          <Col md={3}>\n-            <FormLabel htmlFor=\"validationDefault04\">State</FormLabel>\n-            <FormSelect id=\"validationDefault04\" required>\n-              <option disabled>Choose...</option>\n-              <option>...</option>\n-            </FormSelect>\n-          </Col>\n-          <Col md={3}>\n-            <FormLabel htmlFor=\"validationDefault05\">Zip</FormLabel>\n-            <FormControl type=\"text\" id=\"validationDefault05\" required />\n-          </Col>\n-          <Col xs={12}>\n-            <FormCheck label=\"Agree to terms and conditions\" id=\"term1\" required />\n-          </Col>\n-          <Col xs={12}>\n-            <Button variant=\"primary\" type=\"submit\">\n-              Submit form\n-            </Button>\n-          </Col>\n-        </form>\n-      </ComponentContainerCard>;\n-  };\n+    const { control, handleSubmit, setValue, watch } = useForm({\n+        defaultValues: {\n+            companyName: \"\",\n+            email: \"\",\n+            nicho: \"\",\n+            foto: \"\",\n+        },\n+    });\n+\n+    const [loading, setLoading] = useState(true);\n+    const [error, setError] = useState(null);\n+    const [message, setMessage] = useState(null);\n+\n+    // Foto observada para exibição do avatar\n+    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n+\n+    // Buscar os dados do parceiro ao carregar a página\n+    useEffect(() => {\n+        const fetchProfile = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/perfil\");\n+                if (!response.ok) {\n+                    throw new Error(\"Erro ao buscar perfil\");\n+                }\n+                const data = await response.json();\n+\n+                setValue(\"companyName\", data.nome_empresa || \"\");\n+                setValue(\"email\", data.email || \"\");\n+                setValue(\"nicho\", data.nicho || \"\");\n+                setValue(\"foto\", data.foto || \"\");\n+\n+                setLoading(false);\n+            } catch (err) {\n+                setError(err.message);\n+                setLoading(false);\n+            }\n+        };\n+\n+        fetchProfile();\n+    }, [setValue]);\n+\n+    // Função de upload de imagem usando react-dropzone\n+    const onDrop = useCallback((acceptedFiles) => {\n+        const file = acceptedFiles[0];\n+        if (file) {\n+            const reader = new FileReader();\n+            reader.onloadend = () => {\n+                setValue(\"foto\", reader.result);\n+            };\n+            reader.readAsDataURL(file);\n+        }\n+    }, [setValue]);\n+\n+    const { getRootProps, getInputProps } = useDropzone({\n+        onDrop,\n+        accept: \"image/*\",\n+        multiple: false,\n+    });\n+\n+    // Função de envio do formulário\n+    const onSubmit = async (formData) => {\n+        setMessage(null);\n+        setError(null);\n+\n+        try {\n+            const response = await fetch(\"/api/parceiro/perfil\", {\n+                method: \"PUT\",\n+                headers: { \"Content-Type\": \"application/json\" },\n+                body: JSON.stringify({\n+                    nome_empresa: formData.companyName,\n+                    foto: formData.foto,\n+                    nicho: formData.nicho,\n+                }),\n+            });\n+\n+            const data = await response.json();\n+\n+            if (!response.ok) {\n+                throw new Error(data.error || \"Erro ao atualizar perfil\");\n+            }\n+\n+            setMessage(\"Perfil atualizado com sucesso!\");\n+        } catch (err) {\n+            setError(err.message);\n+        }\n+    };\n+\n+    if (loading) {\n+        return <div className=\"text-center\">Carregando perfil...</div>;\n+    }\n+\n+    return (\n+        <ComponentContainerCard id=\"browser-defaults\" title=\"Perfil do Parceiro\" description=\"Atualize suas informações de perfil.\">\n+            {error && <p className=\"text-danger\">{error}</p>}\n+            {message && <p className=\"text-success\">{message}</p>}\n+\n+            <form onSubmit={handleSubmit(onSubmit)} className=\"row g-3\">\n+                {/* Avatar com opção de upload */}\n+                <Col xs={12} className=\"text-center\">\n+                    <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n+                        <input {...getInputProps()} />\n+                        <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n+                        <p>Clique para alterar a foto</p>\n+                    </div>\n+                </Col>\n+\n+                {/* Nome da Empresa */}\n+                <Col md={6}>\n+                    <FormGroup>\n+                        <FormLabel>Nome da Empresa</FormLabel>\n+                        <Controller\n+                            name=\"companyName\"\n+                            control={control}\n+                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n+                        />\n+                    </FormGroup>\n+                </Col>\n+\n+                {/* E-mail (Somente Leitura) */}\n+                <Col md={6}>\n+                    <FormGroup>\n+                        <FormLabel>E-mail</FormLabel>\n+                        <Controller\n+                            name=\"email\"\n+                            control={control}\n+                            render={({ field }) => <FormControl type=\"email\" {...field} disabled />}\n+                        />\n+                    </FormGroup>\n+                </Col>\n+\n+                {/* Nicho */}\n+                <Col md={6}>\n+                    <FormGroup>\n+                        <FormLabel>Nicho de Atuação</FormLabel>\n+                        <Controller\n+                            name=\"nicho\"\n+                            control={control}\n+                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n+                        />\n+                    </FormGroup>\n+                </Col>\n+\n+                {/* Campo Oculto da Foto */}\n+                <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\n+\n+                {/* Botão de envio */}\n+                <Col xs={12}>\n+                    <Button variant=\"primary\" type=\"submit\">\n+                        Salvar Alterações\n+                    </Button>\n+                </Col>\n+            </form>\n+        </ComponentContainerCard>\n+    );\n+};\n+\n export default BrowserDefault;\n"
                },
                {
                    "date": 1740401572075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Button, Col, Form, FormControl, FormGroup, FormLabel, FormSelect } from \"react-bootstrap\";\n import { useForm, Controller } from \"react-hook-form\";\n import { useDropzone } from \"react-dropzone\";\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\n-import Avatar from \"@/components/Avatar\";\n+import Avatar from \"@/Avatar\";\n \n const BrowserDefault = () => {\n     const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n"
                },
                {
                    "date": 1740401591041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Button, Col, Form, FormControl, FormGroup, FormLabel, FormSelect } from \"react-bootstrap\";\n import { useForm, Controller } from \"react-hook-form\";\n import { useDropzone } from \"react-dropzone\";\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\n-import Avatar from \"@/Avatar\";\n+import Avatar from \"./Avatar\n \n const BrowserDefault = () => {\n     const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n"
                },
                {
                    "date": 1740401644162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Button, Col, Form, FormControl, FormGroup, FormLabel, FormSelect } from \"react-bootstrap\";\n import { useForm, Controller } from \"react-hook-form\";\n import { useDropzone } from \"react-dropzone\";\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\n-import Avatar from \"./Avatar\n+import Avatar from \"./Avatar\"\n \n const BrowserDefault = () => {\n     const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n@@ -109,9 +109,9 @@\n                 <Col xs={12} className=\"text-center\">\n                     <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n                         <input {...getInputProps()} />\n                         <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                        <p>Clique para alterar a foto</p>\n+                        <p className=\"text-start\">Clique para alterar a foto</p>\n                     </div>\n                 </Col>\n \n                 {/* Nome da Empresa */}\n"
                },
                {
                    "date": 1740401649468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n                 <Col xs={12} className=\"text-center\">\n                     <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n                         <input {...getInputProps()} />\n                         <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                        <p className=\"text-start\">Clique para alterar a foto</p>\n+                        <p className=\"text-\">Clique para alterar a foto</p>\n                     </div>\n                 </Col>\n \n                 {/* Nome da Empresa */}\n"
                },
                {
                    "date": 1740401660650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,8 @@\n                 <Col xs={12} className=\"text-center\">\n                     <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n                         <input {...getInputProps()} />\n                         <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n-                        <p className=\"text-\">Clique para alterar a foto</p>\n                     </div>\n                 </Col>\n \n                 {/* Nome da Empresa */}\n"
                },
                {
                    "date": 1740401696105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,19 @@\n                             render={({ field }) => <FormControl type=\"text\" {...field} required />}\n                         />\n                     </FormGroup>\n                 </Col>\n+                {/* Nicho */}\n+                <Col md={6}>\n+                    <FormGroup>\n+                        <FormLabel>Nicho de Atuação</FormLabel>\n+                        <Controller\n+                            name=\"nicho\"\n+                            control={control}\n+                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n+                        />\n+                    </FormGroup>\n+                </Col>\n \n                 {/* Campo Oculto da Foto */}\n                 <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\n \n"
                },
                {
                    "date": 1740401703967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n                 </Col>\n                 {/* Nicho */}\n                 <Col md={6}>\n                     <FormGroup>\n-                        <FormLabel>Nicho de Atuação</FormLabel>\n+                        <FormLabel>Desconto</FormLabel>\n                         <Controller\n                             name=\"nicho\"\n                             control={control}\n                             render={({ field }) => <FormControl type=\"text\" {...field} required />}\n"
                },
                {
                    "date": 1740401722975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>Desconto</FormLabel>\n                         <Controller\n-                            name=\"nicho\"\n+                            name=\"desconto\"\n                             control={control}\n                             render={({ field }) => <FormControl type=\"text\" {...field} required />}\n                         />\n                     </FormGroup>\n"
                },
                {
                    "date": 1740401750007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n                             render={({ field }) => <FormControl type=\"text\" {...field} required />}\n                         />\n                     </FormGroup>\n                 </Col>\n-                {/* Nicho */}\n+                {/* Desconto */}\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>Desconto</FormLabel>\n                         <Controller\n"
                },
                {
                    "date": 1740401782244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n             foto: \"\",\n+            desconto: \"\",\n         },\n     });\n \n     const [loading, setLoading] = useState(true);\n@@ -37,8 +38,9 @@\n                 setValue(\"companyName\", data.nome_empresa || \"\");\n                 setValue(\"email\", data.email || \"\");\n                 setValue(\"nicho\", data.nicho || \"\");\n                 setValue(\"foto\", data.foto || \"\");\n+                setValue(\"desconto\", data.desconto || \"\");\n \n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n"
                },
                {
                    "date": 1740401792205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n                 body: JSON.stringify({\n                     nome_empresa: formData.companyName,\n                     foto: formData.foto,\n                     nicho: formData.nicho,\n+                    desconto: formData.desconto,\n                 }),\n             });\n \n             const data = await response.json();\n"
                },
                {
                    "date": 1740401948503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n                         <FormLabel>Desconto</FormLabel>\n                         <Controller\n                             name=\"desconto\"\n                             control={control}\n-                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n+                            render={({ field }) => <FormControl type=\"text\" {...field} disabled />}\n                         />\n                     </FormGroup>\n                 </Col>\n \n"
                },
                {
                    "date": 1740402120575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,67 @@\n \"use client\";\n \n import React, { useState, useEffect, useCallback } from \"react\";\n-import { Button, Col, Form, FormControl, FormGroup, FormLabel, FormSelect } from \"react-bootstrap\";\n+import { Button, Col, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\n import { useForm, Controller } from \"react-hook-form\";\n import { useDropzone } from \"react-dropzone\";\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\n-import Avatar from \"./Avatar\"\n+import Avatar from \"./Avatar\";\n \n const BrowserDefault = () => {\n     const { control, handleSubmit, setValue, watch } = useForm({\n         defaultValues: {\n             companyName: \"\",\n             email: \"\",\n             nicho: \"\",\n             foto: \"\",\n-            desconto: \"\",\n+            desconto: \"Carregando...\", // Inicializa com \"Carregando...\"\n         },\n     });\n \n     const [loading, setLoading] = useState(true);\n     const [error, setError] = useState(null);\n     const [message, setMessage] = useState(null);\n \n-    // Foto observada para exibição do avatar\n     const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\n \n-    // Buscar os dados do parceiro ao carregar a página\n     useEffect(() => {\n+        // Buscar dados do perfil do parceiro\n         const fetchProfile = async () => {\n             try {\n                 const response = await fetch(\"/api/parceiro/perfil\");\n-                if (!response.ok) {\n-                    throw new Error(\"Erro ao buscar perfil\");\n-                }\n+                if (!response.ok) throw new Error(\"Erro ao buscar perfil\");\n+                \n                 const data = await response.json();\n-\n                 setValue(\"companyName\", data.nome_empresa || \"\");\n                 setValue(\"email\", data.email || \"\");\n                 setValue(\"nicho\", data.nicho || \"\");\n                 setValue(\"foto\", data.foto || \"\");\n-                setValue(\"desconto\", data.desconto || \"\");\n-\n+                \n                 setLoading(false);\n             } catch (err) {\n                 setError(err.message);\n                 setLoading(false);\n             }\n         };\n \n+        // Buscar desconto do parceiro separadamente\n+        const fetchDiscount = async () => {\n+            try {\n+                const response = await fetch(\"/api/parceiro/vouchers\");\n+                if (!response.ok) throw new Error(\"Erro ao buscar desconto\");\n+\n+                const data = await response.json();\n+                setValue(\"desconto\", data.desconto || \"Nenhum desconto disponível\");\n+            } catch (err) {\n+                setValue(\"desconto\", \"Nenhum desconto disponível\");\n+            }\n+        };\n+\n         fetchProfile();\n+        fetchDiscount();\n     }, [setValue]);\n \n-    // Função de upload de imagem usando react-dropzone\n     const onDrop = useCallback((acceptedFiles) => {\n         const file = acceptedFiles[0];\n         if (file) {\n             const reader = new FileReader();\n@@ -68,9 +77,8 @@\n         accept: \"image/*\",\n         multiple: false,\n     });\n \n-    // Função de envio do formulário\n     const onSubmit = async (formData) => {\n         setMessage(null);\n         setError(null);\n \n@@ -81,18 +89,14 @@\n                 body: JSON.stringify({\n                     nome_empresa: formData.companyName,\n                     foto: formData.foto,\n                     nicho: formData.nicho,\n-                    desconto: formData.desconto,\n                 }),\n             });\n \n             const data = await response.json();\n+            if (!response.ok) throw new Error(data.error || \"Erro ao atualizar perfil\");\n \n-            if (!response.ok) {\n-                throw new Error(data.error || \"Erro ao atualizar perfil\");\n-            }\n-\n             setMessage(\"Perfil atualizado com sucesso!\");\n         } catch (err) {\n             setError(err.message);\n         }\n@@ -107,71 +111,45 @@\n             {error && <p className=\"text-danger\">{error}</p>}\n             {message && <p className=\"text-success\">{message}</p>}\n \n             <form onSubmit={handleSubmit(onSubmit)} className=\"row g-3\">\n-                {/* Avatar com opção de upload */}\n                 <Col xs={12} className=\"text-center\">\n                     <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\n                         <input {...getInputProps()} />\n                         <Avatar src={fotoUrl} alt=\"Foto do Parceiro\" />\n                     </div>\n                 </Col>\n \n-                {/* Nome da Empresa */}\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>Nome da Empresa</FormLabel>\n-                        <Controller\n-                            name=\"companyName\"\n-                            control={control}\n-                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n-                        />\n+                        <Controller name=\"companyName\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\n                     </FormGroup>\n                 </Col>\n \n-                {/* E-mail (Somente Leitura) */}\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>E-mail</FormLabel>\n-                        <Controller\n-                            name=\"email\"\n-                            control={control}\n-                            render={({ field }) => <FormControl type=\"email\" {...field} disabled />}\n-                        />\n+                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} disabled />} />\n                     </FormGroup>\n                 </Col>\n \n-                {/* Nicho */}\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>Nicho de Atuação</FormLabel>\n-                        <Controller\n-                            name=\"nicho\"\n-                            control={control}\n-                            render={({ field }) => <FormControl type=\"text\" {...field} required />}\n-                        />\n+                        <Controller name=\"nicho\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\n                     </FormGroup>\n                 </Col>\n-                {/* Desconto */}\n+\n                 <Col md={6}>\n                     <FormGroup>\n                         <FormLabel>Desconto</FormLabel>\n-                        <Controller\n-                            name=\"desconto\"\n-                            control={control}\n-                            render={({ field }) => <FormControl type=\"text\" {...field} disabled />}\n-                        />\n+                        <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} disabled />} />\n                     </FormGroup>\n                 </Col>\n \n-                {/* Campo Oculto da Foto */}\n-                <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\n-\n-                {/* Botão de envio */}\n                 <Col xs={12}>\n-                    <Button variant=\"primary\" type=\"submit\">\n-                        Salvar Alterações\n-                    </Button>\n+                    <Button variant=\"primary\" type=\"submit\">Salvar Alterações</Button>\n                 </Col>\n             </form>\n         </ComponentContainerCard>\n     );\n"
                },
                {
                    "date": 1740402222977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n         // Buscar desconto do parceiro separadamente\n         const fetchDiscount = async () => {\n             try {\n-                const response = await fetch(\"/api/parceiro/vouchers\");\n+                const response = await fetch(\"/api/parceiro/voucher\");\n                 if (!response.ok) throw new Error(\"Erro ao buscar desconto\");\n \n                 const data = await response.json();\n                 setValue(\"desconto\", data.desconto || \"Nenhum desconto disponível\");\n"
                },
                {
                    "date": 1740402520842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,12 +140,25 @@\n                     </FormGroup>\n                 </Col>\n \n                 <Col md={6}>\n-                    <FormGroup>\n-                        <FormLabel>Desconto</FormLabel>\n-                        <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} disabled />} />\n-                    </FormGroup>\n+                <FormGroup>\n+        <FormLabel>Desconto</FormLabel>\n+        <Controller\n+            name=\"desconto\"\n+            control={control}\n+            render={({ field }) => (\n+                <FormControl\n+                    type=\"text\"\n+                    {...field}\n+                    value={isNaN(field.value) || field.value === \"Nenhum desconto disponível\" \n+                        ? field.value \n+                        : `${field.value}%`}\n+                    disabled\n+                />\n+            )}\n+        />\n+    </FormGroup>\n                 </Col>\n \n                 <Col xs={12}>\n                     <Button variant=\"primary\" type=\"submit\">Salvar Alterações</Button>\n"
                },
                {
                    "date": 1740402930928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,9 @@\n                 method: \"PUT\",\n                 headers: { \"Content-Type\": \"application/json\" },\n                 body: JSON.stringify({\n                     nome_empresa: formData.companyName,\n+                    email: formData.email,\n                     foto: formData.foto,\n                     nicho: formData.nicho,\n                 }),\n             });\n"
                }
            ],
            "date": 1740049269100,
            "name": "Commit-0",
            "content": "'use client';\n\nimport avatar1 from '@/assets/images/users/dummy-avatar.jpg';\nimport IconifyIcon from '@/components/wrappers/IconifyIcon';\nimport { useForm } from 'react-hook-form';\nimport { Col, Row, Card, CardBody, CardHeader, CardTitle } from 'react-bootstrap';\nimport Image from 'next/image';\nimport TextFormInput from '@/components/from/TextFormInput';\nimport SelectFormInput from '@/components/from/SelectFormInput';\n\nconst ProfilePage = () => {\n    const { control } = useForm();\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle as={'h5'} className=\"anchor\" id=\"basic-wizard\">\n                    Informações do Perfil\n                </CardTitle>\n            </CardHeader>\n            <CardBody>\n                <Row>\n                    <Col xs={12}>\n                        <div className=\"avatar-lg mb-3\">\n                            <div className=\"avatar-title bg-body rounded-circle border border-3 border-dashed-light position-relative\">\n                                <label htmlFor=\"imageInput\" className=\"position-absolute end-0 bottom-0\">\n                                    <div className=\"avatar-xs cursor-pointer\">\n                                        <span className=\"avatar-title bg-light text-dark rounded-circle\">\n                                            <IconifyIcon icon=\"bx:camera\" />\n                                        </span>\n                                    </div>\n                                </label>\n                                <input className=\"hidden\" type=\"file\" id=\"imageInput\" accept=\"image/*\" />\n                                <Image id=\"preview\" src={avatar1} alt=\"Preview Image\" className=\"rounded-circle img-fluid\" />\n                            </div>\n                        </div>\n                        <Row>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"companyName\"\n                                    label=\"Nome da Empresa\"\n                                    placeholder=\"Digite o nome da empresa\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"voucherCode\"\n                                    label=\"Código do Voucher\"\n                                    placeholder=\"Digite o código do voucher\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"discount\"\n                                    label=\"Desconto (%)\"\n                                    placeholder=\"Digite o valor do desconto\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                    disabled // Desabilitado para edição\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"fName\"\n                                    label=\"First Name\"\n                                    placeholder=\"Digite seu primeiro nome\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"lName\"\n                                    label=\"Last Name\"\n                                    placeholder=\"Digite seu último nome\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <TextFormInput\n                                    name=\"number\"\n                                    label=\"Number\"\n                                    placeholder=\"Digite seu número de telefone\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <SelectFormInput\n                                    name=\"country\"\n                                    label=\"Country\"\n                                    containerClassName=\"mb-3\"\n                                    control={control}\n                                    options={[\n                                        // ... (lista de países)\n                                    ]}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport default ProfilePage;"
        }
    ]
}