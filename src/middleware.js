import { NextResponse } from 'next/server';
import { getToken } from 'next-auth/jwt';

export async function middleware(req) {
  const { nextUrl } = req;
  const path = nextUrl.pathname;
  const hostname = req.headers.get('host') || '';
  const session = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });

  // ==========================================
  // 1. DETEC√á√ÉO DE TENANT (SUBDOM√çNIO)
  // ==========================================
  let tenantInfo = null;
  
  // Verifica se √© subdom√≠nio (empresa.parceirize.com)
  const subdomain = hostname.split('.')[0];
  const isSubdomain = hostname.includes('.') && 
                      subdomain !== 'www' && 
                      subdomain !== 'parceirize' &&
                      subdomain !== 'localhost';

  if (isSubdomain) {
    tenantInfo = {
      subdomain,
      isTenant: true
    };
  }

  // ==========================================
  // 2. ROTAS P√öBLICAS (SEM AUTENTICA√á√ÉO)
  // ==========================================
  const publicPaths = [
    '/not-authorized',
    '/auth/',
    '/_next/',
    '/api/auth/',
    '/favicon.ico'
  ];
  
  const isPublicPath = publicPaths.some(publicPath => path.startsWith(publicPath));
  if (isPublicPath) {
    const response = NextResponse.next();
    
    // Adiciona tenant info nos headers se for subdom√≠nio
    if (tenantInfo?.isTenant) {
      response.headers.set('x-tenant-subdomain', tenantInfo.subdomain);
    }
    
    return response;
  }

  // ==========================================
  // 3. VERIFICA√á√ÉO DE AUTENTICA√á√ÉO
  // ==========================================
  if (!session) {
    console.log(`üîí Sem sess√£o para ${path}, redirecionando para login`);
    return NextResponse.redirect(new URL('/auth/login', nextUrl.origin));
  }

  const role = session.user.role?.toLowerCase();
  const tenantId = session.user.tenant_id;
  console.log(`üé≠ Middleware - Path: ${path}, Role: ${role}, TenantId: ${tenantId}`);

  // ==========================================
  // 4. VALIDA√á√ÉO DE TENANT PARA SUBDOM√çNIO
  // ==========================================
  if (tenantInfo?.isTenant) {
    // Se acessando via subdom√≠nio, deve ter tenant_id na sess√£o
    if (!tenantId) {
      return NextResponse.redirect(new URL('/not-authorized', nextUrl.origin));
    }
    
    // TODO: Validar se o tenant_id corresponde ao subdom√≠nio
    // (implementar consulta ao banco se necess√°rio)
  }

  // ==========================================
  // 5. REDIRECIONAMENTOS POR ROLE
  // ==========================================
  if (path === '/') {
    switch (role) {
      case 'superadmin':
        return NextResponse.redirect(new URL('/superadmin/dashboard', nextUrl.origin));
      case 'provedor':
        return NextResponse.redirect(new URL('/dashboard', nextUrl.origin));
      case 'cliente':
        return NextResponse.redirect(new URL('/carteirinha', nextUrl.origin));
      case 'parceiro':
        return NextResponse.redirect(new URL('/painel', nextUrl.origin));
      default:
        return NextResponse.redirect(new URL('/auth/login', nextUrl.origin));
    }
  }

  // ==========================================
  // 6. PROTE√á√ÉO DE ROTAS POR ROLE
  // ==========================================
  
  // Superadmin - acesso total
  if (path.startsWith('/superadmin') && role !== 'superadmin') {
    return NextResponse.redirect(new URL('/not-authorized', nextUrl.origin));
  }

  // Provedor - acesso √†s rotas de gest√£o 
  // Rotas dentro do grupo (administrador) s√£o acessadas diretamente
  const provedorRoutes = ['/dashboard', '/admin-cliente', '/admin-parceiro', '/admin-relatorios', '/integracoes', '/importar-clientes', '/admin-configuracoes'];
  const isProvedorRoute = provedorRoutes.some(route => path.startsWith(route));
  
  console.log(`üõ°Ô∏è  Verificando rota provedor: ${path} -> isProvedorRoute: ${isProvedorRoute}, role: "${role}"`);
  console.log(`üîç Tipo da role: ${typeof role}, Includes test: ${['superadmin', 'provedor'].includes(role)}`);
  console.log(`üîç Roles permitidas: ['superadmin', 'provedor']`);
  
  if (isProvedorRoute && !['superadmin', 'provedor'].includes(role)) {
    console.log(`‚ùå ACESSO NEGADO para role "${role}" na rota provedor ${path}`);
    return NextResponse.redirect(new URL('/not-authorized', nextUrl.origin));
  } else if (isProvedorRoute) {
    console.log(`‚úÖ ACESSO PERMITIDO para role "${role}" na rota provedor ${path}`);
  }

  // Clientes - acesso √†s suas rotas espec√≠ficas  
  if (path.startsWith('/carteirinha') && role !== 'cliente') {
    return NextResponse.redirect(new URL('/not-authorized', nextUrl.origin));
  }

  // Parceiros - acesso √†s suas rotas espec√≠ficas
  if (path.startsWith('/painel') && role !== 'parceiro') {
    return NextResponse.redirect(new URL('/not-authorized', nextUrl.origin));
  }

  // ==========================================
  // 7. ADICIONAR TENANT INFO AOS HEADERS
  // ==========================================
  console.log(`‚úÖ Middleware passou todas as verifica√ß√µes para ${path} com role ${role}`);
  
  const response = NextResponse.next();
  
  if (tenantInfo?.isTenant) {
    response.headers.set('x-tenant-subdomain', tenantInfo.subdomain);
  }
  
  if (tenantId) {
    response.headers.set('x-tenant-id', tenantId);
  }
  
  response.headers.set('x-user-role', role);
  
  return response;
}

export const config = {
  matcher: [
    '/',                         // Redirecionamento inteligente da home
    '/dashboard',                // Dashboard do provedor (p√°gina principal)
    '/dashboard/:path*',         // Dashboard do provedor (subp√°ginas)
    '/admin-cliente',            // Gest√£o de clientes (p√°gina principal)
    '/admin-cliente/:path*',     // Gest√£o de clientes (subp√°ginas)
    '/admin-parceiro',           // Gest√£o de parceiros (p√°gina principal)
    '/admin-parceiro/:path*',    // Gest√£o de parceiros (subp√°ginas)
    '/admin-relatorios',         // Relat√≥rios (p√°gina principal)
    '/admin-relatorios/:path*',  // Relat√≥rios (subp√°ginas)
    '/integracoes',              // Integra√ß√µes (p√°gina principal)
    '/integracoes/:path*',       // Integra√ß√µes (subp√°ginas)
    '/importar-clientes',        // Importa√ß√£o (p√°gina principal)
    '/importar-clientes/:path*', // Importa√ß√£o (subp√°ginas)
    '/admin-configuracoes',      // Configura√ß√µes (p√°gina principal)
    '/admin-configuracoes/:path*', // Configura√ß√µes (subp√°ginas)
    '/superadmin/:path*',        // Protege rotas do superadmin
    '/carteirinha/:path*',       // Protege rotas de clientes
    '/painel/:path*',            // Protege rotas de parceiros
    '/api/:path*',               // Adiciona tenant info nas APIs
  ],
};

