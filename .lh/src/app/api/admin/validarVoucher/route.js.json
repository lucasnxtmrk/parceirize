{
    "sourceFile": "src/app/api/admin/validarVoucher/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741290442121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741290442121,
            "name": "Commit-0",
            "content": "import { Pool } from \"pg\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n    \r\n    console.log(\"üîç Sess√£o recebida:\", session);\r\n\r\n    if (!session) {\r\n      console.log(\"‚ùå Nenhuma sess√£o encontrada.\");\r\n      return new Response(JSON.stringify({ error: \"Acesso negado - Usu√°rio n√£o autenticado\" }), { status: 403 });\r\n    }\r\n\r\n    if (session.user.role !== \"admin\") {\r\n      console.log(\"‚ùå Acesso negado - Apenas admins podem validar vouchers.\");\r\n      return new Response(JSON.stringify({ error: \"Acesso negado - Apenas admins podem validar vouchers\" }), { status: 403 });\r\n    }\r\n\r\n    const { clientId, couponCode } = await req.json();\r\n    console.log(`üì° [ADMIN] Validando voucher ${couponCode} para cliente ${clientId}...`);\r\n\r\n    // 1Ô∏è‚É£ Verificar se o cliente existe\r\n    const clienteQuery = `SELECT id, data_ultimo_voucher FROM clientes WHERE id_carteirinha = $1`;\r\n    const clienteResult = await pool.query(clienteQuery, [clientId]);\r\n\r\n    if (clienteResult.rows.length === 0) {\r\n      console.log(\"‚ùå Cliente n√£o encontrado.\");\r\n      return new Response(JSON.stringify({ error: \"Cliente n√£o encontrado.\" }), { status: 404 });\r\n    }\r\n\r\n    const cliente = clienteResult.rows[0];\r\n\r\n    // 2Ô∏è‚É£ Verificar se o voucher existe\r\n    const voucherQuery = `\r\n      SELECT v.id AS voucher_id, v.desconto, v.data_criacao, v.limite_uso, v.parceiro_id, p.nome_empresa AS parceiro\r\n      FROM vouchers v\r\n      INNER JOIN parceiros p ON v.parceiro_id = p.id\r\n      WHERE v.codigo = $1\r\n    `;\r\n    const voucherResult = await pool.query(voucherQuery, [couponCode]);\r\n\r\n    if (voucherResult.rows.length === 0) {\r\n      console.log(\"‚ùå Voucher inv√°lido ou inexistente.\");\r\n      return new Response(JSON.stringify({ error: \"Voucher inv√°lido ou inexistente.\" }), { status: 404 });\r\n    }\r\n\r\n    const voucher = voucherResult.rows[0];\r\n\r\n    console.log(`‚úÖ Voucher encontrado! Pertence ao parceiro: ${voucher.parceiro}`);\r\n\r\n    // 3Ô∏è‚É£ Verificar se o cliente j√° utilizou este voucher nos √∫ltimos 30 dias (se houver limite)\r\n    if (voucher.limite_uso !== null) {\r\n      const usoQuery = `\r\n        SELECT COUNT(*) AS total_uso\r\n        FROM voucher_utilizados\r\n        WHERE cliente_id = $1 AND voucher_id = $2 AND data_utilizacao >= NOW() - INTERVAL '30 days'\r\n      `;\r\n      const usoResult = await pool.query(usoQuery, [cliente.id, voucher.voucher_id]);\r\n      const totalUsos = parseInt(usoResult.rows[0].total_uso, 10);\r\n\r\n      console.log(`üéØ O cliente j√° utilizou este voucher ${totalUsos} vezes. Limite: ${voucher.limite_uso}`);\r\n\r\n      if (totalUsos >= voucher.limite_uso) {\r\n        return new Response(JSON.stringify({ error: \"Limite de uso do voucher atingido nos √∫ltimos 30 dias.\" }), { status: 403 });\r\n      }\r\n    }\r\n\r\n    // 4Ô∏è‚É£ Registrar o uso do voucher\r\n    const registrarUsoQuery = `\r\n      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao, desconto)\r\n      VALUES ($1, $2, NOW(), $3)\r\n    `;\r\n    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.desconto]);\r\n\r\n    // 5Ô∏è‚É£ Atualizar a data do √∫ltimo uso do cliente\r\n    const atualizarClienteQuery = `\r\n      UPDATE clientes SET data_ultimo_voucher = NOW() WHERE id = $1\r\n    `;\r\n    await pool.query(atualizarClienteQuery, [cliente.id]);\r\n\r\n    console.log(`‚úÖ [ADMIN] Voucher ${couponCode} validado com sucesso para cliente ${clientId}`);\r\n\r\n    return new Response(JSON.stringify({ success: true, message: \"Voucher validado com sucesso!\" }), { status: 200 });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro na valida√ß√£o do voucher:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro interno ao validar voucher.\" }), { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}