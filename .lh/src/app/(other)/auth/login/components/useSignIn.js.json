{
    "sourceFile": "src/app/(other)/auth/login/components/useSignIn.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1740055910363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740056053785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,42 +7,56 @@\n import * as yup from 'yup';\n import { yupResolver } from '@hookform/resolvers/yup';\n import { useNotificationContext } from '@/context/useNotificationContext';\n import useQueryParams from '@/hooks/useQueryParams';\n-\n const useSignIn = () => {\n-    const [loading, setLoading] = useState(false);\n-    const { push } = useRouter();\n-    const { showNotification } = useNotificationContext();\n-    const queryParams = useQueryParams(); // Se você precisa de query params para outros fins\n-    // ... (seu schema yup)\n-\n-    const login = handleSubmit(async (values) => {\n-        setLoading(true);\n-\n-        const callbackUrl = queryParams['redirectTo'] ?? '/'; // Página padrão se não houver redirectTo\n-\n-        signIn('credentials', {\n-            redirect: false, // Não redirecione automaticamente\n-            email: values?.email,\n-            password: values?.password,\n-            callbackUrl: callbackUrl // Passe o callbackUrl para o NextAuth\n-        }).then(res => {\n-            if (res?.ok) {\n-                // Não precisa redirecionar aqui. O NextAuth cuidará disso.\n-                showNotification({\n-                    message: 'Successfully logged in. Redirecting....',\n-                    variant: 'success'\n-                });\n-            } else {\n-                showNotification({\n-                    message: res?.error ?? '',\n-                    variant: 'danger'\n-                });\n-            }\n-        }).finally(() => setLoading(false));\n+  const [loading, setLoading] = useState(false);\n+  const {\n+    push\n+  } = useRouter();\n+  const {\n+    showNotification\n+  } = useNotificationContext();\n+  const queryParams = useQueryParams();\n+  const loginFormSchema = yup.object({\n+    email: yup.string().email('Please enter a valid email').required('Please enter your email'),\n+    password: yup.string().required('Please enter your password')\n+  });\n+  const {\n+    control,\n+    handleSubmit\n+  } = useForm({\n+    resolver: yupResolver(loginFormSchema),\n+    defaultValues: {\n+      email: 'user@demo.com',\n+      password: '123456'\n+    }\n+  });\n+  const login = handleSubmit(async values => {\n+    setLoading(true);\n+    signIn('credentials', {\n+      redirect: false,\n+      email: values?.email,\n+      password: values?.password\n+    }).then(res => {\n+      if (res?.ok) {\n+        push(queryParams['redirectTo'] ?? '/carteirinha');\n+        showNotification({\n+          message: 'Successfully logged in. Redirecting....',\n+          variant: 'success'\n+        });\n+      } else {\n+        showNotification({\n+          message: res?.error ?? '',\n+          variant: 'danger'\n+        });\n+      }\n     });\n-\n-    return { loading, login, control };\n+    setLoading(false);\n+  });\n+  return {\n+    loading,\n+    login,\n+    control\n+  };\n };\n-\n export default useSignIn;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740056269108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,33 +30,33 @@\n       email: 'user@demo.com',\n       password: '123456'\n     }\n   });\n-  const login = handleSubmit(async values => {\n+  const login = handleSubmit(async (values) => {\n     setLoading(true);\n+\n+    const callbackUrl = queryParams['redirectTo'] ?? '/'; // Página padrão\n+\n     signIn('credentials', {\n-      redirect: false,\n-      email: values?.email,\n-      password: values?.password\n+        redirect: false, // Não redirecione automaticamente\n+        email: values?.email,\n+        password: values?.password,\n+        callbackUrl: callbackUrl // Passe o callbackUrl para o NextAuth\n     }).then(res => {\n-      if (res?.ok) {\n-        push(queryParams['redirectTo'] ?? '/carteirinha');\n-        showNotification({\n-          message: 'Successfully logged in. Redirecting....',\n-          variant: 'success'\n-        });\n-      } else {\n-        showNotification({\n-          message: res?.error ?? '',\n-          variant: 'danger'\n-        });\n-      }\n-    });\n-    setLoading(false);\n-  });\n-  return {\n-    loading,\n-    login,\n-    control\n-  };\n+        if (res?.ok) {\n+            showNotification({\n+                message: 'Successfully logged in. Redirecting....',\n+                variant: 'success'\n+            });\n+            // Não precisa redirecionar aqui. O NextAuth cuidará disso.\n+        } else {\n+            showNotification({\n+                message: res?.error ?? '',\n+                variant: 'danger'\n+            });\n+        }\n+    }).finally(() => setLoading(false));\n+});\n+\n+return { loading, login, control };\n };\n export default useSignIn;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740056377765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,56 +7,53 @@\n import * as yup from 'yup';\n import { yupResolver } from '@hookform/resolvers/yup';\n import { useNotificationContext } from '@/context/useNotificationContext';\n import useQueryParams from '@/hooks/useQueryParams';\n+\n const useSignIn = () => {\n-  const [loading, setLoading] = useState(false);\n-  const {\n-    push\n-  } = useRouter();\n-  const {\n-    showNotification\n-  } = useNotificationContext();\n-  const queryParams = useQueryParams();\n-  const loginFormSchema = yup.object({\n-    email: yup.string().email('Please enter a valid email').required('Please enter your email'),\n-    password: yup.string().required('Please enter your password')\n-  });\n-  const {\n-    control,\n-    handleSubmit\n-  } = useForm({\n-    resolver: yupResolver(loginFormSchema),\n-    defaultValues: {\n-      email: 'user@demo.com',\n-      password: '123456'\n-    }\n-  });\n-  const login = handleSubmit(async (values) => {\n-    setLoading(true);\n+    const [loading, setLoading] = useState(false);\n+    const { push } = useRouter();\n+    const { showNotification } = useNotificationContext();\n+    const queryParams = useQueryParams();\n \n-    const callbackUrl = queryParams['redirectTo'] ?? '/'; // Página padrão\n+    const loginFormSchema = yup.object({\n+        email: yup.string().email('Please enter a valid email').required('Please enter your email'),\n+        password: yup.string().required('Please enter your password')\n+    });\n \n-    signIn('credentials', {\n-        redirect: false, // Não redirecione automaticamente\n-        email: values?.email,\n-        password: values?.password,\n-        callbackUrl: callbackUrl // Passe o callbackUrl para o NextAuth\n-    }).then(res => {\n-        if (res?.ok) {\n-            showNotification({\n-                message: 'Successfully logged in. Redirecting....',\n-                variant: 'success'\n-            });\n-            // Não precisa redirecionar aqui. O NextAuth cuidará disso.\n-        } else {\n-            showNotification({\n-                message: res?.error ?? '',\n-                variant: 'danger'\n-            });\n+    const { control, handleSubmit } = useForm({\n+        resolver: yupResolver(loginFormSchema),\n+        defaultValues: {\n+            email: 'user@demo.com',\n+            password: '123456'\n         }\n-    }).finally(() => setLoading(false));\n-});\n+    });\n \n-return { loading, login, control };\n+    const login = handleSubmit(async (values) => {\n+        setLoading(true);\n+\n+        const callbackUrl = queryParams['redirectTo'] ?? '/'; // Obtém o callbackUrl ANTES do signIn\n+\n+        signIn('credentials', {\n+            redirect: false, // Não redirecione automaticamente\n+            email: values?.email,\n+            password: values?.password,\n+            callbackUrl: callbackUrl // Passa o callbackUrl para o NextAuth\n+        }).then(res => {\n+            if (res?.ok) {\n+                showNotification({\n+                    message: 'Successfully logged in. Redirecting....',\n+                    variant: 'success'\n+                });\n+            } else {\n+                showNotification({\n+                    message: res?.error ?? '',\n+                    variant: 'danger'\n+                });\n+            }\n+        }).finally(() => setLoading(false)); // Garante que o setLoading(false) seja chamado sempre\n+    });\n+\n+    return { loading, login, control };\n };\n+\n export default useSignIn;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740249164900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,30 @@\n+// useSignIn.js\n 'use client';\n \n import { signIn } from 'next-auth/react';\n-import { useRouter } from 'next/navigation';\n+import { useRouter, useSearchParams } from 'next/navigation'; // Import useSearchParams\n import { useState } from 'react';\n import { useForm } from 'react-hook-form';\n import * as yup from 'yup';\n import { yupResolver } from '@hookform/resolvers/yup';\n import { useNotificationContext } from '@/context/useNotificationContext';\n-import useQueryParams from '@/hooks/useQueryParams';\n \n const useSignIn = () => {\n-    const [loading, setLoading] = useState(false);\n-    const { push } = useRouter();\n-    const { showNotification } = useNotificationContext();\n-    const queryParams = useQueryParams();\n+    // ... outras variáveis\n+    const searchParams = useSearchParams();\n \n-    const loginFormSchema = yup.object({\n-        email: yup.string().email('Please enter a valid email').required('Please enter your email'),\n-        password: yup.string().required('Please enter your password')\n-    });\n-\n-    const { control, handleSubmit } = useForm({\n-        resolver: yupResolver(loginFormSchema),\n-        defaultValues: {\n-            email: 'user@demo.com',\n-            password: '123456'\n-        }\n-    });\n-\n     const login = handleSubmit(async (values) => {\n         setLoading(true);\n \n-        const callbackUrl = queryParams['redirectTo'] ?? '/'; // Obtém o callbackUrl ANTES do signIn\n+        // *** Correção: Obtenha o callbackUrl usando useSearchParams ***\n+        const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/';\n \n         signIn('credentials', {\n-            redirect: false, // Não redirecione automaticamente\n+            redirect: false,\n             email: values?.email,\n             password: values?.password,\n-            callbackUrl: callbackUrl // Passa o callbackUrl para o NextAuth\n+            callbackUrl: callbackUrl\n         }).then(res => {\n             if (res?.ok) {\n                 showNotification({\n                     message: 'Successfully logged in. Redirecting....',\n@@ -49,9 +35,9 @@\n                     message: res?.error ?? '',\n                     variant: 'danger'\n                 });\n             }\n-        }).finally(() => setLoading(false)); // Garante que o setLoading(false) seja chamado sempre\n+        }).finally(() => setLoading(false));\n     });\n \n     return { loading, login, control };\n };\n"
                },
                {
                    "date": 1740249283391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,46 @@\n-// useSignIn.js\n 'use client';\n \n import { signIn } from 'next-auth/react';\n-import { useRouter, useSearchParams } from 'next/navigation'; // Import useSearchParams\n+import { useRouter, useSearchParams } from 'next/navigation';\n import { useState } from 'react';\n import { useForm } from 'react-hook-form';\n+import { yupResolver } from '@hookform/resolvers/yup';\n import * as yup from 'yup';\n-import { yupResolver } from '@hookform/resolvers/yup';\n import { useNotificationContext } from '@/context/useNotificationContext';\n \n const useSignIn = () => {\n-    // ... outras variáveis\n+    const [loading, setLoading] = useState(false);\n+    const { push } = useRouter();\n+    const { showNotification } = useNotificationContext();\n     const searchParams = useSearchParams();\n \n-    const login = handleSubmit(async (values) => {\n+    const loginFormSchema = yup.object({\n+        email: yup.string().email('Please enter a valid email').required('Please enter your email'),\n+        password: yup.string().required('Please enter your password')\n+    });\n+\n+    // *** Correção: Mova useForm para DENTRO da função useSignIn ***\n+    const { control, handleSubmit } = useForm({\n+        resolver: yupResolver(loginFormSchema),\n+        defaultValues: {\n+            email: 'user@demo.com',\n+            password: '123456'\n+        }\n+    });\n+\n+    const login = handleSubmit(async (values) => { // Agora handleSubmit está definido\n         setLoading(true);\n \n-        // *** Correção: Obtenha o callbackUrl usando useSearchParams ***\n         const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/';\n \n         signIn('credentials', {\n             redirect: false,\n             email: values?.email,\n             password: values?.password,\n             callbackUrl: callbackUrl\n         }).then(res => {\n-            if (res?.ok) {\n-                showNotification({\n-                    message: 'Successfully logged in. Redirecting....',\n-                    variant: 'success'\n-                });\n-            } else {\n-                showNotification({\n-                    message: res?.error ?? '',\n-                    variant: 'danger'\n-                });\n-            }\n+            // ... (resto do seu código)\n         }).finally(() => setLoading(false));\n     });\n \n     return { loading, login, control };\n"
                },
                {
                    "date": 1740249396614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,17 @@\n \n         const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/';\n \n         signIn('credentials', {\n-            redirect: false,\n             email: values?.email,\n             password: values?.password,\n-            callbackUrl: callbackUrl\n+            redirect: false,\n         }).then(res => {\n-            // ... (resto do seu código)\n+            if (res?.ok) {\n+                router.push(callbackUrl); // Redireciona manualmente após login bem-sucedido\n+            } else {\n+                // Lidar com erro\n+            }\n         }).finally(() => setLoading(false));\n     });\n \n     return { loading, login, control };\n"
                },
                {
                    "date": 1740249488730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             password: values?.password,\n             redirect: false,\n         }).then(res => {\n             if (res?.ok) {\n-                router.push(callbackUrl); // Redireciona manualmente após login bem-sucedido\n+                push(callbackUrl);\n             } else {\n                 // Lidar com erro\n             }\n         }).finally(() => setLoading(false));\n"
                },
                {
                    "date": 1740252618824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n \n     const login = handleSubmit(async (values) => { // Agora handleSubmit está definido\n         setLoading(true);\n \n-        const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/';\n+        const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/carteirinha';\n \n         signIn('credentials', {\n             email: values?.email,\n             password: values?.password,\n"
                },
                {
                    "date": 1740320462765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,16 +35,17 @@\n \n         signIn('credentials', {\n             email: values?.email,\n             password: values?.password,\n-            redirect: false,\n+            redirect: false, // Deixe false para controle manual do redirecionamento\n+            callbackUrl // Passe callbackUrl explicitamente\n         }).then(res => {\n             if (res?.ok) {\n-                push(callbackUrl);\n+                push(res.url || callbackUrl); // Se NextAuth retornar URL, usa ela\n             } else {\n-                // Lidar com erro\n+                showNotification('Erro no login', 'error');\n             }\n-        }).finally(() => setLoading(false));\n+        });\n     });\n \n     return { loading, login, control };\n };\n"
                },
                {
                    "date": 1740320655436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,26 +27,36 @@\n             password: '123456'\n         }\n     });\n \n-    const login = handleSubmit(async (values) => { // Agora handleSubmit está definido\n+    const login = handleSubmit(async (values) => {\n         setLoading(true);\n-\n-        const callbackUrl = searchParams.get('redirectTo') ?? window.location.origin + '/carteirinha';\n-\n-        signIn('credentials', {\n+    \n+        const res = await signIn('credentials', {\n             email: values?.email,\n             password: values?.password,\n-            redirect: false, // Deixe false para controle manual do redirecionamento\n-            callbackUrl // Passe callbackUrl explicitamente\n-        }).then(res => {\n-            if (res?.ok) {\n-                push(res.url || callbackUrl); // Se NextAuth retornar URL, usa ela\n-            } else {\n-                showNotification('Erro no login', 'error');\n-            }\n+            redirect: false, // Mantemos falso para redirecionar manualmente\n         });\n+    \n+        if (res?.ok) {\n+            // 🔥 Buscar sessão para pegar o role do usuário\n+            const response = await fetch('/api/auth/session');\n+            const session = await response.json();\n+            const role = session?.user?.role;\n+    \n+            let redirectUrl = '/';\n+            if (role === 'cliente') redirectUrl = '/carteirinha';\n+            if (role === 'parceiro') redirectUrl = '/relatorio';\n+            if (role === 'admin') redirectUrl = '/admin';\n+    \n+            push(redirectUrl); // Agora redireciona corretamente!\n+        } else {\n+            showNotification('Erro no login', 'error');\n+        }\n+    \n+        setLoading(false);\n     });\n+    \n \n     return { loading, login, control };\n };\n \n"
                },
                {
                    "date": 1740327190246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n     // *** Correção: Mova useForm para DENTRO da função useSignIn ***\n     const { control, handleSubmit } = useForm({\n         resolver: yupResolver(loginFormSchema),\n         defaultValues: {\n-            email: 'user@demo.com',\n-            password: '123456'\n+            email: 'cliente@protege.com.br',\n+            password: '12345678'\n         }\n     });\n \n     const login = handleSubmit(async (values) => {\n"
                },
                {
                    "date": 1740330361244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     // *** Correção: Mova useForm para DENTRO da função useSignIn ***\n     const { control, handleSubmit } = useForm({\n         resolver: yupResolver(loginFormSchema),\n         defaultValues: {\n-            email: 'cliente@protege.com.br',\n+            email: 'cliente@protegenet.com.br',\n             password: '12345678'\n         }\n     });\n \n"
                },
                {
                    "date": 1740484974208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     \n             let redirectUrl = '/';\n             if (role === 'cliente') redirectUrl = '/carteirinha';\n             if (role === 'parceiro') redirectUrl = '/relatorio';\n-            if (role === 'admin') redirectUrl = '/admin';\n+            if (role === 'admin') redirectUrl = '/dashboard';\n     \n             push(redirectUrl); // Agora redireciona corretamente!\n         } else {\n             showNotification('Erro no login', 'error');\n"
                }
            ],
            "date": 1740055910363,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { signIn } from 'next-auth/react';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useNotificationContext } from '@/context/useNotificationContext';\nimport useQueryParams from '@/hooks/useQueryParams';\n\nconst useSignIn = () => {\n    const [loading, setLoading] = useState(false);\n    const { push } = useRouter();\n    const { showNotification } = useNotificationContext();\n    const queryParams = useQueryParams(); // Se você precisa de query params para outros fins\n    // ... (seu schema yup)\n\n    const login = handleSubmit(async (values) => {\n        setLoading(true);\n\n        const callbackUrl = queryParams['redirectTo'] ?? '/'; // Página padrão se não houver redirectTo\n\n        signIn('credentials', {\n            redirect: false, // Não redirecione automaticamente\n            email: values?.email,\n            password: values?.password,\n            callbackUrl: callbackUrl // Passe o callbackUrl para o NextAuth\n        }).then(res => {\n            if (res?.ok) {\n                // Não precisa redirecionar aqui. O NextAuth cuidará disso.\n                showNotification({\n                    message: 'Successfully logged in. Redirecting....',\n                    variant: 'success'\n                });\n            } else {\n                showNotification({\n                    message: res?.error ?? '',\n                    variant: 'danger'\n                });\n            }\n        }).finally(() => setLoading(false));\n    });\n\n    return { loading, login, control };\n};\n\nexport default useSignIn;"
        }
    ]
}