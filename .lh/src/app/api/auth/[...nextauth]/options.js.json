{
    "sourceFile": "src/app/api/auth/[...nextauth]/options.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1740053432207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740053858370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,77 @@\n+import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n-import { randomBytes } from 'crypto';\n-export const fakeUsers = [{\n-  id: '1',\n-  email: 'user@demo.com',\n-  username: 'demo_user',\n-  password: '123456',\n-  firstName: 'Demo',\n-  lastName: 'User',\n-  role: 'Admin',\n-  token: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0ZWNoemFhIiwiYXVkIjoiaHR0cHM6Ly90ZWNoemFhLmdldGFwcHVpLmNvbS8iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVjaHphYSIsIkVtYWlsIjoidGVjaHphYXN0dWRpb0BnbWFpbC5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJUZXN0VG9rZW4ifQ.ud4LnFZ-mqhHEYiPf2wCLM7KvLGoAxhXTBSymRIZEFLleFkO119AXd8p3OfPCpdUWSyeZl8-pZyElANc_KHj5w'\n-}];\n-export const options = {\n-  providers: [CredentialsProvider({\n-    name: 'credentials',\n-    credentials: {\n-      email: {\n-        label: 'Email:',\n-        type: 'text',\n-        placeholder: 'Enter your username'\n-      },\n-      password: {\n-        label: 'Password',\n-        type: 'password'\n-      }\n+// Importe seu banco de dados ou método de consulta de usuário\n+import { db } from './seuBancoDeDados'; // Adapte o caminho\n+\n+export default NextAuth({\n+    providers: [\n+        CredentialsProvider({\n+            name: 'Credentials',\n+            credentials: {\n+                email: { label: 'Email', type: 'text' },\n+                password: { label: 'Senha', type: 'password' }\n+            },\n+            async authorize(credentials) {\n+                const { email, password } = credentials;\n+\n+                try {\n+                    // 1. Verificar se o usuário existe no banco de dados\n+                    const user = await db.users.findOne({ email });\n+\n+                    if (!user) {\n+                        throw new Error('Usuário não encontrado.');\n+                    }\n+\n+                    // 2. Verificar a senha\n+                    const isValidPassword = await bcrypt.compare(password, user.password); // Use bcrypt para comparar senhas hasheadas\n+\n+                    if (!isValidPassword) {\n+                        throw new Error('Senha incorreta.');\n+                    }\n+\n+                    // 3. Determinar o role com base no email\n+                    let role = 'cliente'; // Role padrão\n+\n+                    if (user.email.endsWith('@parceiro.com')) { // Exemplo: emails de parceiros terminam com @parceiro.com\n+                        role = 'parceiro';\n+                    } else if (user.email.endsWith('@admin.com')) { // Exemplo: emails de admin terminam com @admin.com\n+                        role = 'admin';\n+                    }\n+\n+                    // 4. Retornar o usuário com o role\n+                    return {\n+                        id: user._id,\n+                        email: user.email,\n+                        name: user.name,\n\\ No newline at end of file\n+                        role // Inclua o role no objeto do usuário\n+                    };\n+                } catch (error) {\n+                    console.error('Erro na autenticação:', error);\n+                    throw new Error('Ocorreu um erro durante a autenticação.');\n+                }\n+            }\n+        })\n+    ],\n+    secret: process.env.NEXTAUTH_SECRET,\n+    pages: {\n+        signIn: '/auth/login' // Página de login genérica\n     },\n-    async authorize(credentials, req) {\n-      const filteredUser = fakeUsers.find(user => {\n-        return user.email === credentials?.email && user.password === credentials?.password;\n-      });\n-      if (filteredUser) {\n-        return filteredUser;\n-      } else {\n-        throw new Error('Email or Password is not valid');\n-      }\n-    }\n-  })],\n-  secret: 'kvwLrfri/MBznUCofIoRH9+NvGu6GqvVdqO3mor1GuA=',\n-  pages: {\n-    signIn: '/auth/login-cliente'\n-  },\n-  callbacks: {\n-    async signIn({\n-      user,\n-      account,\n-      profile,\n-      email,\n-      credentials\n-    }) {\n-      return true;\n+    callbacks: {\n+        async session({ session, token }) {\n+            session.user = token.user;\n+            return session;\n+        }\n     },\n-    session: ({\n-      session,\n-      token\n-    }) => {\n-      session.user = {\n-        email: 'user@demo.com',\n-        name: 'Test User'\n-      };\n-      return Promise.resolve(session);\n+    events: {\n+        async signIn({ user, account, email }) {\n+            // Redirecionar para a página correta após o login\n+            if (user.role === 'cliente') {\n+                return '/carteirinha';\n+            } else if (user.role === 'parceiro') {\n+                return '/relatorio';\n+            } else if (user.role === 'admin') {\n+                return '/admin'; // Página de admin\n+            }\n+        }\n     }\n-  },\n-  session: {\n-    maxAge: 24 * 60 * 60 * 1000,\n-    generateSessionToken: () => {\n-      return randomBytes(32).toString('hex');\n-    }\n-  }\n-};\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740053986871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,32 @@\n import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n-// Importe seu banco de dados ou método de consulta de usuário\n-import { db } from './seuBancoDeDados'; // Adapte o caminho\n \n+// Dados de usuários simulados (JSON)\n+const users = [\n+    {\n+        id: 1,\n+        email: 'cliente@exemplo.com',\n+        password: 'senha123',\n+        name: 'Cliente Teste',\n+        role: 'cliente'\n+    },\n+    {\n+        id: 2,\n+        email: 'parceiro@exemplo.com',\n+        password: 'senha456',\n+        name: 'Parceiro Teste',\n+        role: 'parceiro'\n+    },\n+    {\n+        id: 3,\n+        email: 'admin@exemplo.com',\n+        password: 'senha789',\n+        name: 'Admin Teste',\n+        role: 'admin'\n+    }\n+];\n+\n export default NextAuth({\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n@@ -13,49 +36,33 @@\n             },\n             async authorize(credentials) {\n                 const { email, password } = credentials;\n \n-                try {\n-                    // 1. Verificar se o usuário existe no banco de dados\n-                    const user = await db.users.findOne({ email });\n+                // 1. Encontrar o usuário no array JSON\n+                const user = users.find(user => user.email === email);\n \n-                    if (!user) {\n-                        throw new Error('Usuário não encontrado.');\n-                    }\n+                if (!user) {\n+                    throw new Error('Usuário não encontrado.');\n+                }\n \n-                    // 2. Verificar a senha\n-                    const isValidPassword = await bcrypt.compare(password, user.password); // Use bcrypt para comparar senhas hasheadas\n+                // 2. Verificar a senha (comparação simples para teste)\n+                if (user.password !== password) {\n+                    throw new Error('Senha incorreta.');\n+                }\n \n-                    if (!isValidPassword) {\n-                        throw new Error('Senha incorreta.');\n-                    }\n-\n-                    // 3. Determinar o role com base no email\n-                    let role = 'cliente'; // Role padrão\n-\n-                    if (user.email.endsWith('@parceiro.com')) { // Exemplo: emails de parceiros terminam com @parceiro.com\n-                        role = 'parceiro';\n-                    } else if (user.email.endsWith('@admin.com')) { // Exemplo: emails de admin terminam com @admin.com\n-                        role = 'admin';\n-                    }\n-\n-                    // 4. Retornar o usuário com o role\n-                    return {\n-                        id: user._id,\n-                        email: user.email,\n-                        name: user.name,\n-                        role // Inclua o role no objeto do usuário\n-                    };\n-                } catch (error) {\n-                    console.error('Erro na autenticação:', error);\n-                    throw new Error('Ocorreu um erro durante a autenticação.');\n-                }\n+                // 3. Retornar o usuário com o role\n+                return {\n+                    id: user.id,\n+                    email: user.email,\n+                    name: user.name,\n+                    role: user.role\n+                };\n             }\n         })\n     ],\n     secret: process.env.NEXTAUTH_SECRET,\n     pages: {\n-        signIn: '/auth/login' // Página de login genérica\n+        signIn: '/auth/login'\n     },\n     callbacks: {\n         async session({ session, token }) {\n             session.user = token.user;\n@@ -69,9 +76,9 @@\n                 return '/carteirinha';\n             } else if (user.role === 'parceiro') {\n                 return '/relatorio';\n             } else if (user.role === 'admin') {\n-                return '/admin'; // Página de admin\n+                return '/admin';\n             }\n         }\n     }\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740054026440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,24 @@\n // Dados de usuários simulados (JSON)\n const users = [\n     {\n         id: 1,\n-        email: 'cliente@exemplo.com',\n-        password: 'senha123',\n+        email: 'cliente@protege.com.br',\n+        password: '12345678',\n         name: 'Cliente Teste',\n         role: 'cliente'\n     },\n     {\n         id: 2,\n-        email: 'parceiro@exemplo.com',\n-        password: 'senha456',\n+        email: 'parceiro@protege.com.b',\n+        password: '12345678',\n         name: 'Parceiro Teste',\n         role: 'parceiro'\n     },\n     {\n         id: 3,\n-        email: 'admin@exemplo.com',\n-        password: 'senha789',\n+        email: 'admin@protege.com.b',\n+        password: '12345678',\n         name: 'Admin Teste',\n         role: 'admin'\n     }\n ];\n"
                },
                {
                    "date": 1740055166382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// options.js\n import NextAuth from 'next-auth';\n import CredentialsProvider from 'next-auth/providers/credentials';\n \n // Dados de usuários simulados (JSON)\n@@ -11,23 +12,23 @@\n         role: 'cliente'\n     },\n     {\n         id: 2,\n-        email: 'parceiro@protege.com.b',\n+        email: 'parceiro@protege.com.br',\n         password: '12345678',\n         name: 'Parceiro Teste',\n         role: 'parceiro'\n     },\n     {\n         id: 3,\n-        email: 'admin@protege.com.b',\n+        email: 'admin@protege.com.br',\n         password: '12345678',\n         name: 'Admin Teste',\n         role: 'admin'\n     }\n ];\n \n-export default NextAuth({\n+const authOptions = { // Crie uma variável para as opções\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n             credentials: {\n@@ -58,9 +59,9 @@\n                 };\n             }\n         })\n     ],\n-    secret: process.env.NEXTAUTH_SECRET,\n+    secret: process.env.NEXTAUTH_SECRET, // NÃO ESQUEÇA DESTA LINHA!\n     pages: {\n         signIn: '/auth/login'\n     },\n     callbacks: {\n@@ -80,5 +81,7 @@\n                 return '/admin';\n             }\n         }\n     }\n-});\n\\ No newline at end of file\n+};\n+\n+export default NextAuth(authOptions); // Exporta o resultado da chamada de NextAuth()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740055389020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         role: 'admin'\n     }\n ];\n \n-const authOptions = { // Crie uma variável para as opções\n+export const options = { // Exportação nomeada\n     providers: [\n         CredentialsProvider({\n             name: 'Credentials',\n             credentials: {\n@@ -81,7 +81,5 @@\n                 return '/admin';\n             }\n         }\n     }\n-};\n-\n-export default NextAuth(authOptions); // Exporta o resultado da chamada de NextAuth()\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740056197900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,19 @@\n             return session;\n         }\n     },\n     events: {\n-        async signIn({ user, account, email }) {\n-            // Redirecionar para a página correta após o login\n-            if (user.role === 'cliente') {\n+        async signIn({ user, account, email, callbackUrl }) { // callbackUrl aqui\n+            console.log(\"Role do usuário:\", user?.role); // Verifique o role do usuário\n+            console.log(\"Callback URL:\", callbackUrl); // Verifique o callbackUrl\n+\n+            if (user?.role === 'cliente') {\n                 return '/carteirinha';\n-            } else if (user.role === 'parceiro') {\n+            } else if (user?.role === 'parceiro') {\n                 return '/relatorio';\n-            } else if (user.role === 'admin') {\n+            } else if (user?.role === 'admin') {\n                 return '/admin';\n             }\n+            return callbackUrl || '/'; // Use callbackUrl ou página padrão\n         }\n     }\n };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1740053432207,
            "name": "Commit-0",
            "content": "import CredentialsProvider from 'next-auth/providers/credentials';\nimport { randomBytes } from 'crypto';\nexport const fakeUsers = [{\n  id: '1',\n  email: 'user@demo.com',\n  username: 'demo_user',\n  password: '123456',\n  firstName: 'Demo',\n  lastName: 'User',\n  role: 'Admin',\n  token: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0ZWNoemFhIiwiYXVkIjoiaHR0cHM6Ly90ZWNoemFhLmdldGFwcHVpLmNvbS8iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVjaHphYSIsIkVtYWlsIjoidGVjaHphYXN0dWRpb0BnbWFpbC5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJUZXN0VG9rZW4ifQ.ud4LnFZ-mqhHEYiPf2wCLM7KvLGoAxhXTBSymRIZEFLleFkO119AXd8p3OfPCpdUWSyeZl8-pZyElANc_KHj5w'\n}];\nexport const options = {\n  providers: [CredentialsProvider({\n    name: 'credentials',\n    credentials: {\n      email: {\n        label: 'Email:',\n        type: 'text',\n        placeholder: 'Enter your username'\n      },\n      password: {\n        label: 'Password',\n        type: 'password'\n      }\n    },\n    async authorize(credentials, req) {\n      const filteredUser = fakeUsers.find(user => {\n        return user.email === credentials?.email && user.password === credentials?.password;\n      });\n      if (filteredUser) {\n        return filteredUser;\n      } else {\n        throw new Error('Email or Password is not valid');\n      }\n    }\n  })],\n  secret: 'kvwLrfri/MBznUCofIoRH9+NvGu6GqvVdqO3mor1GuA=',\n  pages: {\n    signIn: '/auth/login-cliente'\n  },\n  callbacks: {\n    async signIn({\n      user,\n      account,\n      profile,\n      email,\n      credentials\n    }) {\n      return true;\n    },\n    session: ({\n      session,\n      token\n    }) => {\n      session.user = {\n        email: 'user@demo.com',\n        name: 'Test User'\n      };\n      return Promise.resolve(session);\n    }\n  },\n  session: {\n    maxAge: 24 * 60 * 60 * 1000,\n    generateSessionToken: () => {\n      return randomBytes(32).toString('hex');\n    }\n  }\n};"
        }
    ]
}