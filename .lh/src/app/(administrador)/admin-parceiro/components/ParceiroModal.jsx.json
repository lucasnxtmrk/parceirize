{
    "sourceFile": "src/app/(administrador)/admin-parceiro/components/ParceiroModal.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1740487900992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740488331779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,102 +1,88 @@\n \"use client\";\r\n \r\n-import React, { useState, useEffect, useCallback } from \"react\";\r\n+import React, { useState, useEffect } from \"react\";\r\n import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n import { useForm, Controller } from \"react-hook-form\";\r\n-import { useDropzone } from \"react-dropzone\";\r\n \r\n-// Fun√ß√£o para gerar um ID de parceiro √∫nico (6 caracteres alfanum√©ricos)\r\n-const generateRandomId = () => {\r\n-    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n-    let id = \"\";\r\n-    for (let i = 0; i < 6; i++) {\r\n-        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n-    }\r\n-    return id;\r\n-};\r\n+// üîπ Fun√ß√£o para gerar c√≥digo de voucher √∫nico baseado no nome da empresa e desconto\r\n+const generateVoucherCode = async (nomeEmpresa, desconto) => {\r\n+    const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3); // Pega os 3 primeiros caracteres\r\n+    const randomCode = Math.floor(1000 + Math.random() * 9000); // Gera um c√≥digo num√©rico aleat√≥rio\r\n+    let voucher = `${formattedName}${desconto}${randomCode}`; // Monta o c√≥digo\r\n \r\n-// Fun√ß√£o para verificar se o ID j√° existe no banco\r\n-const generateUniqueId = async () => {\r\n-    let newId;\r\n     let exists = true;\r\n \r\n     while (exists) {\r\n-        newId = generateRandomId();\r\n         try {\r\n-            const response = await fetch(`/api/admin/verify-parceiro?id=${newId}`);\r\n+            const response = await fetch(`/api/admin/verify-voucher?voucher=${voucher}`);\r\n             const data = await response.json();\r\n             exists = data.exists;\r\n+            if (exists) {\r\n+                voucher = `${formattedName}${desconto}${Math.floor(1000 + Math.random() * 9000)}`; // Gera um novo se j√° existir\r\n+            }\r\n         } catch (error) {\r\n-            console.error(\"Erro ao verificar ID do parceiro:\", error);\r\n-            exists = false; // Em caso de erro, assume que o ID n√£o existe\r\n+            console.error(\"Erro ao verificar voucher:\", error);\r\n+            exists = false; // Se houver erro, assume que o c√≥digo √© √∫nico\r\n         }\r\n     }\r\n \r\n-    return newId;\r\n+    return voucher;\r\n };\r\n \r\n-const ParceiroModal = ({ show, handleClose, onParceiroCreated, parceiro }) => {\r\n+const ParceiroModal = ({ show, handleClose, parceiro, onSave }) => {\r\n     const { control, handleSubmit, setValue, reset, watch } = useForm({\r\n         defaultValues: {\r\n             nome_empresa: \"\",\r\n             email: \"\",\r\n-            foto: \"\",\r\n+            senha: \"\",\r\n+            desconto: \"\",\r\n+            voucher: \"\",\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n-    // Observa a URL da foto para exibir o avatar corretamente\r\n-    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n-\r\n-    // Quando o modal abre, carrega os dados do parceiro (se estiver editando)\r\n+    // üîπ Atualiza os valores quando editamos um parceiro existente\r\n     useEffect(() => {\r\n         if (show) {\r\n-            reset(); // Reseta o formul√°rio antes de preencher os dados\r\n+            reset({\r\n+                nome_empresa: parceiro?.nome_empresa || \"\",\r\n+                email: parceiro?.email || \"\",\r\n+                senha: \"\",\r\n+                desconto: parceiro?.desconto || \"\",\r\n+                voucher: parceiro?.voucher || \"\",\r\n+            });\r\n \r\n-            if (parceiro) {\r\n-                setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n-                setValue(\"email\", parceiro.email);\r\n-                setValue(\"foto\", parceiro.foto);\r\n-            } else {\r\n-                setValue(\"foto\", \"/assets/images/users/dummy-avatar.jpg\"); // Imagem padr√£o\r\n+            // Se for novo parceiro, gera um voucher automaticamente\r\n+            if (!parceiro) {\r\n+                setValue(\"voucher\", \"Gerando...\");\r\n             }\r\n         }\r\n-    }, [show, parceiro, setValue, reset]);\r\n+    }, [show, parceiro, reset, setValue]);\r\n \r\n-    // Fun√ß√£o para upload de imagem (React Dropzone)\r\n-    const onDrop = useCallback((acceptedFiles) => {\r\n-        const file = acceptedFiles[0];\r\n-        if (file) {\r\n-            const reader = new FileReader();\r\n-            reader.onloadend = () => {\r\n-                setValue(\"foto\", reader.result);\r\n-            };\r\n-            reader.readAsDataURL(file);\r\n+    // üîπ Gera um novo voucher quando nome e desconto s√£o preenchidos\r\n+    useEffect(() => {\r\n+        const nome = watch(\"nome_empresa\");\r\n+        const desconto = watch(\"desconto\");\r\n+\r\n+        if (nome && desconto && !parceiro) {\r\n+            generateVoucherCode(nome, desconto).then((uniqueVoucher) => {\r\n+                setValue(\"voucher\", uniqueVoucher);\r\n+            });\r\n         }\r\n-    }, [setValue]);\r\n+    }, [watch(\"nome_empresa\"), watch(\"desconto\"), parceiro, setValue]);\r\n \r\n-    const { getRootProps, getInputProps } = useDropzone({\r\n-        onDrop,\r\n-        accept: \"image/*\",\r\n-        multiple: false,\r\n-    });\r\n-\r\n-    // Fun√ß√£o para criar ou editar parceiro\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n         setMessage(null);\r\n \r\n-        const method = parceiro ? \"PUT\" : \"POST\";\r\n-        const url = \"/api/admin/parceiros\";\r\n-\r\n         try {\r\n-            const response = await fetch(url, {\r\n-                method,\r\n+            const response = await fetch(\"/api/admin/parceiros\", {\r\n+                method: parceiro ? \"PUT\" : \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify(parceiro ? { ...formData, id: parceiro.id } : formData),\r\n             });\r\n \r\n@@ -106,9 +92,10 @@\n                 throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n             }\r\n \r\n             setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n-            onParceiroCreated();\r\n+            onSave();\r\n+            reset();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n         } finally {\r\n@@ -125,36 +112,39 @@\n                 {error && <p className=\"text-danger\">{error}</p>}\r\n                 {message && <p className=\"text-success\">{message}</p>}\r\n \r\n                 <form onSubmit={handleSubmit(onSubmit)}>\r\n-                    {/* Avatar com op√ß√£o de upload */}\r\n-                    <div className=\"text-center mb-3\">\r\n-                        <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\r\n-                            <input {...getInputProps()} />\r\n-                            <img src={fotoUrl} alt=\"Foto do Parceiro\" className=\"avatar-lg rounded-circle\" />\r\n-                        </div>\r\n-                    </div>\r\n-\r\n-                    {/* Nome da Empresa */}\r\n-                    <FormGroup className=\"mt-3\">\r\n+                    <FormGroup>\r\n                         <FormLabel>Nome da Empresa</FormLabel>\r\n                         <Controller name=\"nome_empresa\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n-                    {/* E-mail */}\r\n                     <FormGroup className=\"mt-3\">\r\n                         <FormLabel>E-mail</FormLabel>\r\n                         <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n-                    {/* Campo Oculto da Foto */}\r\n-                    <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\r\n+                    {!parceiro && (\r\n+                        <FormGroup className=\"mt-3\">\r\n+                            <FormLabel>Senha</FormLabel>\r\n+                            <Controller name=\"senha\" control={control} render={({ field }) => <FormControl type=\"password\" {...field} required />} />\r\n+                        </FormGroup>\r\n+                    )}\r\n \r\n-                    {/* Bot√µes */}\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>Desconto (%)</FormLabel>\r\n+                        <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"number\" {...field} required />} />\r\n+                    </FormGroup>\r\n+\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>Voucher</FormLabel>\r\n+                        <Controller name=\"voucher\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n+                    </FormGroup>\r\n+\r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n                         <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n-                            {loading ? \"Salvando...\" : parceiro ? \"Atualizar\" : \"Criar Parceiro\"}\r\n+                            {loading ? \"Salvando...\" : parceiro ? \"Salvar Altera√ß√µes\" : \"Criar Parceiro\"}\r\n                         </Button>\r\n                     </div>\r\n                 </form>\r\n             </Modal.Body>\r\n"
                },
                {
                    "date": 1740488672020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,98 @@\n \"use client\";\r\n \r\n-import React, { useState, useEffect } from \"react\";\r\n+import React, { useState, useEffect, useCallback } from \"react\";\r\n import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n import { useForm, Controller } from \"react-hook-form\";\r\n+import { useDropzone } from \"react-dropzone\";\r\n \r\n-// üîπ Fun√ß√£o para gerar c√≥digo de voucher √∫nico baseado no nome da empresa e desconto\r\n-const generateVoucherCode = async (nomeEmpresa, desconto) => {\r\n-    const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3); // Pega os 3 primeiros caracteres\r\n-    const randomCode = Math.floor(1000 + Math.random() * 9000); // Gera um c√≥digo num√©rico aleat√≥rio\r\n-    let voucher = `${formattedName}${desconto}${randomCode}`; // Monta o c√≥digo\r\n-\r\n+// üîπ Fun√ß√£o para gerar um voucher √∫nico baseado no nome da empresa e desconto\r\n+const generateUniqueVoucher = async (nomeEmpresa, desconto) => {\r\n+    const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n+    let voucherCode;\r\n     let exists = true;\r\n \r\n     while (exists) {\r\n+        voucherCode = `${formattedName}${desconto}${Math.floor(100 + Math.random() * 900)}`;\r\n         try {\r\n-            const response = await fetch(`/api/admin/verify-voucher?voucher=${voucher}`);\r\n+            const response = await fetch(`/api/admin/verify-voucher?voucher=${voucherCode}`);\r\n             const data = await response.json();\r\n             exists = data.exists;\r\n-            if (exists) {\r\n-                voucher = `${formattedName}${desconto}${Math.floor(1000 + Math.random() * 9000)}`; // Gera um novo se j√° existir\r\n-            }\r\n         } catch (error) {\r\n             console.error(\"Erro ao verificar voucher:\", error);\r\n-            exists = false; // Se houver erro, assume que o c√≥digo √© √∫nico\r\n+            exists = false; // Assume que o voucher n√£o existe em caso de erro\r\n         }\r\n     }\r\n \r\n-    return voucher;\r\n+    return voucherCode;\r\n };\r\n \r\n-const ParceiroModal = ({ show, handleClose, parceiro, onSave }) => {\r\n-    const { control, handleSubmit, setValue, reset, watch } = useForm({\r\n+const ParceiroModal = ({ show, handleClose, parceiro, onParceiroCreated }) => {\r\n+    const { control, handleSubmit, setValue, watch, reset } = useForm({\r\n         defaultValues: {\r\n             nome_empresa: \"\",\r\n             email: \"\",\r\n             senha: \"\",\r\n             desconto: \"\",\r\n-            voucher: \"\",\r\n+            foto: \"\",\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n-    // üîπ Atualiza os valores quando editamos um parceiro existente\r\n+    // Estado para armazenar o preview da imagem\r\n+    const fotoPreview = watch(\"foto\") || \"/assets/images/users/default-avatar.jpg\";\r\n+\r\n+    // Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n-        if (show) {\r\n-            reset({\r\n-                nome_empresa: parceiro?.nome_empresa || \"\",\r\n-                email: parceiro?.email || \"\",\r\n-                senha: \"\",\r\n-                desconto: parceiro?.desconto || \"\",\r\n-                voucher: parceiro?.voucher || \"\",\r\n-            });\r\n+        if (show && parceiro) {\r\n+            setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n+            setValue(\"email\", parceiro.email);\r\n+            setValue(\"desconto\", parceiro.desconto || \"\");\r\n+            setValue(\"foto\", parceiro.foto || \"/assets/images/users/default-avatar.jpg\");\r\n+        } else if (show) {\r\n+            reset();\r\n+        }\r\n+    }, [show, parceiro, setValue, reset]);\r\n \r\n-            // Se for novo parceiro, gera um voucher automaticamente\r\n-            if (!parceiro) {\r\n-                setValue(\"voucher\", \"Gerando...\");\r\n-            }\r\n+    // Upload de imagem\r\n+    const onDrop = useCallback((acceptedFiles) => {\r\n+        const file = acceptedFiles[0];\r\n+        if (file) {\r\n+            const reader = new FileReader();\r\n+            reader.onloadend = () => {\r\n+                setValue(\"foto\", reader.result);\r\n+            };\r\n+            reader.readAsDataURL(file);\r\n         }\r\n-    }, [show, parceiro, reset, setValue]);\r\n+    }, [setValue]);\r\n \r\n-    // üîπ Gera um novo voucher quando nome e desconto s√£o preenchidos\r\n-    useEffect(() => {\r\n-        const nome = watch(\"nome_empresa\");\r\n-        const desconto = watch(\"desconto\");\r\n+    const { getRootProps, getInputProps } = useDropzone({\r\n+        onDrop,\r\n+        accept: \"image/*\",\r\n+        multiple: false,\r\n+    });\r\n \r\n-        if (nome && desconto && !parceiro) {\r\n-            generateVoucherCode(nome, desconto).then((uniqueVoucher) => {\r\n-                setValue(\"voucher\", uniqueVoucher);\r\n-            });\r\n-        }\r\n-    }, [watch(\"nome_empresa\"), watch(\"desconto\"), parceiro, setValue]);\r\n-\r\n+    // üîπ Enviar dados para API\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n         setMessage(null);\r\n \r\n         try {\r\n+            // Se for um parceiro novo, gera um voucher √∫nico\r\n+            let voucherCode = parceiro ? parceiro.voucher_codigo : await generateUniqueVoucher(formData.nome_empresa, formData.desconto);\r\n+\r\n             const response = await fetch(\"/api/admin/parceiros\", {\r\n                 method: parceiro ? \"PUT\" : \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify(parceiro ? { ...formData, id: parceiro.id } : formData),\r\n+                body: JSON.stringify({\r\n+                    ...formData,\r\n+                    id: parceiro?.id,\r\n+                    voucher_codigo: voucherCode,\r\n+                }),\r\n             });\r\n \r\n             const data = await response.json();\r\n \r\n@@ -92,9 +100,9 @@\n                 throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n             }\r\n \r\n             setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n-            onSave();\r\n+            onParceiroCreated(); // Atualiza a lista\r\n             reset();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n@@ -131,16 +139,25 @@\n                     )}\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n                         <FormLabel>Desconto (%)</FormLabel>\r\n-                        <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"number\" {...field} required />} />\r\n+                        <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"number\" min=\"1\" max=\"100\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n-                        <FormLabel>Voucher</FormLabel>\r\n-                        <Controller name=\"voucher\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} readOnly />} />\r\n+                        <FormLabel>Voucher Gerado</FormLabel>\r\n+                        <FormControl type=\"text\" value={parceiro?.voucher_codigo || \"Ser√° gerado automaticamente\"} readOnly />\r\n                     </FormGroup>\r\n \r\n+                    <FormGroup className=\"mt-3 text-center\">\r\n+                        <FormLabel>Foto do Parceiro</FormLabel>\r\n+                        <div {...getRootProps()} style={{ cursor: \"pointer\", border: \"1px dashed #ccc\", padding: \"10px\", borderRadius: \"5px\", textAlign: \"center\" }}>\r\n+                            <input {...getInputProps()} />\r\n+                            <img src={fotoPreview} alt=\"Foto do Parceiro\" style={{ width: \"100px\", height: \"100px\", borderRadius: \"50%\" }} />\r\n+                            <p className=\"mt-2\">Clique para enviar uma imagem</p>\r\n+                        </div>\r\n+                    </FormGroup>\r\n+\r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n                         <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                             {loading ? \"Salvando...\" : parceiro ? \"Salvar Altera√ß√µes\" : \"Criar Parceiro\"}\r\n"
                },
                {
                    "date": 1740488880132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,29 @@\n import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n import { useForm, Controller } from \"react-hook-form\";\r\n import { useDropzone } from \"react-dropzone\";\r\n \r\n-// üîπ Fun√ß√£o para gerar um voucher √∫nico baseado no nome da empresa e desconto\r\n+// üîπ Fun√ß√£o para gerar um voucher baseado no nome da empresa e desconto\r\n+const generateVoucherCode = (nomeEmpresa, desconto) => {\r\n+    const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n+    const randomNumber = Math.floor(100 + Math.random() * 900); // Adiciona um n√∫mero aleat√≥rio\r\n+    return `${formattedName}${desconto}${randomNumber}`;\r\n+};\r\n+\r\n+// üîπ Fun√ß√£o para gerar um voucher √∫nico verificando no banco\r\n const generateUniqueVoucher = async (nomeEmpresa, desconto) => {\r\n-    const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n     let voucherCode;\r\n     let exists = true;\r\n \r\n     while (exists) {\r\n-        voucherCode = `${formattedName}${desconto}${Math.floor(100 + Math.random() * 900)}`;\r\n+        voucherCode = generateVoucherCode(nomeEmpresa, desconto);\r\n         try {\r\n             const response = await fetch(`/api/admin/verify-voucher?voucher=${voucherCode}`);\r\n             const data = await response.json();\r\n             exists = data.exists;\r\n         } catch (error) {\r\n             console.error(\"Erro ao verificar voucher:\", error);\r\n-            exists = false; // Assume que o voucher n√£o existe em caso de erro\r\n+            exists = false;\r\n         }\r\n     }\r\n \r\n     return voucherCode;\r\n@@ -32,8 +38,9 @@\n             nome_empresa: \"\",\r\n             email: \"\",\r\n             senha: \"\",\r\n             desconto: \"\",\r\n+            voucher_codigo: \"\",\r\n             foto: \"\",\r\n         },\r\n     });\r\n \r\n@@ -43,20 +50,38 @@\n \r\n     // Estado para armazenar o preview da imagem\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/users/default-avatar.jpg\";\r\n \r\n-    // Carregar dados no modal se estiver editando um parceiro\r\n+    // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n-        if (show && parceiro) {\r\n-            setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n-            setValue(\"email\", parceiro.email);\r\n-            setValue(\"desconto\", parceiro.desconto || \"\");\r\n-            setValue(\"foto\", parceiro.foto || \"/assets/images/users/default-avatar.jpg\");\r\n-        } else if (show) {\r\n-            reset();\r\n+        if (show) {\r\n+            if (parceiro) {\r\n+                // Se for edi√ß√£o, preencher os campos com os dados existentes\r\n+                setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n+                setValue(\"email\", parceiro.email);\r\n+                setValue(\"desconto\", parceiro.desconto || \"\");\r\n+                setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n+                setValue(\"foto\", parceiro.foto || \"/assets/images/users/default-avatar.jpg\");\r\n+            } else {\r\n+                // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n+                reset();\r\n+                setValue(\"voucher_codigo\", \"Gerando...\");\r\n+            }\r\n         }\r\n     }, [show, parceiro, setValue, reset]);\r\n \r\n+    // üîπ Gerar um voucher quando o desconto for digitado\r\n+    useEffect(() => {\r\n+        const nomeEmpresa = watch(\"nome_empresa\");\r\n+        const desconto = watch(\"desconto\");\r\n+\r\n+        if (!parceiro && nomeEmpresa && desconto) {\r\n+            generateUniqueVoucher(nomeEmpresa, desconto).then((uniqueVoucher) => {\r\n+                setValue(\"voucher_codigo\", uniqueVoucher);\r\n+            });\r\n+        }\r\n+    }, [watch(\"nome_empresa\"), watch(\"desconto\"), parceiro, setValue]);\r\n+\r\n     // Upload de imagem\r\n     const onDrop = useCallback((acceptedFiles) => {\r\n         const file = acceptedFiles[0];\r\n         if (file) {\r\n@@ -80,18 +105,14 @@\n         setError(null);\r\n         setMessage(null);\r\n \r\n         try {\r\n-            // Se for um parceiro novo, gera um voucher √∫nico\r\n-            let voucherCode = parceiro ? parceiro.voucher_codigo : await generateUniqueVoucher(formData.nome_empresa, formData.desconto);\r\n-\r\n             const response = await fetch(\"/api/admin/parceiros\", {\r\n                 method: parceiro ? \"PUT\" : \"POST\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({\r\n                     ...formData,\r\n                     id: parceiro?.id,\r\n-                    voucher_codigo: voucherCode,\r\n                 }),\r\n             });\r\n \r\n             const data = await response.json();\r\n@@ -143,10 +164,10 @@\n                         <Controller name=\"desconto\" control={control} render={({ field }) => <FormControl type=\"number\" min=\"1\" max=\"100\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n                     <FormGroup className=\"mt-3\">\r\n-                        <FormLabel>Voucher Gerado</FormLabel>\r\n-                        <FormControl type=\"text\" value={parceiro?.voucher_codigo || \"Ser√° gerado automaticamente\"} readOnly />\r\n+                        <FormLabel>Voucher</FormLabel>\r\n+                        <Controller name=\"voucher_codigo\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n                     <FormGroup className=\"mt-3 text-center\">\r\n                         <FormLabel>Foto do Parceiro</FormLabel>\r\n"
                },
                {
                    "date": 1740488936252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n-    const fotoPreview = watch(\"foto\") || \"/assets/images/users/default-avatar.jpg\";\r\n+    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummer-avatar.jpg\";\r\n \r\n     // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n         if (show) {\r\n"
                },
                {
                    "date": 1740488942051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n-                setValue(\"foto\", parceiro.foto || \"/assets/images/users/default-avatar.jpg\");\r\n+                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummer-avatar.jpg\");\r\n             } else {\r\n                 // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n"
                },
                {
                    "date": 1740488979013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n-    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummer-avatar.jpg\";\r\n+    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg.jpg\";\r\n \r\n     // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n         if (show) {\r\n"
                },
                {
                    "date": 1740488991247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n-                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummer-avatar.jpg\");\r\n+                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummy-avatar.jpg.jpg\");\r\n             } else {\r\n                 // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n"
                },
                {
                    "date": 1740489021525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n-    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg.jpg\";\r\n+    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n \r\n     // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n         if (show) {\r\n@@ -59,9 +59,9 @@\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n-                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummy-avatar.jpg.jpg\");\r\n+                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummy-avatar.jpg\");\r\n             } else {\r\n                 // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n"
                },
                {
                    "date": 1740489097474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n-    const fotoPreview = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n+    const fotoPreview = watch(\"foto\") || \"/images/parceiros/dummy-avatar.jpg\";\r\n \r\n     // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n         if (show) {\r\n"
                },
                {
                    "date": 1740489102907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n-                setValue(\"foto\", parceiro.foto || \"/assets/images/users/dummy-avatar.jpg\");\r\n+                setValue(\"foto\", parceiro.foto || \"/images/parceiros/dummy-avatar.jpg\");\r\n             } else {\r\n                 // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n"
                },
                {
                    "date": 1740489170925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     const [error, setError] = useState(null);\r\n     const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n-    const fotoPreview = watch(\"foto\") || \"/images/parceiros/dummy-avatar.jpg\";\r\n+    const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n \r\n     // üîπ Carregar dados no modal se estiver editando um parceiro\r\n     useEffect(() => {\r\n         if (show) {\r\n@@ -59,9 +59,9 @@\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n-                setValue(\"foto\", parceiro.foto || \"/images/parceiros/dummy-avatar.jpg\");\r\n+                setValue(\"foto\", parceiro.foto || \"/assets/images/parceiros/dummy-avatar.jpg\");\r\n             } else {\r\n                 // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n"
                },
                {
                    "date": 1740490480065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,8 @@\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n-    const [message, setMessage] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n \r\n@@ -102,9 +101,8 @@\n     // üîπ Enviar dados para API\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n-        setMessage(null);\r\n \r\n         try {\r\n             const response = await fetch(\"/api/admin/parceiros\", {\r\n                 method: parceiro ? \"PUT\" : \"POST\",\r\n@@ -120,9 +118,8 @@\n             if (!response.ok) {\r\n                 throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n             }\r\n \r\n-            setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n             onParceiroCreated(); // Atualiza a lista\r\n             reset();\r\n             handleClose();\r\n         } catch (err) {\r\n"
                },
                {
                    "date": 1740490498413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n+    const [message] = useState(null);\r\n \r\n     // Estado para armazenar o preview da imagem\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n \r\n"
                },
                {
                    "date": 1741205633708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n // üîπ Fun√ß√£o para gerar um voucher baseado no nome da empresa e desconto\r\n const generateVoucherCode = (nomeEmpresa, desconto) => {\r\n     const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n-    const randomNumber = Math.floor(100 + Math.random() * 900); // Adiciona um n√∫mero aleat√≥rio\r\n+    const randomNumber = Math.floor(100 + Math.random() * 900);\r\n     return `${formattedName}${desconto}${randomNumber}`;\r\n };\r\n \r\n // üîπ Fun√ß√£o para gerar um voucher √∫nico verificando no banco\r\n@@ -40,37 +40,37 @@\n             senha: \"\",\r\n             desconto: \"\",\r\n             voucher_codigo: \"\",\r\n             foto: \"\",\r\n+            limitar_voucher: false,\r\n+            limite_voucher: \"\", // Novo campo de limita√ß√£o\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n-    const [message] = useState(null);\r\n-\r\n-    // Estado para armazenar o preview da imagem\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n+    const limitarVoucher = watch(\"limitar_voucher\");\r\n \r\n-    // üîπ Carregar dados no modal se estiver editando um parceiro\r\n+    // Carregar dados ao abrir modal\r\n     useEffect(() => {\r\n         if (show) {\r\n             if (parceiro) {\r\n-                // Se for edi√ß√£o, preencher os campos com os dados existentes\r\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n                 setValue(\"foto\", parceiro.foto || \"/assets/images/parceiros/dummy-avatar.jpg\");\r\n+                setValue(\"limitar_voucher\", parceiro.limitar_voucher || false);\r\n+                setValue(\"limite_voucher\", parceiro.limite_voucher || \"\");\r\n             } else {\r\n-                // Se for cria√ß√£o, limpar campos e gerar um voucher automaticamente\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n             }\r\n         }\r\n     }, [show, parceiro, setValue, reset]);\r\n \r\n-    // üîπ Gerar um voucher quando o desconto for digitado\r\n+    // Gerar voucher automaticamente\r\n     useEffect(() => {\r\n         const nomeEmpresa = watch(\"nome_empresa\");\r\n         const desconto = watch(\"desconto\");\r\n \r\n@@ -98,9 +98,9 @@\n         accept: \"image/*\",\r\n         multiple: false,\r\n     });\r\n \r\n-    // üîπ Enviar dados para API\r\n+    // Enviar dados para API\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n \r\n@@ -119,9 +119,9 @@\n             if (!response.ok) {\r\n                 throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n             }\r\n \r\n-            onParceiroCreated(); // Atualiza a lista\r\n+            onParceiroCreated(); \r\n             reset();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n@@ -136,9 +136,8 @@\n                 <Modal.Title>{parceiro ? \"Editar Parceiro\" : \"Criar Novo Parceiro\"}</Modal.Title>\r\n             </Modal.Header>\r\n             <Modal.Body>\r\n                 {error && <p className=\"text-danger\">{error}</p>}\r\n-                {message && <p className=\"text-success\">{message}</p>}\r\n \r\n                 <form onSubmit={handleSubmit(onSubmit)}>\r\n                     <FormGroup>\r\n                         <FormLabel>Nome da Empresa</FormLabel>\r\n@@ -166,8 +165,29 @@\n                         <FormLabel>Voucher</FormLabel>\r\n                         <Controller name=\"voucher_codigo\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n                     </FormGroup>\r\n \r\n+                    {/* Checkbox para limitar voucher */}\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <Form.Check \r\n+                            type=\"checkbox\"\r\n+                            label=\"Limitar uso do voucher\"\r\n+                            {...control.register(\"limitar_voucher\")}\r\n+                        />\r\n+                    </FormGroup>\r\n+\r\n+                    {/* Campo de limite, vis√≠vel apenas se o checkbox estiver marcado */}\r\n+                    {limitarVoucher && (\r\n+                        <FormGroup className=\"mt-3\">\r\n+                            <FormLabel>Quantas vezes o cliente pode utilizar o voucher dentro de 30 dias?</FormLabel>\r\n+                            <Controller \r\n+                                name=\"limite_voucher\" \r\n+                                control={control} \r\n+                                render={({ field }) => <FormControl type=\"number\" min=\"1\" required {...field} />} \r\n+                            />\r\n+                        </FormGroup>\r\n+                    )}\r\n+\r\n                     <FormGroup className=\"mt-3 text-center\">\r\n                         <FormLabel>Foto do Parceiro</FormLabel>\r\n                         <div {...getRootProps()} style={{ cursor: \"pointer\", border: \"1px dashed #ccc\", padding: \"10px\", borderRadius: \"5px\", textAlign: \"center\" }}>\r\n                             <input {...getInputProps()} />\r\n"
                },
                {
                    "date": 1741208232005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,36 +41,43 @@\n             desconto: \"\",\r\n             voucher_codigo: \"\",\r\n             foto: \"\",\r\n             limitar_voucher: false,\r\n-            limite_voucher: \"\", // Novo campo de limita√ß√£o\r\n+            limite_voucher: \"\", \r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n     const limitarVoucher = watch(\"limitar_voucher\");\r\n \r\n-    // Carregar dados ao abrir modal\r\n+    // üîπ Carregar dados ao abrir modal\r\n     useEffect(() => {\r\n         if (show) {\r\n             if (parceiro) {\r\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n                 setValue(\"foto\", parceiro.foto || \"/assets/images/parceiros/dummy-avatar.jpg\");\r\n-                setValue(\"limitar_voucher\", parceiro.limitar_voucher || false);\r\n-                setValue(\"limite_voucher\", parceiro.limite_voucher || \"\");\r\n+\r\n+                // üîπ Verifica se o parceiro tem limite de uso e ajusta os valores corretamente\r\n+                if (parceiro.limite_voucher !== null && parceiro.limite_voucher !== undefined) {\r\n+                    setValue(\"limitar_voucher\", true);\r\n+                    setValue(\"limite_voucher\", parceiro.limite_voucher);\r\n+                } else {\r\n+                    setValue(\"limitar_voucher\", false);\r\n+                    setValue(\"limite_voucher\", \"\");\r\n+                }\r\n             } else {\r\n                 reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n             }\r\n         }\r\n     }, [show, parceiro, setValue, reset]);\r\n \r\n-    // Gerar voucher automaticamente\r\n+    // üîπ Gerar voucher automaticamente\r\n     useEffect(() => {\r\n         const nomeEmpresa = watch(\"nome_empresa\");\r\n         const desconto = watch(\"desconto\");\r\n \r\n@@ -80,9 +87,9 @@\n             });\r\n         }\r\n     }, [watch(\"nome_empresa\"), watch(\"desconto\"), parceiro, setValue]);\r\n \r\n-    // Upload de imagem\r\n+    // üîπ Upload de imagem\r\n     const onDrop = useCallback((acceptedFiles) => {\r\n         const file = acceptedFiles[0];\r\n         if (file) {\r\n             const reader = new FileReader();\r\n@@ -98,9 +105,9 @@\n         accept: \"image/*\",\r\n         multiple: false,\r\n     });\r\n \r\n-    // Enviar dados para API\r\n+    // üîπ Enviar dados para API\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n \r\n@@ -186,17 +193,8 @@\n                             />\r\n                         </FormGroup>\r\n                     )}\r\n \r\n-                    <FormGroup className=\"mt-3 text-center\">\r\n-                        <FormLabel>Foto do Parceiro</FormLabel>\r\n-                        <div {...getRootProps()} style={{ cursor: \"pointer\", border: \"1px dashed #ccc\", padding: \"10px\", borderRadius: \"5px\", textAlign: \"center\" }}>\r\n-                            <input {...getInputProps()} />\r\n-                            <img src={fotoPreview} alt=\"Foto do Parceiro\" style={{ width: \"100px\", height: \"100px\", borderRadius: \"50%\" }} />\r\n-                            <p className=\"mt-2\">Clique para enviar uma imagem</p>\r\n-                        </div>\r\n-                    </FormGroup>\r\n-\r\n                     <div className=\"d-flex justify-content-end mt-4\">\r\n                         <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                         <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                             {loading ? \"Salvando...\" : parceiro ? \"Salvar Altera√ß√µes\" : \"Criar Parceiro\"}\r\n"
                },
                {
                    "date": 1741208416690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,43 +41,43 @@\n             desconto: \"\",\r\n             voucher_codigo: \"\",\r\n             foto: \"\",\r\n             limitar_voucher: false,\r\n-            limite_voucher: \"\", \r\n+            limite_voucher: \"\",\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n     const fotoPreview = watch(\"foto\") || \"/assets/images/parceiros/dummy-avatar.jpg\";\r\n     const limitarVoucher = watch(\"limitar_voucher\");\r\n \r\n-    // üîπ Carregar dados ao abrir modal\r\n+    // Atualiza o estado do checkbox quando o parceiro for editado\r\n     useEffect(() => {\r\n         if (show) {\r\n+            reset();\r\n             if (parceiro) {\r\n                 setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                 setValue(\"email\", parceiro.email);\r\n                 setValue(\"desconto\", parceiro.desconto || \"\");\r\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n                 setValue(\"foto\", parceiro.foto || \"/assets/images/parceiros/dummy-avatar.jpg\");\r\n \r\n-                // üîπ Verifica se o parceiro tem limite de uso e ajusta os valores corretamente\r\n-                if (parceiro.limite_voucher !== null && parceiro.limite_voucher !== undefined) {\r\n+                // üîπ Se o parceiro tiver limite de voucher, marcamos o checkbox e preenchemos o campo\r\n+                if (parceiro.limite_voucher !== null && parceiro.limite_voucher !== undefined && parceiro.limite_voucher !== \"\") {\r\n                     setValue(\"limitar_voucher\", true);\r\n                     setValue(\"limite_voucher\", parceiro.limite_voucher);\r\n                 } else {\r\n                     setValue(\"limitar_voucher\", false);\r\n                     setValue(\"limite_voucher\", \"\");\r\n                 }\r\n             } else {\r\n-                reset();\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n             }\r\n         }\r\n     }, [show, parceiro, setValue, reset]);\r\n \r\n-    // üîπ Gerar voucher automaticamente\r\n+    // Atualiza o voucher automaticamente ao digitar o desconto\r\n     useEffect(() => {\r\n         const nomeEmpresa = watch(\"nome_empresa\");\r\n         const desconto = watch(\"desconto\");\r\n \r\n@@ -87,9 +87,9 @@\n             });\r\n         }\r\n     }, [watch(\"nome_empresa\"), watch(\"desconto\"), parceiro, setValue]);\r\n \r\n-    // üîπ Upload de imagem\r\n+    // Upload de imagem\r\n     const onDrop = useCallback((acceptedFiles) => {\r\n         const file = acceptedFiles[0];\r\n         if (file) {\r\n             const reader = new FileReader();\r\n@@ -105,9 +105,9 @@\n         accept: \"image/*\",\r\n         multiple: false,\r\n     });\r\n \r\n-    // üîπ Enviar dados para API\r\n+    // Enviar dados para API\r\n     const onSubmit = async (formData) => {\r\n         setLoading(true);\r\n         setError(null);\r\n \r\n@@ -126,9 +126,9 @@\n             if (!response.ok) {\r\n                 throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n             }\r\n \r\n-            onParceiroCreated(); \r\n+            onParceiroCreated();\r\n             reset();\r\n             handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n@@ -174,9 +174,9 @@\n                     </FormGroup>\r\n \r\n                     {/* Checkbox para limitar voucher */}\r\n                     <FormGroup className=\"mt-3\">\r\n-                        <Form.Check \r\n+                        <Form.Check\r\n                             type=\"checkbox\"\r\n                             label=\"Limitar uso do voucher\"\r\n                             {...control.register(\"limitar_voucher\")}\r\n                         />\r\n@@ -185,12 +185,12 @@\n                     {/* Campo de limite, vis√≠vel apenas se o checkbox estiver marcado */}\r\n                     {limitarVoucher && (\r\n                         <FormGroup className=\"mt-3\">\r\n                             <FormLabel>Quantas vezes o cliente pode utilizar o voucher dentro de 30 dias?</FormLabel>\r\n-                            <Controller \r\n-                                name=\"limite_voucher\" \r\n-                                control={control} \r\n-                                render={({ field }) => <FormControl type=\"number\" min=\"1\" required {...field} />} \r\n+                            <Controller\r\n+                                name=\"limite_voucher\"\r\n+                                control={control}\r\n+                                render={({ field }) => <FormControl type=\"number\" min=\"1\" required {...field} />}\r\n                             />\r\n                         </FormGroup>\r\n                     )}\r\n \r\n"
                },
                {
                    "date": 1741209404218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             desconto: \"\",\r\n             voucher_codigo: \"\",\r\n             foto: \"\",\r\n             limitar_voucher: false,\r\n-            limite_voucher: \"\",\r\n+            limite_uso: \"\",\r\n         },\r\n     });\r\n \r\n     const [loading, setLoading] = useState(false);\r\n@@ -62,14 +62,14 @@\n                 setValue(\"voucher_codigo\", parceiro.voucher_codigo || \"\");\r\n                 setValue(\"foto\", parceiro.foto || \"/assets/images/parceiros/dummy-avatar.jpg\");\r\n \r\n                 // üîπ Se o parceiro tiver limite de voucher, marcamos o checkbox e preenchemos o campo\r\n-                if (parceiro.limite_voucher !== null && parceiro.limite_voucher !== undefined && parceiro.limite_voucher !== \"\") {\r\n+                if (parceiro.limite_uso !== null && parceiro.limite_uso !== undefined && parceiro.limite_uso !== \"\") {\r\n                     setValue(\"limitar_voucher\", true);\r\n-                    setValue(\"limite_voucher\", parceiro.limite_voucher);\r\n+                    setValue(\"limite_uso\", parceiro.limite_uso);\r\n                 } else {\r\n                     setValue(\"limitar_voucher\", false);\r\n-                    setValue(\"limite_voucher\", \"\");\r\n+                    setValue(\"limite_uso\", \"\");\r\n                 }\r\n             } else {\r\n                 setValue(\"voucher_codigo\", \"Gerando...\");\r\n             }\r\n@@ -186,9 +186,9 @@\n                     {limitarVoucher && (\r\n                         <FormGroup className=\"mt-3\">\r\n                             <FormLabel>Quantas vezes o cliente pode utilizar o voucher dentro de 30 dias?</FormLabel>\r\n                             <Controller\r\n-                                name=\"limite_voucher\"\r\n+                                name=\"limite_uso\"\r\n                                 control={control}\r\n                                 render={({ field }) => <FormControl type=\"number\" min=\"1\" required {...field} />}\r\n                             />\r\n                         </FormGroup>\r\n"
                }
            ],
            "date": 1740487900992,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\n// Fun√ß√£o para gerar um ID de parceiro √∫nico (6 caracteres alfanum√©ricos)\r\nconst generateRandomId = () => {\r\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n    let id = \"\";\r\n    for (let i = 0; i < 6; i++) {\r\n        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return id;\r\n};\r\n\r\n// Fun√ß√£o para verificar se o ID j√° existe no banco\r\nconst generateUniqueId = async () => {\r\n    let newId;\r\n    let exists = true;\r\n\r\n    while (exists) {\r\n        newId = generateRandomId();\r\n        try {\r\n            const response = await fetch(`/api/admin/verify-parceiro?id=${newId}`);\r\n            const data = await response.json();\r\n            exists = data.exists;\r\n        } catch (error) {\r\n            console.error(\"Erro ao verificar ID do parceiro:\", error);\r\n            exists = false; // Em caso de erro, assume que o ID n√£o existe\r\n        }\r\n    }\r\n\r\n    return newId;\r\n};\r\n\r\nconst ParceiroModal = ({ show, handleClose, onParceiroCreated, parceiro }) => {\r\n    const { control, handleSubmit, setValue, reset, watch } = useForm({\r\n        defaultValues: {\r\n            nome_empresa: \"\",\r\n            email: \"\",\r\n            foto: \"\",\r\n        },\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [message, setMessage] = useState(null);\r\n\r\n    // Observa a URL da foto para exibir o avatar corretamente\r\n    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n\r\n    // Quando o modal abre, carrega os dados do parceiro (se estiver editando)\r\n    useEffect(() => {\r\n        if (show) {\r\n            reset(); // Reseta o formul√°rio antes de preencher os dados\r\n\r\n            if (parceiro) {\r\n                setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n                setValue(\"email\", parceiro.email);\r\n                setValue(\"foto\", parceiro.foto);\r\n            } else {\r\n                setValue(\"foto\", \"/assets/images/users/dummy-avatar.jpg\"); // Imagem padr√£o\r\n            }\r\n        }\r\n    }, [show, parceiro, setValue, reset]);\r\n\r\n    // Fun√ß√£o para upload de imagem (React Dropzone)\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        const file = acceptedFiles[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setValue(\"foto\", reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }, [setValue]);\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        accept: \"image/*\",\r\n        multiple: false,\r\n    });\r\n\r\n    // Fun√ß√£o para criar ou editar parceiro\r\n    const onSubmit = async (formData) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        setMessage(null);\r\n\r\n        const method = parceiro ? \"PUT\" : \"POST\";\r\n        const url = \"/api/admin/parceiros\";\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify(parceiro ? { ...formData, id: parceiro.id } : formData),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n            }\r\n\r\n            setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n            onParceiroCreated();\r\n            handleClose();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{parceiro ? \"Editar Parceiro\" : \"Criar Novo Parceiro\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {error && <p className=\"text-danger\">{error}</p>}\r\n                {message && <p className=\"text-success\">{message}</p>}\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    {/* Avatar com op√ß√£o de upload */}\r\n                    <div className=\"text-center mb-3\">\r\n                        <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\r\n                            <input {...getInputProps()} />\r\n                            <img src={fotoUrl} alt=\"Foto do Parceiro\" className=\"avatar-lg rounded-circle\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Nome da Empresa */}\r\n                    <FormGroup className=\"mt-3\">\r\n                        <FormLabel>Nome da Empresa</FormLabel>\r\n                        <Controller name=\"nome_empresa\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n                    </FormGroup>\r\n\r\n                    {/* E-mail */}\r\n                    <FormGroup className=\"mt-3\">\r\n                        <FormLabel>E-mail</FormLabel>\r\n                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n                    </FormGroup>\r\n\r\n                    {/* Campo Oculto da Foto */}\r\n                    <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\r\n\r\n                    {/* Bot√µes */}\r\n                    <div className=\"d-flex justify-content-end mt-4\">\r\n                        <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n                        <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n                            {loading ? \"Salvando...\" : parceiro ? \"Atualizar\" : \"Criar Parceiro\"}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ParceiroModal;\r\n"
        }
    ]
}