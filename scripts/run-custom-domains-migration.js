#!/usr/bin/env node

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do banco
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:Delus9798-@localhost:5432/protege',
});

async function runMigration() {
  const client = await pool.connect();

  try {
    console.log('üöÄ Iniciando migra√ß√£o de dom√≠nios personalizados...');

    // Ler o arquivo SQL
    const sqlFilePath = path.join(__dirname, 'add-custom-domains.sql');
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');

    console.log('üìÑ Executando script SQL...');

    // Executar o script
    const result = await client.query(sqlContent);

    console.log('‚úÖ Migra√ß√£o executada com sucesso!');

    // Verificar as tabelas criadas
    console.log('\nüîç Verificando tabelas criadas:');

    const tablesCheck = await client.query(`
      SELECT table_name, table_type
      FROM information_schema.tables
      WHERE table_schema = 'public'
        AND table_name IN ('dominios_personalizados', 'acessos_dominio')
      ORDER BY table_name;
    `);

    tablesCheck.rows.forEach(row => {
      console.log(`   ‚úì ${row.table_name} (${row.table_type})`);
    });

    // Verificar √≠ndices criados
    console.log('\nüóÇÔ∏è  Verificando √≠ndices criados:');

    const indexesCheck = await client.query(`
      SELECT indexname, tablename
      FROM pg_indexes
      WHERE schemaname = 'public'
        AND tablename IN ('dominios_personalizados', 'acessos_dominio')
      ORDER BY tablename, indexname;
    `);

    indexesCheck.rows.forEach(row => {
      console.log(`   ‚úì ${row.indexname} em ${row.tablename}`);
    });

    // Verificar fun√ß√µes criadas
    console.log('\n‚öôÔ∏è  Verificando fun√ß√µes criadas:');

    const functionsCheck = await client.query(`
      SELECT routine_name, routine_type
      FROM information_schema.routines
      WHERE routine_schema = 'public'
        AND routine_name IN ('buscar_provedor_por_dominio', 'gerar_token_verificacao', 'atualizar_ultimo_acesso')
      ORDER BY routine_name;
    `);

    functionsCheck.rows.forEach(row => {
      console.log(`   ‚úì ${row.routine_name} (${row.routine_type})`);
    });

    // Verificar views criadas
    console.log('\nüìä Verificando views criadas:');

    const viewsCheck = await client.query(`
      SELECT table_name
      FROM information_schema.views
      WHERE table_schema = 'public'
        AND table_name = 'stats_dominios';
    `);

    viewsCheck.rows.forEach(row => {
      console.log(`   ‚úì ${row.table_name} (VIEW)`);
    });

    // Verificar migra√ß√£o de dados
    console.log('\nüì• Verificando migra√ß√£o de dados:');

    const dataCheck = await client.query(`
      SELECT
        COUNT(*) as total_dominios,
        COUNT(CASE WHEN tipo = 'subdominio' THEN 1 END) as subdominios,
        COUNT(CASE WHEN tipo = 'personalizado' THEN 1 END) as personalizados,
        COUNT(CASE WHEN verificado = true THEN 1 END) as verificados
      FROM dominios_personalizados;
    `);

    const stats = dataCheck.rows[0];
    console.log(`   ‚úì Total de dom√≠nios: ${stats.total_dominios}`);
    console.log(`   ‚úì Subdom√≠nios: ${stats.subdominios}`);
    console.log(`   ‚úì Personalizados: ${stats.personalizados}`);
    console.log(`   ‚úì Verificados: ${stats.verificados}`);

    // Testar fun√ß√£o buscar_provedor_por_dominio
    console.log('\nüß™ Testando fun√ß√£o buscar_provedor_por_dominio:');

    const testFunction = await client.query(`
      SELECT * FROM buscar_provedor_por_dominio('exemplo.parceirize.com') LIMIT 1;
    `);

    if (testFunction.rows.length > 0) {
      console.log(`   ‚úì Fun√ß√£o funcionando: encontrou provedor ${testFunction.rows[0].nome_empresa}`);
    } else {
      console.log(`   ‚ö†Ô∏è  Fun√ß√£o criada mas nenhum resultado de teste`);
    }

    // Verificar trigger
    console.log('\nüîÑ Verificando triggers:');

    const triggerCheck = await client.query(`
      SELECT trigger_name, event_manipulation, event_object_table
      FROM information_schema.triggers
      WHERE trigger_schema = 'public'
        AND trigger_name = 'trigger_ultimo_acesso';
    `);

    triggerCheck.rows.forEach(row => {
      console.log(`   ‚úì ${row.trigger_name} em ${row.event_object_table} (${row.event_manipulation})`);
    });

    console.log('\nüéâ Migra√ß√£o de dom√≠nios personalizados conclu√≠da com sucesso!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('   1. Atualizar middleware para detectar dom√≠nios personalizados');
    console.log('   2. Modificar NextAuth para suportar m√∫ltiplos dom√≠nios');
    console.log('   3. Criar API de configura√ß√£o de dom√≠nio');
    console.log('   4. Implementar sistema de verifica√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runMigration().catch(console.error);
}

module.exports = { runMigration };