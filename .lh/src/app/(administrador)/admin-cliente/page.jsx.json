{
    "sourceFile": "src/app/(administrador)/admin-cliente/page.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1740403925300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740485486778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,33 +2,70 @@\n \r\n import React, { useState, useEffect } from \"react\";\r\n import { Button, Table, FormCheck, Row, Col } from \"react-bootstrap\";\r\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n+import ClienteModal from \"./components/ClienteModal\";\r\n \r\n const ClientesPage = () => {\r\n     const [clientes, setClientes] = useState([]);\r\n     const [selectedClientes, setSelectedClientes] = useState([]);\r\n     const [loading, setLoading] = useState(true);\r\n     const [error, setError] = useState(null);\r\n+    const [showModal, setShowModal] = useState(false);\r\n+    const [clienteSelecionado, setClienteSelecionado] = useState(null);\r\n \r\n     useEffect(() => {\r\n-        const fetchClientes = async () => {\r\n-            try {\r\n-                const response = await fetch(\"/api/admin/clientes\");\r\n-                if (!response.ok) throw new Error(\"Erro ao buscar clientes\");\r\n-\r\n-                const data = await response.json();\r\n-                setClientes(data);\r\n-                setLoading(false);\r\n-            } catch (err) {\r\n-                setError(err.message);\r\n-                setLoading(false);\r\n-            }\r\n-        };\r\n-\r\n         fetchClientes();\r\n     }, []);\r\n \r\n+    // Fun√ß√£o para buscar clientes\r\n+    const fetchClientes = async () => {\r\n+        try {\r\n+            const response = await fetch(\"/api/admin/clientes\");\r\n+            if (!response.ok) throw new Error(\"Erro ao buscar clientes\");\r\n+\r\n+            const data = await response.json();\r\n+            setClientes(data);\r\n+            setLoading(false);\r\n+        } catch (err) {\r\n+            setError(err.message);\r\n+            setLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    // Fun√ß√£o para abrir o modal (novo ou edi√ß√£o)\r\n+    const handleOpenModal = (cliente = null) => {\r\n+        setClienteSelecionado(cliente);\r\n+        setShowModal(true);\r\n+    };\r\n+\r\n+    // Fun√ß√£o para fechar o modal\r\n+    const handleCloseModal = () => {\r\n+        setClienteSelecionado(null);\r\n+        setShowModal(false);\r\n+    };\r\n+\r\n+    // Fun√ß√£o para salvar um cliente (cria√ß√£o ou edi√ß√£o)\r\n+    const handleSaveCliente = async (clienteData) => {\r\n+        const method = clienteSelecionado ? \"PUT\" : \"POST\";\r\n+        const url = \"/api/admin/clientes\";\r\n+\r\n+        try {\r\n+            const response = await fetch(url, {\r\n+                method,\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify(clienteSelecionado ? { ...clienteData, id: clienteSelecionado.id } : clienteData),\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error(\"Erro ao salvar cliente\");\r\n+\r\n+            fetchClientes(); // Atualiza a lista de clientes\r\n+            handleCloseModal();\r\n+        } catch (err) {\r\n+            console.error(\"‚ùå Erro ao salvar cliente:\", err);\r\n+        }\r\n+    };\r\n+\r\n     // Sele√ß√£o de m√∫ltiplos clientes\r\n     const handleCheckboxChange = (id) => {\r\n         setSelectedClientes((prevSelected) =>\r\n             prevSelected.includes(id) ? prevSelected.filter((cid) => cid !== id) : [...prevSelected, id]\r\n@@ -39,8 +76,28 @@\n     const handleSelectAll = () => {\r\n         setSelectedClientes(selectedClientes.length === clientes.length ? [] : clientes.map((c) => c.id));\r\n     };\r\n \r\n+    // Fun√ß√£o para excluir clientes selecionados\r\n+    const handleDeleteClientes = async () => {\r\n+        if (!window.confirm(\"Tem certeza que deseja excluir os clientes selecionados?\")) return;\r\n+\r\n+        try {\r\n+            const response = await fetch(\"/api/admin/clientes\", {\r\n+                method: \"DELETE\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ ids: selectedClientes }),\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error(\"Erro ao excluir clientes\");\r\n+\r\n+            fetchClientes(); // Atualiza a lista ap√≥s exclus√£o\r\n+            setSelectedClientes([]);\r\n+        } catch (err) {\r\n+            console.error(\"‚ùå Erro ao excluir clientes:\", err);\r\n+        }\r\n+    };\r\n+\r\n     if (loading) {\r\n         return <div className=\"text-center\">Carregando clientes...</div>;\r\n     }\r\n \r\n@@ -49,16 +106,16 @@\n     }\r\n \r\n     return (\r\n         <ComponentContainerCard id=\"gestao-clientes\" title=\"Gest√£o de Clientes\" description=\"Gerencie seus clientes.\">\r\n-            {/* Bot√£o para criar novo cliente */}\r\n+            {/* Bot√µes de a√ß√£o */}\r\n             <Row className=\"mb-3\">\r\n                 <Col>\r\n-                    <Button variant=\"success\">+ Criar Novo Cliente</Button>\r\n+                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Cliente</Button>\r\n                 </Col>\r\n                 <Col className=\"text-end\">\r\n                     {selectedClientes.length > 0 && (\r\n-                        <Button variant=\"danger\">Excluir Selecionados</Button>\r\n+                        <Button variant=\"danger\" onClick={handleDeleteClientes}>Excluir Selecionados</Button>\r\n                     )}\r\n                 </Col>\r\n             </Row>\r\n \r\n@@ -91,15 +148,18 @@\n                                 <td>{cliente.nome}</td>\r\n                                 <td>{cliente.sobrenome}</td>\r\n                                 <td>{cliente.email}</td>\r\n                                 <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n+                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(cliente)}>Editar</Button>\r\n                                 </td>\r\n                             </tr>\r\n                         ))}\r\n                     </tbody>\r\n                 </Table>\r\n             </div>\r\n+\r\n+            {/* Modal de cria√ß√£o/edi√ß√£o */}\r\n+            <ClienteModal show={showModal} handleClose={handleCloseModal} cliente={clienteSelecionado} onSave={handleSaveCliente} />\r\n         </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740486976452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,23 +2,22 @@\n \r\n import React, { useState, useEffect } from \"react\";\r\n import { Button, Table, FormCheck, Row, Col } from \"react-bootstrap\";\r\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n-import ClienteModal from \"./components/ClienteModal\";\r\n+import ClientModal from \"./components/ClientModal\";\r\n \r\n const ClientesPage = () => {\r\n     const [clientes, setClientes] = useState([]);\r\n     const [selectedClientes, setSelectedClientes] = useState([]);\r\n     const [loading, setLoading] = useState(true);\r\n     const [error, setError] = useState(null);\r\n     const [showModal, setShowModal] = useState(false);\r\n-    const [clienteSelecionado, setClienteSelecionado] = useState(null);\r\n \r\n     useEffect(() => {\r\n         fetchClientes();\r\n     }, []);\r\n \r\n-    // Fun√ß√£o para buscar clientes\r\n+    // üîπ Buscar clientes da API\r\n     const fetchClientes = async () => {\r\n         try {\r\n             const response = await fetch(\"/api/admin/clientes\");\r\n             if (!response.ok) throw new Error(\"Erro ao buscar clientes\");\r\n@@ -31,110 +30,58 @@\n             setLoading(false);\r\n         }\r\n     };\r\n \r\n-    // Fun√ß√£o para abrir o modal (novo ou edi√ß√£o)\r\n-    const handleOpenModal = (cliente = null) => {\r\n-        setClienteSelecionado(cliente);\r\n-        setShowModal(true);\r\n+    // üîπ Adicionar novo cliente √† lista automaticamente\r\n+    const handleClientCreated = (novoCliente) => {\r\n+        setClientes((prevClientes) => [...prevClientes, novoCliente]);\r\n+        setShowModal(false); // Fecha o modal automaticamente\r\n     };\r\n \r\n-    // Fun√ß√£o para fechar o modal\r\n-    const handleCloseModal = () => {\r\n-        setClienteSelecionado(null);\r\n-        setShowModal(false);\r\n-    };\r\n-\r\n-    // Fun√ß√£o para salvar um cliente (cria√ß√£o ou edi√ß√£o)\r\n-    const handleSaveCliente = async (clienteData) => {\r\n-        const method = clienteSelecionado ? \"PUT\" : \"POST\";\r\n-        const url = \"/api/admin/clientes\";\r\n-\r\n-        try {\r\n-            const response = await fetch(url, {\r\n-                method,\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify(clienteSelecionado ? { ...clienteData, id: clienteSelecionado.id } : clienteData),\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error(\"Erro ao salvar cliente\");\r\n-\r\n-            fetchClientes(); // Atualiza a lista de clientes\r\n-            handleCloseModal();\r\n-        } catch (err) {\r\n-            console.error(\"‚ùå Erro ao salvar cliente:\", err);\r\n-        }\r\n-    };\r\n-\r\n-    // Sele√ß√£o de m√∫ltiplos clientes\r\n+    // üîπ Sele√ß√£o de m√∫ltiplos clientes\r\n     const handleCheckboxChange = (id) => {\r\n         setSelectedClientes((prevSelected) =>\r\n             prevSelected.includes(id) ? prevSelected.filter((cid) => cid !== id) : [...prevSelected, id]\r\n         );\r\n     };\r\n \r\n-    // Sele√ß√£o de todos os clientes\r\n+    // üîπ Sele√ß√£o de todos os clientes\r\n     const handleSelectAll = () => {\r\n         setSelectedClientes(selectedClientes.length === clientes.length ? [] : clientes.map((c) => c.id));\r\n     };\r\n \r\n-    // Fun√ß√£o para excluir clientes selecionados\r\n-    const handleDeleteClientes = async () => {\r\n-        if (!window.confirm(\"Tem certeza que deseja excluir os clientes selecionados?\")) return;\r\n+    if (loading) return <div className=\"text-center\">Carregando clientes...</div>;\r\n+    if (error) return <div className=\"text-center text-danger\">Erro ao carregar clientes: {error}</div>;\r\n \r\n-        try {\r\n-            const response = await fetch(\"/api/admin/clientes\", {\r\n-                method: \"DELETE\",\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify({ ids: selectedClientes }),\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error(\"Erro ao excluir clientes\");\r\n-\r\n-            fetchClientes(); // Atualiza a lista ap√≥s exclus√£o\r\n-            setSelectedClientes([]);\r\n-        } catch (err) {\r\n-            console.error(\"‚ùå Erro ao excluir clientes:\", err);\r\n-        }\r\n-    };\r\n-\r\n-    if (loading) {\r\n-        return <div className=\"text-center\">Carregando clientes...</div>;\r\n-    }\r\n-\r\n-    if (error) {\r\n-        return <div className=\"text-center text-danger\">Erro ao carregar clientes: {error}</div>;\r\n-    }\r\n-\r\n     return (\r\n         <ComponentContainerCard id=\"gestao-clientes\" title=\"Gest√£o de Clientes\" description=\"Gerencie seus clientes.\">\r\n-            {/* Bot√µes de a√ß√£o */}\r\n+            {/* üîπ Bot√µes superiores */}\r\n             <Row className=\"mb-3\">\r\n                 <Col>\r\n-                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Cliente</Button>\r\n+                    <Button variant=\"success\" onClick={() => setShowModal(true)}>+ Criar Novo Cliente</Button>\r\n                 </Col>\r\n                 <Col className=\"text-end\">\r\n                     {selectedClientes.length > 0 && (\r\n-                        <Button variant=\"danger\" onClick={handleDeleteClientes}>Excluir Selecionados</Button>\r\n+                        <Button variant=\"danger\">Excluir Selecionados</Button>\r\n                     )}\r\n                 </Col>\r\n             </Row>\r\n \r\n-            {/* Tabela de clientes */}\r\n+            {/* üîπ Tabela de clientes */}\r\n             <div className=\"table-responsive\">\r\n                 <Table striped borderless hover>\r\n                     <thead className=\"table-light\">\r\n                         <tr>\r\n-                            <th scope=\"col\">\r\n+                            <th>\r\n                                 <FormCheck \r\n                                     checked={selectedClientes.length === clientes.length}\r\n                                     onChange={handleSelectAll}\r\n                                 />\r\n                             </th>\r\n-                            <th scope=\"col\">Nome</th>\r\n-                            <th scope=\"col\">Sobrenome</th>\r\n-                            <th scope=\"col\">Email</th>\r\n-                            <th scope=\"col\">A√ß√µes</th>\r\n+                            <th>Nome</th>\r\n+                            <th>Sobrenome</th>\r\n+                            <th>Email</th>\r\n+                            <th>A√ß√µes</th>\r\n                         </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                         {clientes.map((cliente) => (\r\n@@ -148,18 +95,22 @@\n                                 <td>{cliente.nome}</td>\r\n                                 <td>{cliente.sobrenome}</td>\r\n                                 <td>{cliente.email}</td>\r\n                                 <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(cliente)}>Editar</Button>\r\n+                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n                                 </td>\r\n                             </tr>\r\n                         ))}\r\n                     </tbody>\r\n                 </Table>\r\n             </div>\r\n \r\n-            {/* Modal de cria√ß√£o/edi√ß√£o */}\r\n-            <ClienteModal show={showModal} handleClose={handleCloseModal} cliente={clienteSelecionado} onSave={handleSaveCliente} />\r\n+            {/* üîπ Modal para cria√ß√£o de cliente */}\r\n+            <ClientModal \r\n+                show={showModal} \r\n+                handleClose={() => setShowModal(false)} \r\n+                onClientCreated={handleClientCreated} \r\n+            />\r\n         </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740486981617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,22 +2,23 @@\n \r\n import React, { useState, useEffect } from \"react\";\r\n import { Button, Table, FormCheck, Row, Col } from \"react-bootstrap\";\r\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n-import ClientModal from \"./components/ClientModal\";\r\n+import ClienteModal from \"./components/ClienteModal\";\r\n \r\n const ClientesPage = () => {\r\n     const [clientes, setClientes] = useState([]);\r\n     const [selectedClientes, setSelectedClientes] = useState([]);\r\n     const [loading, setLoading] = useState(true);\r\n     const [error, setError] = useState(null);\r\n     const [showModal, setShowModal] = useState(false);\r\n+    const [clienteSelecionado, setClienteSelecionado] = useState(null);\r\n \r\n     useEffect(() => {\r\n         fetchClientes();\r\n     }, []);\r\n \r\n-    // üîπ Buscar clientes da API\r\n+    // Fun√ß√£o para buscar clientes\r\n     const fetchClientes = async () => {\r\n         try {\r\n             const response = await fetch(\"/api/admin/clientes\");\r\n             if (!response.ok) throw new Error(\"Erro ao buscar clientes\");\r\n@@ -30,58 +31,110 @@\n             setLoading(false);\r\n         }\r\n     };\r\n \r\n-    // üîπ Adicionar novo cliente √† lista automaticamente\r\n-    const handleClientCreated = (novoCliente) => {\r\n-        setClientes((prevClientes) => [...prevClientes, novoCliente]);\r\n-        setShowModal(false); // Fecha o modal automaticamente\r\n+    // Fun√ß√£o para abrir o modal (novo ou edi√ß√£o)\r\n+    const handleOpenModal = (cliente = null) => {\r\n+        setClienteSelecionado(cliente);\r\n+        setShowModal(true);\r\n     };\r\n \r\n-    // üîπ Sele√ß√£o de m√∫ltiplos clientes\r\n+    // Fun√ß√£o para fechar o modal\r\n+    const handleCloseModal = () => {\r\n+        setClienteSelecionado(null);\r\n+        setShowModal(false);\r\n+    };\r\n+\r\n+    // Fun√ß√£o para salvar um cliente (cria√ß√£o ou edi√ß√£o)\r\n+    const handleSaveCliente = async (clienteData) => {\r\n+        const method = clienteSelecionado ? \"PUT\" : \"POST\";\r\n+        const url = \"/api/admin/clientes\";\r\n+\r\n+        try {\r\n+            const response = await fetch(url, {\r\n+                method,\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify(clienteSelecionado ? { ...clienteData, id: clienteSelecionado.id } : clienteData),\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error(\"Erro ao salvar cliente\");\r\n+\r\n+            fetchClientes(); // Atualiza a lista de clientes\r\n+            handleCloseModal();\r\n+        } catch (err) {\r\n+            console.error(\"‚ùå Erro ao salvar cliente:\", err);\r\n+        }\r\n+    };\r\n+\r\n+    // Sele√ß√£o de m√∫ltiplos clientes\r\n     const handleCheckboxChange = (id) => {\r\n         setSelectedClientes((prevSelected) =>\r\n             prevSelected.includes(id) ? prevSelected.filter((cid) => cid !== id) : [...prevSelected, id]\r\n         );\r\n     };\r\n \r\n-    // üîπ Sele√ß√£o de todos os clientes\r\n+    // Sele√ß√£o de todos os clientes\r\n     const handleSelectAll = () => {\r\n         setSelectedClientes(selectedClientes.length === clientes.length ? [] : clientes.map((c) => c.id));\r\n     };\r\n \r\n-    if (loading) return <div className=\"text-center\">Carregando clientes...</div>;\r\n-    if (error) return <div className=\"text-center text-danger\">Erro ao carregar clientes: {error}</div>;\r\n+    // Fun√ß√£o para excluir clientes selecionados\r\n+    const handleDeleteClientes = async () => {\r\n+        if (!window.confirm(\"Tem certeza que deseja excluir os clientes selecionados?\")) return;\r\n \r\n+        try {\r\n+            const response = await fetch(\"/api/admin/clientes\", {\r\n+                method: \"DELETE\",\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify({ ids: selectedClientes }),\r\n+            });\r\n+\r\n+            if (!response.ok) throw new Error(\"Erro ao excluir clientes\");\r\n+\r\n+            fetchClientes(); // Atualiza a lista ap√≥s exclus√£o\r\n+            setSelectedClientes([]);\r\n+        } catch (err) {\r\n+            console.error(\"‚ùå Erro ao excluir clientes:\", err);\r\n+        }\r\n+    };\r\n+\r\n+    if (loading) {\r\n+        return <div className=\"text-center\">Carregando clientes...</div>;\r\n+    }\r\n+\r\n+    if (error) {\r\n+        return <div className=\"text-center text-danger\">Erro ao carregar clientes: {error}</div>;\r\n+    }\r\n+\r\n     return (\r\n         <ComponentContainerCard id=\"gestao-clientes\" title=\"Gest√£o de Clientes\" description=\"Gerencie seus clientes.\">\r\n-            {/* üîπ Bot√µes superiores */}\r\n+            {/* Bot√µes de a√ß√£o */}\r\n             <Row className=\"mb-3\">\r\n                 <Col>\r\n-                    <Button variant=\"success\" onClick={() => setShowModal(true)}>+ Criar Novo Cliente</Button>\r\n+                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Cliente</Button>\r\n                 </Col>\r\n                 <Col className=\"text-end\">\r\n                     {selectedClientes.length > 0 && (\r\n-                        <Button variant=\"danger\">Excluir Selecionados</Button>\r\n+                        <Button variant=\"danger\" onClick={handleDeleteClientes}>Excluir Selecionados</Button>\r\n                     )}\r\n                 </Col>\r\n             </Row>\r\n \r\n-            {/* üîπ Tabela de clientes */}\r\n+            {/* Tabela de clientes */}\r\n             <div className=\"table-responsive\">\r\n                 <Table striped borderless hover>\r\n                     <thead className=\"table-light\">\r\n                         <tr>\r\n-                            <th>\r\n+                            <th scope=\"col\">\r\n                                 <FormCheck \r\n                                     checked={selectedClientes.length === clientes.length}\r\n                                     onChange={handleSelectAll}\r\n                                 />\r\n                             </th>\r\n-                            <th>Nome</th>\r\n-                            <th>Sobrenome</th>\r\n-                            <th>Email</th>\r\n-                            <th>A√ß√µes</th>\r\n+                            <th scope=\"col\">Nome</th>\r\n+                            <th scope=\"col\">Sobrenome</th>\r\n+                            <th scope=\"col\">Email</th>\r\n+                            <th scope=\"col\">A√ß√µes</th>\r\n                         </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                         {clientes.map((cliente) => (\r\n@@ -95,22 +148,18 @@\n                                 <td>{cliente.nome}</td>\r\n                                 <td>{cliente.sobrenome}</td>\r\n                                 <td>{cliente.email}</td>\r\n                                 <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n+                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(cliente)}>Editar</Button>\r\n                                 </td>\r\n                             </tr>\r\n                         ))}\r\n                     </tbody>\r\n                 </Table>\r\n             </div>\r\n \r\n-            {/* üîπ Modal para cria√ß√£o de cliente */}\r\n-            <ClientModal \r\n-                show={showModal} \r\n-                handleClose={() => setShowModal(false)} \r\n-                onClientCreated={handleClientCreated} \r\n-            />\r\n+            {/* Modal de cria√ß√£o/edi√ß√£o */}\r\n+            <ClienteModal show={showModal} handleClose={handleCloseModal} cliente={clienteSelecionado} onSave={handleSaveCliente} />\r\n         </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740487354205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,27 +43,12 @@\n         setClienteSelecionado(null);\r\n         setShowModal(false);\r\n     };\r\n \r\n-    // Fun√ß√£o para salvar um cliente (cria√ß√£o ou edi√ß√£o)\r\n-    const handleSaveCliente = async (clienteData) => {\r\n-        const method = clienteSelecionado ? \"PUT\" : \"POST\";\r\n-        const url = \"/api/admin/clientes\";\r\n-\r\n-        try {\r\n-            const response = await fetch(url, {\r\n-                method,\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify(clienteSelecionado ? { ...clienteData, id: clienteSelecionado.id } : clienteData),\r\n-            });\r\n-\r\n-            if (!response.ok) throw new Error(\"Erro ao salvar cliente\");\r\n-\r\n-            fetchClientes(); // Atualiza a lista de clientes\r\n-            handleCloseModal();\r\n-        } catch (err) {\r\n-            console.error(\"‚ùå Erro ao salvar cliente:\", err);\r\n-        }\r\n+    // ‚úÖ Corre√ß√£o: Atualiza a lista de clientes ap√≥s criar ou editar um cliente\r\n+    const handleClientCreated = () => {\r\n+        fetchClientes(); // Atualiza a tabela\r\n+        handleCloseModal(); // Fecha o modal\r\n     };\r\n \r\n     // Sele√ß√£o de m√∫ltiplos clientes\r\n     const handleCheckboxChange = (id) => {\r\n@@ -156,10 +141,10 @@\n                     </tbody>\r\n                 </Table>\r\n             </div>\r\n \r\n-            {/* Modal de cria√ß√£o/edi√ß√£o */}\r\n-            <ClienteModal show={showModal} handleClose={handleCloseModal} cliente={clienteSelecionado} onSave={handleSaveCliente} />\r\n+            {/* ‚úÖ Corre√ß√£o: Passando corretamente a fun√ß√£o handleClientCreated */}\r\n+            <ClienteModal show={showModal} handleClose={handleCloseModal} onClientCreated={handleClientCreated} cliente={clienteSelecionado} />\r\n         </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740487529053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n                                 <td>{cliente.nome}</td>\r\n                                 <td>{cliente.sobrenome}</td>\r\n                                 <td>{cliente.email}</td>\r\n                                 <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(cliente)}>Editar</Button>\r\n+                                    <Button variant=\"green\" size=\"sm\" onClick={() => handleOpenModal(cliente)}>Editar</Button>\r\n                                 </td>\r\n                             </tr>\r\n                         ))}\r\n                     </tbody>\r\n"
                }
            ],
            "date": 1740403925300,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, FormCheck, Row, Col } from \"react-bootstrap\";\r\nimport ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n\r\nconst ClientesPage = () => {\r\n    const [clientes, setClientes] = useState([]);\r\n    const [selectedClientes, setSelectedClientes] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchClientes = async () => {\r\n            try {\r\n                const response = await fetch(\"/api/admin/clientes\");\r\n                if (!response.ok) throw new Error(\"Erro ao buscar clientes\");\r\n\r\n                const data = await response.json();\r\n                setClientes(data);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchClientes();\r\n    }, []);\r\n\r\n    // Sele√ß√£o de m√∫ltiplos clientes\r\n    const handleCheckboxChange = (id) => {\r\n        setSelectedClientes((prevSelected) =>\r\n            prevSelected.includes(id) ? prevSelected.filter((cid) => cid !== id) : [...prevSelected, id]\r\n        );\r\n    };\r\n\r\n    // Sele√ß√£o de todos os clientes\r\n    const handleSelectAll = () => {\r\n        setSelectedClientes(selectedClientes.length === clientes.length ? [] : clientes.map((c) => c.id));\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"text-center\">Carregando clientes...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"text-center text-danger\">Erro ao carregar clientes: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <ComponentContainerCard id=\"gestao-clientes\" title=\"Gest√£o de Clientes\" description=\"Gerencie seus clientes.\">\r\n            {/* Bot√£o para criar novo cliente */}\r\n            <Row className=\"mb-3\">\r\n                <Col>\r\n                    <Button variant=\"success\">+ Criar Novo Cliente</Button>\r\n                </Col>\r\n                <Col className=\"text-end\">\r\n                    {selectedClientes.length > 0 && (\r\n                        <Button variant=\"danger\">Excluir Selecionados</Button>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Tabela de clientes */}\r\n            <div className=\"table-responsive\">\r\n                <Table striped borderless hover>\r\n                    <thead className=\"table-light\">\r\n                        <tr>\r\n                            <th scope=\"col\">\r\n                                <FormCheck \r\n                                    checked={selectedClientes.length === clientes.length}\r\n                                    onChange={handleSelectAll}\r\n                                />\r\n                            </th>\r\n                            <th scope=\"col\">Nome</th>\r\n                            <th scope=\"col\">Sobrenome</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">A√ß√µes</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {clientes.map((cliente) => (\r\n                            <tr key={cliente.id}>\r\n                                <td>\r\n                                    <FormCheck \r\n                                        checked={selectedClientes.includes(cliente.id)}\r\n                                        onChange={() => handleCheckboxChange(cliente.id)}\r\n                                    />\r\n                                </td>\r\n                                <td>{cliente.nome}</td>\r\n                                <td>{cliente.sobrenome}</td>\r\n                                <td>{cliente.email}</td>\r\n                                <td>\r\n                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </ComponentContainerCard>\r\n    );\r\n};\r\n\r\nexport default ClientesPage;\r\n"
        }
    ]
}