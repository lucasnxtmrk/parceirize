{
    "sourceFile": "src/app/(administrador)/admin-parceiro/page.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740404815692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740487786476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,31 +2,53 @@\n \r\n import React, { useState, useEffect } from \"react\";\r\n import { Button, Table, Row, Col, Image } from \"react-bootstrap\";\r\n import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n+import ParceiroModal from \"./components/ParceiroModal\"; // Importando o modal\r\n \r\n const ParceirosPage = () => {\r\n     const [parceiros, setParceiros] = useState([]);\r\n     const [loading, setLoading] = useState(true);\r\n     const [error, setError] = useState(null);\r\n+    const [showModal, setShowModal] = useState(false);\r\n+    const [parceiroSelecionado, setParceiroSelecionado] = useState(null);\r\n \r\n     useEffect(() => {\r\n-        const fetchParceiros = async () => {\r\n-            try {\r\n-                const response = await fetch(\"/api/admin/parceiros\");\r\n-                if (!response.ok) throw new Error(\"Erro ao buscar parceiros\");\r\n+        fetchParceiros();\r\n+    }, []);\r\n \r\n-                const data = await response.json();\r\n-                setParceiros(data);\r\n-                setLoading(false);\r\n-            } catch (err) {\r\n-                setError(err.message);\r\n-                setLoading(false);\r\n-            }\r\n-        };\r\n+    // ✅ Função para buscar parceiros\r\n+    const fetchParceiros = async () => {\r\n+        try {\r\n+            const response = await fetch(\"/api/admin/parceiros\");\r\n+            if (!response.ok) throw new Error(\"Erro ao buscar parceiros\");\r\n \r\n+            const data = await response.json();\r\n+            setParceiros(data);\r\n+            setLoading(false);\r\n+        } catch (err) {\r\n+            setError(err.message);\r\n+            setLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    // ✅ Abrir modal (criação ou edição)\r\n+    const handleOpenModal = (parceiro = null) => {\r\n+        setParceiroSelecionado(parceiro);\r\n+        setShowModal(true);\r\n+    };\r\n+\r\n+    // ✅ Fechar modal\r\n+    const handleCloseModal = () => {\r\n+        setParceiroSelecionado(null);\r\n+        setShowModal(false);\r\n+    };\r\n+\r\n+    // ✅ Atualiza a lista após criar ou editar um parceiro\r\n+    const handleParceiroCreated = () => {\r\n         fetchParceiros();\r\n-    }, []);\r\n+        handleCloseModal();\r\n+    };\r\n \r\n     if (loading) {\r\n         return <div className=\"text-center\">Carregando parceiros...</div>;\r\n     }\r\n@@ -39,9 +61,9 @@\n         <ComponentContainerCard id=\"gestao-parceiros\" title=\"Gestão de Parceiros\" description=\"Gerencie seus parceiros.\">\r\n             {/* Botão para criar novo parceiro */}\r\n             <Row className=\"mb-3\">\r\n                 <Col>\r\n-                    <Button variant=\"success\">+ Criar Novo Parceiro</Button>\r\n+                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Parceiro</Button>\r\n                 </Col>\r\n             </Row>\r\n \r\n             {/* Tabela de parceiros */}\r\n@@ -74,15 +96,18 @@\n                                     </div>\r\n                                 </td>\r\n                                 <td>{parceiro.email}</td>\r\n                                 <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n+                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(parceiro)}>Editar</Button>\r\n                                 </td>\r\n                             </tr>\r\n                         ))}\r\n                     </tbody>\r\n                 </Table>\r\n             </div>\r\n+\r\n+            {/* Modal para criar/editar parceiro */}\r\n+            <ParceiroModal show={showModal} handleClose={handleCloseModal} onParceiroCreated={handleParceiroCreated} parceiro={parceiroSelecionado} />\r\n         </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1740487860438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,114 +1,165 @@\n \"use client\";\r\n \r\n-import React, { useState, useEffect } from \"react\";\r\n-import { Button, Table, Row, Col, Image } from \"react-bootstrap\";\r\n-import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n-import ParceiroModal from \"./components/ParceiroModal\"; // Importando o modal\r\n+import React, { useState, useEffect, useCallback } from \"react\";\r\n+import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n+import { useForm, Controller } from \"react-hook-form\";\r\n+import { useDropzone } from \"react-dropzone\";\r\n \r\n-const ParceirosPage = () => {\r\n-    const [parceiros, setParceiros] = useState([]);\r\n-    const [loading, setLoading] = useState(true);\r\n+// Função para gerar um ID de parceiro único (6 caracteres alfanuméricos)\r\n+const generateRandomId = () => {\r\n+    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n+    let id = \"\";\r\n+    for (let i = 0; i < 6; i++) {\r\n+        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n+    }\r\n+    return id;\r\n+};\r\n+\r\n+// Função para verificar se o ID já existe no banco\r\n+const generateUniqueId = async () => {\r\n+    let newId;\r\n+    let exists = true;\r\n+\r\n+    while (exists) {\r\n+        newId = generateRandomId();\r\n+        try {\r\n+            const response = await fetch(`/api/admin/verify-parceiro?id=${newId}`);\r\n+            const data = await response.json();\r\n+            exists = data.exists;\r\n+        } catch (error) {\r\n+            console.error(\"Erro ao verificar ID do parceiro:\", error);\r\n+            exists = false; // Em caso de erro, assume que o ID não existe\r\n+        }\r\n+    }\r\n+\r\n+    return newId;\r\n+};\r\n+\r\n+const ParceiroModal = ({ show, handleClose, onParceiroCreated, parceiro }) => {\r\n+    const { control, handleSubmit, setValue, reset, watch } = useForm({\r\n+        defaultValues: {\r\n+            nome_empresa: \"\",\r\n+            email: \"\",\r\n+            foto: \"\",\r\n+        },\r\n+    });\r\n+\r\n+    const [loading, setLoading] = useState(false);\r\n     const [error, setError] = useState(null);\r\n-    const [showModal, setShowModal] = useState(false);\r\n-    const [parceiroSelecionado, setParceiroSelecionado] = useState(null);\r\n+    const [message, setMessage] = useState(null);\r\n \r\n+    // Observa a URL da foto para exibir o avatar corretamente\r\n+    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n+\r\n+    // Quando o modal abre, carrega os dados do parceiro (se estiver editando)\r\n     useEffect(() => {\r\n-        fetchParceiros();\r\n-    }, []);\r\n+        if (show) {\r\n+            reset(); // Reseta o formulário antes de preencher os dados\r\n \r\n-    // ✅ Função para buscar parceiros\r\n-    const fetchParceiros = async () => {\r\n+            if (parceiro) {\r\n+                setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n+                setValue(\"email\", parceiro.email);\r\n+                setValue(\"foto\", parceiro.foto);\r\n+            } else {\r\n+                setValue(\"foto\", \"/assets/images/users/dummy-avatar.jpg\"); // Imagem padrão\r\n+            }\r\n+        }\r\n+    }, [show, parceiro, setValue, reset]);\r\n+\r\n+    // Função para upload de imagem (React Dropzone)\r\n+    const onDrop = useCallback((acceptedFiles) => {\r\n+        const file = acceptedFiles[0];\r\n+        if (file) {\r\n+            const reader = new FileReader();\r\n+            reader.onloadend = () => {\r\n+                setValue(\"foto\", reader.result);\r\n+            };\r\n+            reader.readAsDataURL(file);\r\n+        }\r\n+    }, [setValue]);\r\n+\r\n+    const { getRootProps, getInputProps } = useDropzone({\r\n+        onDrop,\r\n+        accept: \"image/*\",\r\n+        multiple: false,\r\n+    });\r\n+\r\n+    // Função para criar ou editar parceiro\r\n+    const onSubmit = async (formData) => {\r\n+        setLoading(true);\r\n+        setError(null);\r\n+        setMessage(null);\r\n+\r\n+        const method = parceiro ? \"PUT\" : \"POST\";\r\n+        const url = \"/api/admin/parceiros\";\r\n+\r\n         try {\r\n-            const response = await fetch(\"/api/admin/parceiros\");\r\n-            if (!response.ok) throw new Error(\"Erro ao buscar parceiros\");\r\n+            const response = await fetch(url, {\r\n+                method,\r\n+                headers: { \"Content-Type\": \"application/json\" },\r\n+                body: JSON.stringify(parceiro ? { ...formData, id: parceiro.id } : formData),\r\n+            });\r\n \r\n             const data = await response.json();\r\n-            setParceiros(data);\r\n-            setLoading(false);\r\n+\r\n+            if (!response.ok) {\r\n+                throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n+            }\r\n+\r\n+            setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n+            onParceiroCreated();\r\n+            handleClose();\r\n         } catch (err) {\r\n             setError(err.message);\r\n+        } finally {\r\n             setLoading(false);\r\n         }\r\n     };\r\n \r\n-    // ✅ Abrir modal (criação ou edição)\r\n-    const handleOpenModal = (parceiro = null) => {\r\n-        setParceiroSelecionado(parceiro);\r\n-        setShowModal(true);\r\n-    };\r\n+    return (\r\n+        <Modal show={show} onHide={handleClose} centered>\r\n+            <Modal.Header closeButton>\r\n+                <Modal.Title>{parceiro ? \"Editar Parceiro\" : \"Criar Novo Parceiro\"}</Modal.Title>\r\n+            </Modal.Header>\r\n+            <Modal.Body>\r\n+                {error && <p className=\"text-danger\">{error}</p>}\r\n+                {message && <p className=\"text-success\">{message}</p>}\r\n \r\n-    // ✅ Fechar modal\r\n-    const handleCloseModal = () => {\r\n-        setParceiroSelecionado(null);\r\n-        setShowModal(false);\r\n-    };\r\n+                <form onSubmit={handleSubmit(onSubmit)}>\r\n+                    {/* Avatar com opção de upload */}\r\n+                    <div className=\"text-center mb-3\">\r\n+                        <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\r\n+                            <input {...getInputProps()} />\r\n+                            <img src={fotoUrl} alt=\"Foto do Parceiro\" className=\"avatar-lg rounded-circle\" />\r\n+                        </div>\r\n+                    </div>\r\n \r\n-    // ✅ Atualiza a lista após criar ou editar um parceiro\r\n-    const handleParceiroCreated = () => {\r\n-        fetchParceiros();\r\n-        handleCloseModal();\r\n-    };\r\n+                    {/* Nome da Empresa */}\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>Nome da Empresa</FormLabel>\r\n+                        <Controller name=\"nome_empresa\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-    if (loading) {\r\n-        return <div className=\"text-center\">Carregando parceiros...</div>;\r\n-    }\r\n+                    {/* E-mail */}\r\n+                    <FormGroup className=\"mt-3\">\r\n+                        <FormLabel>E-mail</FormLabel>\r\n+                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n+                    </FormGroup>\r\n \r\n-    if (error) {\r\n-        return <div className=\"text-center text-danger\">Erro ao carregar parceiros: {error}</div>;\r\n-    }\r\n+                    {/* Campo Oculto da Foto */}\r\n+                    <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\r\n \r\n-    return (\r\n-        <ComponentContainerCard id=\"gestao-parceiros\" title=\"Gestão de Parceiros\" description=\"Gerencie seus parceiros.\">\r\n-            {/* Botão para criar novo parceiro */}\r\n-            <Row className=\"mb-3\">\r\n-                <Col>\r\n-                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Parceiro</Button>\r\n-                </Col>\r\n-            </Row>\r\n-\r\n-            {/* Tabela de parceiros */}\r\n-            <div className=\"table-responsive\">\r\n-                <Table hover align=\"center\">\r\n-                    <thead className=\"table-light\">\r\n-                        <tr>\r\n-                            <th scope=\"col\">Parceiro</th>\r\n-                            <th scope=\"col\">Email</th>\r\n-                            <th scope=\"col\">Ações</th>\r\n-                        </tr>\r\n-                    </thead>\r\n-                    <tbody>\r\n-                        {parceiros.map((parceiro) => (\r\n-                            <tr key={parceiro.id}>\r\n-                                <td>\r\n-                                    <div className=\"d-flex align-items-center gap-2\">\r\n-                                        {parceiro.foto && (\r\n-                                            <Image\r\n-                                                src={parceiro.foto}\r\n-                                                alt=\"Avatar do Parceiro\"\r\n-                                                className=\"avatar-sm rounded-circle\"\r\n-                                                width={40}\r\n-                                                height={40}\r\n-                                            />\r\n-                                        )}\r\n-                                        <div className=\"d-block\">\r\n-                                            <h6 className=\"mb-0\">{parceiro.nome_empresa}</h6>\r\n-                                        </div>\r\n-                                    </div>\r\n-                                </td>\r\n-                                <td>{parceiro.email}</td>\r\n-                                <td>\r\n-                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(parceiro)}>Editar</Button>\r\n-                                </td>\r\n-                            </tr>\r\n-                        ))}\r\n-                    </tbody>\r\n-                </Table>\r\n-            </div>\r\n-\r\n-            {/* Modal para criar/editar parceiro */}\r\n-            <ParceiroModal show={showModal} handleClose={handleCloseModal} onParceiroCreated={handleParceiroCreated} parceiro={parceiroSelecionado} />\r\n-        </ComponentContainerCard>\r\n+                    {/* Botões */}\r\n+                    <div className=\"d-flex justify-content-end mt-4\">\r\n+                        <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n+                        <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n+                            {loading ? \"Salvando...\" : parceiro ? \"Atualizar\" : \"Criar Parceiro\"}\r\n+                        </Button>\r\n+                    </div>\r\n+                </form>\r\n+            </Modal.Body>\r\n+        </Modal>\r\n     );\r\n };\r\n \r\n-export default ParceirosPage;\r\n+export default ParceiroModal;\r\n"
                },
                {
                    "date": 1740487876858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,165 +1,114 @@\n \"use client\";\r\n \r\n-import React, { useState, useEffect, useCallback } from \"react\";\r\n-import { Button, Modal, Form, FormControl, FormGroup, FormLabel } from \"react-bootstrap\";\r\n-import { useForm, Controller } from \"react-hook-form\";\r\n-import { useDropzone } from \"react-dropzone\";\r\n+import React, { useState, useEffect } from \"react\";\r\n+import { Button, Table, Row, Col, Image } from \"react-bootstrap\";\r\n+import ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n+import ParceiroModal from \"./components/ParceiroModal\"; // Importando o modal\r\n \r\n-// Função para gerar um ID de parceiro único (6 caracteres alfanuméricos)\r\n-const generateRandomId = () => {\r\n-    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n-    let id = \"\";\r\n-    for (let i = 0; i < 6; i++) {\r\n-        id += chars.charAt(Math.floor(Math.random() * chars.length));\r\n-    }\r\n-    return id;\r\n-};\r\n-\r\n-// Função para verificar se o ID já existe no banco\r\n-const generateUniqueId = async () => {\r\n-    let newId;\r\n-    let exists = true;\r\n-\r\n-    while (exists) {\r\n-        newId = generateRandomId();\r\n-        try {\r\n-            const response = await fetch(`/api/admin/verify-parceiro?id=${newId}`);\r\n-            const data = await response.json();\r\n-            exists = data.exists;\r\n-        } catch (error) {\r\n-            console.error(\"Erro ao verificar ID do parceiro:\", error);\r\n-            exists = false; // Em caso de erro, assume que o ID não existe\r\n-        }\r\n-    }\r\n-\r\n-    return newId;\r\n-};\r\n-\r\n-const ParceiroModal = ({ show, handleClose, onParceiroCreated, parceiro }) => {\r\n-    const { control, handleSubmit, setValue, reset, watch } = useForm({\r\n-        defaultValues: {\r\n-            nome_empresa: \"\",\r\n-            email: \"\",\r\n-            foto: \"\",\r\n-        },\r\n-    });\r\n-\r\n-    const [loading, setLoading] = useState(false);\r\n+const ParceirosPage = () => {\r\n+    const [parceiros, setParceiros] = useState([]);\r\n+    const [loading, setLoading] = useState(true);\r\n     const [error, setError] = useState(null);\r\n-    const [message, setMessage] = useState(null);\r\n+    const [showModal, setShowModal] = useState(false);\r\n+    const [parceiroSelecionado, setParceiroSelecionado] = useState(null);\r\n \r\n-    // Observa a URL da foto para exibir o avatar corretamente\r\n-    const fotoUrl = watch(\"foto\") || \"/assets/images/users/dummy-avatar.jpg\";\r\n-\r\n-    // Quando o modal abre, carrega os dados do parceiro (se estiver editando)\r\n     useEffect(() => {\r\n-        if (show) {\r\n-            reset(); // Reseta o formulário antes de preencher os dados\r\n+        fetchParceiros();\r\n+    }, []);\r\n \r\n-            if (parceiro) {\r\n-                setValue(\"nome_empresa\", parceiro.nome_empresa);\r\n-                setValue(\"email\", parceiro.email);\r\n-                setValue(\"foto\", parceiro.foto);\r\n-            } else {\r\n-                setValue(\"foto\", \"/assets/images/users/dummy-avatar.jpg\"); // Imagem padrão\r\n-            }\r\n-        }\r\n-    }, [show, parceiro, setValue, reset]);\r\n-\r\n-    // Função para upload de imagem (React Dropzone)\r\n-    const onDrop = useCallback((acceptedFiles) => {\r\n-        const file = acceptedFiles[0];\r\n-        if (file) {\r\n-            const reader = new FileReader();\r\n-            reader.onloadend = () => {\r\n-                setValue(\"foto\", reader.result);\r\n-            };\r\n-            reader.readAsDataURL(file);\r\n-        }\r\n-    }, [setValue]);\r\n-\r\n-    const { getRootProps, getInputProps } = useDropzone({\r\n-        onDrop,\r\n-        accept: \"image/*\",\r\n-        multiple: false,\r\n-    });\r\n-\r\n-    // Função para criar ou editar parceiro\r\n-    const onSubmit = async (formData) => {\r\n-        setLoading(true);\r\n-        setError(null);\r\n-        setMessage(null);\r\n-\r\n-        const method = parceiro ? \"PUT\" : \"POST\";\r\n-        const url = \"/api/admin/parceiros\";\r\n-\r\n+    // ✅ Função para buscar parceiros\r\n+    const fetchParceiros = async () => {\r\n         try {\r\n-            const response = await fetch(url, {\r\n-                method,\r\n-                headers: { \"Content-Type\": \"application/json\" },\r\n-                body: JSON.stringify(parceiro ? { ...formData, id: parceiro.id } : formData),\r\n-            });\r\n+            const response = await fetch(\"/api/admin/parceiros\");\r\n+            if (!response.ok) throw new Error(\"Erro ao buscar parceiros\");\r\n \r\n             const data = await response.json();\r\n-\r\n-            if (!response.ok) {\r\n-                throw new Error(data.error || \"Erro ao salvar parceiro\");\r\n-            }\r\n-\r\n-            setMessage(parceiro ? \"Parceiro atualizado com sucesso!\" : \"Parceiro criado com sucesso!\");\r\n-            onParceiroCreated();\r\n-            handleClose();\r\n+            setParceiros(data);\r\n+            setLoading(false);\r\n         } catch (err) {\r\n             setError(err.message);\r\n-        } finally {\r\n             setLoading(false);\r\n         }\r\n     };\r\n \r\n-    return (\r\n-        <Modal show={show} onHide={handleClose} centered>\r\n-            <Modal.Header closeButton>\r\n-                <Modal.Title>{parceiro ? \"Editar Parceiro\" : \"Criar Novo Parceiro\"}</Modal.Title>\r\n-            </Modal.Header>\r\n-            <Modal.Body>\r\n-                {error && <p className=\"text-danger\">{error}</p>}\r\n-                {message && <p className=\"text-success\">{message}</p>}\r\n+    // ✅ Abrir modal (criação ou edição)\r\n+    const handleOpenModal = (parceiro = null) => {\r\n+        setParceiroSelecionado(parceiro);\r\n+        setShowModal(true);\r\n+    };\r\n \r\n-                <form onSubmit={handleSubmit(onSubmit)}>\r\n-                    {/* Avatar com opção de upload */}\r\n-                    <div className=\"text-center mb-3\">\r\n-                        <div {...getRootProps()} style={{ cursor: \"pointer\" }}>\r\n-                            <input {...getInputProps()} />\r\n-                            <img src={fotoUrl} alt=\"Foto do Parceiro\" className=\"avatar-lg rounded-circle\" />\r\n-                        </div>\r\n-                    </div>\r\n+    // ✅ Fechar modal\r\n+    const handleCloseModal = () => {\r\n+        setParceiroSelecionado(null);\r\n+        setShowModal(false);\r\n+    };\r\n \r\n-                    {/* Nome da Empresa */}\r\n-                    <FormGroup className=\"mt-3\">\r\n-                        <FormLabel>Nome da Empresa</FormLabel>\r\n-                        <Controller name=\"nome_empresa\" control={control} render={({ field }) => <FormControl type=\"text\" {...field} required />} />\r\n-                    </FormGroup>\r\n+    // ✅ Atualiza a lista após criar ou editar um parceiro\r\n+    const handleParceiroCreated = () => {\r\n+        fetchParceiros();\r\n+        handleCloseModal();\r\n+    };\r\n \r\n-                    {/* E-mail */}\r\n-                    <FormGroup className=\"mt-3\">\r\n-                        <FormLabel>E-mail</FormLabel>\r\n-                        <Controller name=\"email\" control={control} render={({ field }) => <FormControl type=\"email\" {...field} required />} />\r\n-                    </FormGroup>\r\n+    if (loading) {\r\n+        return <div className=\"text-center\">Carregando parceiros...</div>;\r\n+    }\r\n \r\n-                    {/* Campo Oculto da Foto */}\r\n-                    <Controller name=\"foto\" control={control} render={({ field }) => <input type=\"hidden\" {...field} />} />\r\n+    if (error) {\r\n+        return <div className=\"text-center text-danger\">Erro ao carregar parceiros: {error}</div>;\r\n+    }\r\n \r\n-                    {/* Botões */}\r\n-                    <div className=\"d-flex justify-content-end mt-4\">\r\n-                        <Button variant=\"secondary\" onClick={handleClose} disabled={loading}>Cancelar</Button>\r\n-                        <Button variant=\"primary\" type=\"submit\" className=\"ms-2\" disabled={loading}>\r\n-                            {loading ? \"Salvando...\" : parceiro ? \"Atualizar\" : \"Criar Parceiro\"}\r\n-                        </Button>\r\n-                    </div>\r\n-                </form>\r\n-            </Modal.Body>\r\n-        </Modal>\r\n+    return (\r\n+        <ComponentContainerCard id=\"gestao-parceiros\" title=\"Gestão de Parceiros\" description=\"Gerencie seus parceiros.\">\r\n+            {/* Botão para criar novo parceiro */}\r\n+            <Row className=\"mb-3\">\r\n+                <Col>\r\n+                    <Button variant=\"success\" onClick={() => handleOpenModal()}>+ Criar Novo Parceiro</Button>\r\n+                </Col>\r\n+            </Row>\r\n+\r\n+            {/* Tabela de parceiros */}\r\n+            <div className=\"table-responsive\">\r\n+                <Table hover align=\"center\">\r\n+                    <thead className=\"table-light\">\r\n+                        <tr>\r\n+                            <th scope=\"col\">Parceiro</th>\r\n+                            <th scope=\"col\">Email</th>\r\n+                            <th scope=\"col\">Ações</th>\r\n+                        </tr>\r\n+                    </thead>\r\n+                    <tbody>\r\n+                        {parceiros.map((parceiro) => (\r\n+                            <tr key={parceiro.id}>\r\n+                                <td>\r\n+                                    <div className=\"d-flex align-items-center gap-2\">\r\n+                                        {parceiro.foto && (\r\n+                                            <Image\r\n+                                                src={parceiro.foto}\r\n+                                                alt=\"Avatar do Parceiro\"\r\n+                                                className=\"avatar-sm rounded-circle\"\r\n+                                                width={40}\r\n+                                                height={40}\r\n+                                            />\r\n+                                        )}\r\n+                                        <div className=\"d-block\">\r\n+                                            <h6 className=\"mb-0\">{parceiro.nome_empresa}</h6>\r\n+                                        </div>\r\n+                                    </div>\r\n+                                </td>\r\n+                                <td>{parceiro.email}</td>\r\n+                                <td>\r\n+                                    <Button variant=\"primary\" size=\"sm\" onClick={() => handleOpenModal(parceiro)}>Editar</Button>\r\n+                                </td>\r\n+                            </tr>\r\n+                        ))}\r\n+                    </tbody>\r\n+                </Table>\r\n+            </div>\r\n+\r\n+            {/* Modal para criar/editar parceiro */}\r\n+            <ParceiroModal show={showModal} handleClose={handleCloseModal} onParceiroCreated={handleParceiroCreated} parceiro={parceiroSelecionado} />\r\n+        </ComponentContainerCard>\r\n     );\r\n };\r\n \r\n-export default ParceiroModal;\r\n+export default ParceirosPage;\r\n"
                },
                {
                    "date": 1740490661259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,14 +82,15 @@\n                                 <td>\r\n                                     <div className=\"d-flex align-items-center gap-2\">\r\n                                         {parceiro.foto && (\r\n                                             <Image\r\n-                                                src={parceiro.foto}\r\n-                                                alt=\"Avatar do Parceiro\"\r\n-                                                className=\"avatar-sm rounded-circle\"\r\n-                                                width={40}\r\n-                                                height={40}\r\n-                                            />\r\n+                                            src={parceiro.foto ? parceiro.foto : \"/assets/images/users/dummy-avatar.jpg\"}\r\n+                                            alt=\"Avatar do Parceiro\"\r\n+                                            className=\"avatar-sm rounded-circle\"\r\n+                                            width={40}\r\n+                                            height={40}\r\n+                                        />\r\n+                                        \r\n                                         )}\r\n                                         <div className=\"d-block\">\r\n                                             <h6 className=\"mb-0\">{parceiro.nome_empresa}</h6>\r\n                                         </div>\r\n"
                }
            ],
            "date": 1740404815691,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button, Table, Row, Col, Image } from \"react-bootstrap\";\r\nimport ComponentContainerCard from \"@/components/ComponentContainerCard\";\r\n\r\nconst ParceirosPage = () => {\r\n    const [parceiros, setParceiros] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchParceiros = async () => {\r\n            try {\r\n                const response = await fetch(\"/api/admin/parceiros\");\r\n                if (!response.ok) throw new Error(\"Erro ao buscar parceiros\");\r\n\r\n                const data = await response.json();\r\n                setParceiros(data);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchParceiros();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <div className=\"text-center\">Carregando parceiros...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"text-center text-danger\">Erro ao carregar parceiros: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <ComponentContainerCard id=\"gestao-parceiros\" title=\"Gestão de Parceiros\" description=\"Gerencie seus parceiros.\">\r\n            {/* Botão para criar novo parceiro */}\r\n            <Row className=\"mb-3\">\r\n                <Col>\r\n                    <Button variant=\"success\">+ Criar Novo Parceiro</Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Tabela de parceiros */}\r\n            <div className=\"table-responsive\">\r\n                <Table hover align=\"center\">\r\n                    <thead className=\"table-light\">\r\n                        <tr>\r\n                            <th scope=\"col\">Parceiro</th>\r\n                            <th scope=\"col\">Email</th>\r\n                            <th scope=\"col\">Ações</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {parceiros.map((parceiro) => (\r\n                            <tr key={parceiro.id}>\r\n                                <td>\r\n                                    <div className=\"d-flex align-items-center gap-2\">\r\n                                        {parceiro.foto && (\r\n                                            <Image\r\n                                                src={parceiro.foto}\r\n                                                alt=\"Avatar do Parceiro\"\r\n                                                className=\"avatar-sm rounded-circle\"\r\n                                                width={40}\r\n                                                height={40}\r\n                                            />\r\n                                        )}\r\n                                        <div className=\"d-block\">\r\n                                            <h6 className=\"mb-0\">{parceiro.nome_empresa}</h6>\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td>{parceiro.email}</td>\r\n                                <td>\r\n                                    <Button variant=\"primary\" size=\"sm\">Editar</Button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </ComponentContainerCard>\r\n    );\r\n};\r\n\r\nexport default ParceirosPage;\r\n"
        }
    ]
}