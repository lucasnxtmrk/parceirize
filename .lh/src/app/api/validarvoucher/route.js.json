{
    "sourceFile": "src/app/api/validarVoucher/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1740335932884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740336289513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }\r\n \r\n     // 5Ô∏è‚É£ Registrar o uso do voucher\r\n     const registrarUsoQuery = `\r\n-      INSERT INTO utilizacoes_voucher (cliente_id, voucher_id, data_utilizacao)\r\n+      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao)\r\n       VALUES ($1, $2, NOW())\r\n     `;\r\n     await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id]);\r\n \r\n"
                },
                {
                    "date": 1740336323451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,14 +58,14 @@\n         return new Response(JSON.stringify({ error: \"O cliente s√≥ pode usar um voucher a cada 30 dias.\" }), { status: 400 });\r\n       }\r\n     }\r\n \r\n-    // 5Ô∏è‚É£ Registrar o uso do voucher\r\n+    // 5Ô∏è‚É£ Registrar o uso do voucher na tabela `voucher_utilizados`\r\n     const registrarUsoQuery = `\r\n-      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao)\r\n-      VALUES ($1, $2, NOW())\r\n+      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao, desconto)\r\n+      VALUES ($1, $2, NOW(), $3)\r\n     `;\r\n-    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id]);\r\n+    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.desconto]);\r\n \r\n     // 6Ô∏è‚É£ Atualizar a data da √∫ltima utiliza√ß√£o do cliente\r\n     const atualizarClienteQuery = `\r\n       UPDATE clientes SET data_ultimo_voucher = NOW() WHERE id = $1\r\n"
                },
                {
                    "date": 1741206324218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n-import { options } from \"@/app/api/auth/[...nextauth]/options\"; // Caminho correto do NextAuth\r\n+import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n@@ -27,11 +27,11 @@\n     }\r\n \r\n     const cliente = clienteResult.rows[0];\r\n \r\n-    // 2Ô∏è‚É£ Verificar se o voucher existe e ainda est√° v√°lido\r\n+    // 2Ô∏è‚É£ Verificar se o voucher existe e est√° ativo\r\n     const voucherQuery = `\r\n-      SELECT v.id AS voucher_id, v.desconto, v.data_criacao, v.parceiro_id, p.email AS parceiro_email\r\n+      SELECT v.id AS voucher_id, v.desconto, v.data_criacao, v.limite_uso, v.parceiro_id, p.email AS parceiro_email\r\n       FROM vouchers v\r\n       INNER JOIN parceiros p ON v.parceiro_id = p.id\r\n       WHERE v.codigo = $1\r\n     `;\r\n@@ -47,27 +47,33 @@\n     if (voucher.parceiro_email !== session.user.email) {\r\n       return new Response(JSON.stringify({ error: \"Voc√™ n√£o tem permiss√£o para validar este voucher.\" }), { status: 403 });\r\n     }\r\n \r\n-    // 4Ô∏è‚É£ Verificar se o cliente usou outro voucher nos √∫ltimos 30 dias\r\n-    if (cliente.data_ultimo_voucher) {\r\n-      const ultimaUtilizacao = new Date(cliente.data_ultimo_voucher);\r\n-      const hoje = new Date();\r\n-      const diffDias = Math.floor((hoje - ultimaUtilizacao) / (1000 * 60 * 60 * 24));\r\n+    // 4Ô∏è‚É£ Verificar se o cliente j√° utilizou este voucher nos √∫ltimos 30 dias\r\n+    if (voucher.limite_uso !== null) {\r\n+      const usoQuery = `\r\n+        SELECT COUNT(*) AS total_uso\r\n+        FROM voucher_utilizados\r\n+        WHERE cliente_id = $1 AND voucher_id = $2 AND data_utilizacao >= NOW() - INTERVAL '30 days'\r\n+      `;\r\n+      const usoResult = await pool.query(usoQuery, [cliente.id, voucher.voucher_id]);\r\n+      const totalUsos = parseInt(usoResult.rows[0].total_uso, 10);\r\n \r\n-      if (diffDias < 30) {\r\n-        return new Response(JSON.stringify({ error: \"O cliente s√≥ pode usar um voucher a cada 30 dias.\" }), { status: 400 });\r\n+      console.log(`üéØ O cliente j√° utilizou este voucher ${totalUsos} vezes. Limite: ${voucher.limite_uso}`);\r\n+\r\n+      if (totalUsos >= voucher.limite_uso) {\r\n+        return new Response(JSON.stringify({ error: \"Limite de uso do voucher atingido nos √∫ltimos 30 dias.\" }), { status: 403 });\r\n       }\r\n     }\r\n \r\n     // 5Ô∏è‚É£ Registrar o uso do voucher na tabela `voucher_utilizados`\r\n     const registrarUsoQuery = `\r\n-      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao, desconto)\r\n-      VALUES ($1, $2, NOW(), $3)\r\n+      INSERT INTO voucher_utilizados (cliente_id, voucher_id, parceiro_id, data_utilizacao, desconto)\r\n+      VALUES ($1, $2, $3, NOW(), $4)\r\n     `;\r\n-    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.desconto]);\r\n+    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.parceiro_id, voucher.desconto]);\r\n \r\n-    // 6Ô∏è‚É£ Atualizar a data da √∫ltima utiliza√ß√£o do cliente\r\n+    // 6Ô∏è‚É£ Atualizar a data do √∫ltimo uso do cliente\r\n     const atualizarClienteQuery = `\r\n       UPDATE clientes SET data_ultimo_voucher = NOW() WHERE id = $1\r\n     `;\r\n     await pool.query(atualizarClienteQuery, [cliente.id]);\r\n"
                },
                {
                    "date": 1741289807842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     const { clientId, couponCode } = await req.json();\r\n \r\n     console.log(`üì° Validando voucher ${couponCode} para cliente ${clientId}...`);\r\n \r\n-    // 1Ô∏è‚É£ Verificar se o ID da carteirinha do cliente existe\r\n+    // 1Ô∏è‚É£ Verificar se o cliente existe\r\n     const clienteQuery = `SELECT id, data_ultimo_voucher FROM clientes WHERE id_carteirinha = $1`;\r\n     const clienteResult = await pool.query(clienteQuery, [clientId]);\r\n \r\n     if (clienteResult.rows.length === 0) {\r\n@@ -27,9 +27,9 @@\n     }\r\n \r\n     const cliente = clienteResult.rows[0];\r\n \r\n-    // 2Ô∏è‚É£ Verificar se o voucher existe e est√° ativo\r\n+    // 2Ô∏è‚É£ Verificar se o voucher existe e pertence ao parceiro logado\r\n     const voucherQuery = `\r\n       SELECT v.id AS voucher_id, v.desconto, v.data_criacao, v.limite_uso, v.parceiro_id, p.email AS parceiro_email\r\n       FROM vouchers v\r\n       INNER JOIN parceiros p ON v.parceiro_id = p.id\r\n@@ -47,9 +47,9 @@\n     if (voucher.parceiro_email !== session.user.email) {\r\n       return new Response(JSON.stringify({ error: \"Voc√™ n√£o tem permiss√£o para validar este voucher.\" }), { status: 403 });\r\n     }\r\n \r\n-    // 4Ô∏è‚É£ Verificar se o cliente j√° utilizou este voucher nos √∫ltimos 30 dias\r\n+    // 4Ô∏è‚É£ Verificar se o cliente j√° utilizou este voucher nos √∫ltimos 30 dias (se houver limite)\r\n     if (voucher.limite_uso !== null) {\r\n       const usoQuery = `\r\n         SELECT COUNT(*) AS total_uso\r\n         FROM voucher_utilizados\r\n@@ -64,14 +64,14 @@\n         return new Response(JSON.stringify({ error: \"Limite de uso do voucher atingido nos √∫ltimos 30 dias.\" }), { status: 403 });\r\n       }\r\n     }\r\n \r\n-    // 5Ô∏è‚É£ Registrar o uso do voucher na tabela `voucher_utilizados`\r\n+    // 5Ô∏è‚É£ Registrar o uso do voucher (SEM parceiro_id)\r\n     const registrarUsoQuery = `\r\n-      INSERT INTO voucher_utilizados (cliente_id, voucher_id, parceiro_id, data_utilizacao, desconto)\r\n-      VALUES ($1, $2, $3, NOW(), $4)\r\n+      INSERT INTO voucher_utilizados (cliente_id, voucher_id, data_utilizacao, desconto)\r\n+      VALUES ($1, $2, NOW(), $3)\r\n     `;\r\n-    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.parceiro_id, voucher.desconto]);\r\n+    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id, voucher.desconto]);\r\n \r\n     // 6Ô∏è‚É£ Atualizar a data do √∫ltimo uso do cliente\r\n     const atualizarClienteQuery = `\r\n       UPDATE clientes SET data_ultimo_voucher = NOW() WHERE id = $1\r\n"
                }
            ],
            "date": 1740335932884,
            "name": "Commit-0",
            "content": "import { Pool } from \"pg\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { options } from \"@/app/api/auth/[...nextauth]/options\"; // Caminho correto do NextAuth\r\n\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"parceiro\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { clientId, couponCode } = await req.json();\r\n\r\n    console.log(`üì° Validando voucher ${couponCode} para cliente ${clientId}...`);\r\n\r\n    // 1Ô∏è‚É£ Verificar se o ID da carteirinha do cliente existe\r\n    const clienteQuery = `SELECT id, data_ultimo_voucher FROM clientes WHERE id_carteirinha = $1`;\r\n    const clienteResult = await pool.query(clienteQuery, [clientId]);\r\n\r\n    if (clienteResult.rows.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"Cliente n√£o encontrado.\" }), { status: 404 });\r\n    }\r\n\r\n    const cliente = clienteResult.rows[0];\r\n\r\n    // 2Ô∏è‚É£ Verificar se o voucher existe e ainda est√° v√°lido\r\n    const voucherQuery = `\r\n      SELECT v.id AS voucher_id, v.desconto, v.data_criacao, v.parceiro_id, p.email AS parceiro_email\r\n      FROM vouchers v\r\n      INNER JOIN parceiros p ON v.parceiro_id = p.id\r\n      WHERE v.codigo = $1\r\n    `;\r\n    const voucherResult = await pool.query(voucherQuery, [couponCode]);\r\n\r\n    if (voucherResult.rows.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"Voucher inv√°lido ou inexistente.\" }), { status: 404 });\r\n    }\r\n\r\n    const voucher = voucherResult.rows[0];\r\n\r\n    // 3Ô∏è‚É£ Verificar se o voucher pertence ao parceiro logado\r\n    if (voucher.parceiro_email !== session.user.email) {\r\n      return new Response(JSON.stringify({ error: \"Voc√™ n√£o tem permiss√£o para validar este voucher.\" }), { status: 403 });\r\n    }\r\n\r\n    // 4Ô∏è‚É£ Verificar se o cliente usou outro voucher nos √∫ltimos 30 dias\r\n    if (cliente.data_ultimo_voucher) {\r\n      const ultimaUtilizacao = new Date(cliente.data_ultimo_voucher);\r\n      const hoje = new Date();\r\n      const diffDias = Math.floor((hoje - ultimaUtilizacao) / (1000 * 60 * 60 * 24));\r\n\r\n      if (diffDias < 30) {\r\n        return new Response(JSON.stringify({ error: \"O cliente s√≥ pode usar um voucher a cada 30 dias.\" }), { status: 400 });\r\n      }\r\n    }\r\n\r\n    // 5Ô∏è‚É£ Registrar o uso do voucher\r\n    const registrarUsoQuery = `\r\n      INSERT INTO utilizacoes_voucher (cliente_id, voucher_id, data_utilizacao)\r\n      VALUES ($1, $2, NOW())\r\n    `;\r\n    await pool.query(registrarUsoQuery, [cliente.id, voucher.voucher_id]);\r\n\r\n    // 6Ô∏è‚É£ Atualizar a data da √∫ltima utiliza√ß√£o do cliente\r\n    const atualizarClienteQuery = `\r\n      UPDATE clientes SET data_ultimo_voucher = NOW() WHERE id = $1\r\n    `;\r\n    await pool.query(atualizarClienteQuery, [cliente.id]);\r\n\r\n    console.log(`‚úÖ Voucher ${couponCode} validado para cliente ${clientId}`);\r\n\r\n    return new Response(JSON.stringify({ success: true, message: \"Voucher validado com sucesso!\" }), { status: 200 });\r\n\r\n  } catch (error) {\r\n    console.error(\"‚ùå Erro na valida√ß√£o do voucher:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro interno ao validar voucher.\" }), { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}