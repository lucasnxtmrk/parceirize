{
    "sourceFile": "src/app/api/admin/parceiros/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1740404920158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740488153830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,21 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n-import { options } from \"@/app/api/auth/[...nextauth]/options\"; // Configuração do NextAuth\r\n+import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n+import bcrypt from \"bcryptjs\"; // Para criptografar senhas\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n \r\n+// Função para gerar código do voucher baseado no nome da empresa\r\n+const generateVoucherCode = (nomeEmpresa) => {\r\n+  const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 4);\r\n+  const randomCode = Math.floor(1000 + Math.random() * 9000); // Gera um número aleatório de 4 dígitos\r\n+  return `${formattedName}-${randomCode}`;\r\n+};\r\n+\r\n+// ✅ LISTAR PARCEIROS (GET)\r\n export async function GET(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -15,9 +24,9 @@\n     }\r\n \r\n     console.log(\"📡 Buscando lista de parceiros...\");\r\n \r\n-    const result = await pool.query(\"SELECT id, nome_empresa, email, foto FROM parceiros\");\r\n+    const result = await pool.query(\"SELECT id, nome_empresa, email, foto, desconto FROM parceiros\");\r\n \r\n     return new Response(JSON.stringify(result.rows), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n@@ -28,30 +37,62 @@\n     return new Response(JSON.stringify({ error: \"Erro ao buscar parceiros\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ✅ CRIAR PARCEIRO (POST)\r\n export async function POST(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n-    const { nome_empresa, email, senha, foto } = await req.json();\r\n+    const { nome_empresa, email, senha, foto, desconto } = await req.json();\r\n \r\n-    if (!nome_empresa || !email || !senha) {\r\n-      return new Response(JSON.stringify({ error: \"Nome, email e senha são obrigatórios\" }), { status: 400 });\r\n+    if (!nome_empresa || !email || !senha || !desconto) {\r\n+      return new Response(JSON.stringify({ error: \"Todos os campos são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Criando novo parceiro:\", email);\r\n \r\n-    const result = await pool.query(\r\n-      \"INSERT INTO parceiros (nome_empresa, email, senha, foto, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome_empresa, email, foto\",\r\n-      [nome_empresa, email, senha, foto || \"/assets/images/users/default-avatar.jpg\"]\r\n+    // Verifica se o e-mail já está cadastrado\r\n+    const emailCheck = await pool.query(\"SELECT id FROM parceiros WHERE email = $1\", [email]);\r\n+    if (emailCheck.rows.length > 0) {\r\n+      return new Response(JSON.stringify({ error: \"E-mail já cadastrado.\" }), { status: 409 });\r\n+    }\r\n+\r\n+    // Criptografa a senha antes de salvar\r\n+    const senhaHash = await bcrypt.hash(senha, 10);\r\n+\r\n+    // Gerar um código de voucher único\r\n+    let voucherCode = generateVoucherCode(nome_empresa);\r\n+    let voucherExists = true;\r\n+\r\n+    while (voucherExists) {\r\n+      const checkVoucher = await pool.query(\"SELECT id FROM vouchers WHERE codigo = $1\", [voucherCode]);\r\n+      if (checkVoucher.rows.length === 0) {\r\n+        voucherExists = false;\r\n+      } else {\r\n+        voucherCode = generateVoucherCode(nome_empresa); // Gera um novo se já existir\r\n+      }\r\n+    }\r\n+\r\n+    // Criar parceiro no banco de dados\r\n+    const parceiroResult = await pool.query(\r\n+      \"INSERT INTO parceiros (nome_empresa, email, senha, foto, desconto, data_criacao) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING id, nome_empresa, email, foto, desconto\",\r\n+      [nome_empresa, email, senhaHash, foto || \"/assets/images/users/default-avatar.jpg\", desconto]\r\n     );\r\n \r\n-    return new Response(JSON.stringify({ success: true, parceiro: result.rows[0] }), {\r\n+    const parceiro = parceiroResult.rows[0];\r\n+\r\n+    // Criar voucher no banco de dados\r\n+    await pool.query(\r\n+      \"INSERT INTO vouchers (codigo, desconto, parceiro_id, data_criacao) VALUES ($1, $2, $3, NOW())\",\r\n+      [voucherCode, desconto, parceiro.id]\r\n+    );\r\n+\r\n+    return new Response(JSON.stringify({ success: true, parceiro }), {\r\n       status: 201,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n \r\n@@ -60,27 +101,28 @@\n     return new Response(JSON.stringify({ error: \"Erro ao criar parceiro\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ✅ ATUALIZAR PARCEIRO (PUT)\r\n export async function PUT(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n-    const { id, nome_empresa, email, foto } = await req.json();\r\n+    const { id, nome_empresa, email, foto, desconto } = await req.json();\r\n \r\n-    if (!id || !nome_empresa || !email) {\r\n-      return new Response(JSON.stringify({ error: \"ID, Nome e Email são obrigatórios\" }), { status: 400 });\r\n+    if (!id || !nome_empresa || !email || !desconto) {\r\n+      return new Response(JSON.stringify({ error: \"Todos os campos são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n     const result = await pool.query(\r\n-      \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n-      [nome_empresa, email, foto, id]\r\n+      \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3, desconto = $4 WHERE id = $5 RETURNING id, nome_empresa, email, foto, desconto\",\r\n+      [nome_empresa, email, foto, desconto, id]\r\n     );\r\n \r\n     if (result.rows.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n@@ -96,8 +138,9 @@\n     return new Response(JSON.stringify({ error: \"Erro ao atualizar parceiro\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n+// ✅ EXCLUIR PARCEIROS (DELETE)\r\n export async function DELETE(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -107,17 +150,21 @@\n \r\n     const { ids } = await req.json();\r\n \r\n     if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n-      return new Response(JSON.stringify({ error: \"IDs inválidos\" }), { status: 400 });\r\n+      return new Response(JSON.stringify({ error: \"IDs inválidos.\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"🗑️ Excluindo parceiros:\", ids);\r\n \r\n+    // Primeiro exclui os vouchers relacionados ao parceiro\r\n+    await pool.query(\"DELETE FROM vouchers WHERE parceiro_id = ANY($1)\", [ids]);\r\n+\r\n+    // Depois exclui os parceiros\r\n     const result = await pool.query(\"DELETE FROM parceiros WHERE id = ANY($1) RETURNING id\", [ids]);\r\n \r\n     if (result.rowCount === 0) {\r\n-      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão\" }), { status: 404 });\r\n+      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão.\" }), { status: 404 });\r\n     }\r\n \r\n     return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n       status: 200,\r\n"
                },
                {
                    "date": 1740488457102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,14 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n-import bcrypt from \"bcryptjs\"; // Para criptografar senhas\r\n+import bcrypt from \"bcryptjs\"; \r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n \r\n-// Função para gerar código do voucher baseado no nome da empresa\r\n-const generateVoucherCode = (nomeEmpresa) => {\r\n-  const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 4);\r\n-  const randomCode = Math.floor(1000 + Math.random() * 9000); // Gera um número aleatório de 4 dígitos\r\n-  return `${formattedName}-${randomCode}`;\r\n-};\r\n-\r\n-// ✅ LISTAR PARCEIROS (GET)\r\n+// ✅ BUSCAR LISTA DE PARCEIROS (GET)\r\n export async function GET(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -24,9 +17,13 @@\n     }\r\n \r\n     console.log(\"📡 Buscando lista de parceiros...\");\r\n \r\n-    const result = await pool.query(\"SELECT id, nome_empresa, email, foto, desconto FROM parceiros\");\r\n+    const result = await pool.query(`\r\n+      SELECT p.id, p.nome_empresa, p.email, p.foto, v.codigo AS voucher_codigo, v.desconto\r\n+      FROM parceiros p\r\n+      LEFT JOIN vouchers v ON p.id = v.parceiro_id\r\n+    `);\r\n \r\n     return new Response(JSON.stringify(result.rows), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n@@ -37,9 +34,25 @@\n     return new Response(JSON.stringify({ error: \"Erro ao buscar parceiros\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n-// ✅ CRIAR PARCEIRO (POST)\r\n+// ✅ FUNÇÃO PARA GERAR VOUCHER ÚNICO\r\n+const generateUniqueVoucher = async (nomeEmpresa, desconto) => {\r\n+  const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n+  let voucherCode;\r\n+  let exists = true;\r\n+\r\n+  while (exists) {\r\n+    voucherCode = `${formattedName}${desconto}${Math.floor(100 + Math.random() * 900)}`;\r\n+    \r\n+    const checkVoucher = await pool.query(\"SELECT id FROM vouchers WHERE codigo = $1\", [voucherCode]);\r\n+    exists = checkVoucher.rows.length > 0;\r\n+  }\r\n+\r\n+  return voucherCode;\r\n+};\r\n+\r\n+// ✅ CRIAR NOVO PARCEIRO (POST)\r\n export async function POST(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -49,50 +62,40 @@\n \r\n     const { nome_empresa, email, senha, foto, desconto } = await req.json();\r\n \r\n     if (!nome_empresa || !email || !senha || !desconto) {\r\n-      return new Response(JSON.stringify({ error: \"Todos os campos são obrigatórios\" }), { status: 400 });\r\n+      return new Response(JSON.stringify({ error: \"Nome, email, senha e desconto são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Criando novo parceiro:\", email);\r\n \r\n-    // Verifica se o e-mail já está cadastrado\r\n+    // Verifica se o e-mail já existe\r\n     const emailCheck = await pool.query(\"SELECT id FROM parceiros WHERE email = $1\", [email]);\r\n     if (emailCheck.rows.length > 0) {\r\n       return new Response(JSON.stringify({ error: \"E-mail já cadastrado.\" }), { status: 409 });\r\n     }\r\n \r\n-    // Criptografa a senha antes de salvar\r\n+    // Criptografar senha antes de armazenar\r\n     const senhaHash = await bcrypt.hash(senha, 10);\r\n \r\n-    // Gerar um código de voucher único\r\n-    let voucherCode = generateVoucherCode(nome_empresa);\r\n-    let voucherExists = true;\r\n-\r\n-    while (voucherExists) {\r\n-      const checkVoucher = await pool.query(\"SELECT id FROM vouchers WHERE codigo = $1\", [voucherCode]);\r\n-      if (checkVoucher.rows.length === 0) {\r\n-        voucherExists = false;\r\n-      } else {\r\n-        voucherCode = generateVoucherCode(nome_empresa); // Gera um novo se já existir\r\n-      }\r\n-    }\r\n-\r\n-    // Criar parceiro no banco de dados\r\n+    // Criar parceiro\r\n     const parceiroResult = await pool.query(\r\n-      \"INSERT INTO parceiros (nome_empresa, email, senha, foto, desconto, data_criacao) VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING id, nome_empresa, email, foto, desconto\",\r\n-      [nome_empresa, email, senhaHash, foto || \"/assets/images/users/default-avatar.jpg\", desconto]\r\n+      \"INSERT INTO parceiros (nome_empresa, email, senha, foto, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome_empresa, email, foto\",\r\n+      [nome_empresa, email, senhaHash, foto || \"/assets/images/users/default-avatar.jpg\"]\r\n     );\r\n \r\n-    const parceiro = parceiroResult.rows[0];\r\n+    const parceiroId = parceiroResult.rows[0].id;\r\n \r\n-    // Criar voucher no banco de dados\r\n+    // Gerar voucher único\r\n+    const voucherCode = await generateUniqueVoucher(nome_empresa, desconto);\r\n+\r\n+    // Criar voucher para o parceiro\r\n     await pool.query(\r\n-      \"INSERT INTO vouchers (codigo, desconto, parceiro_id, data_criacao) VALUES ($1, $2, $3, NOW())\",\r\n-      [voucherCode, desconto, parceiro.id]\r\n+      \"INSERT INTO vouchers (parceiro_id, codigo, desconto, data_criacao) VALUES ($1, $2, $3, NOW())\",\r\n+      [parceiroId, voucherCode, desconto]\r\n     );\r\n \r\n-    return new Response(JSON.stringify({ success: true, parceiro }), {\r\n+    return new Response(JSON.stringify({ success: true, parceiro: parceiroResult.rows[0], voucher: voucherCode }), {\r\n       status: 201,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n \r\n@@ -101,9 +104,9 @@\n     return new Response(JSON.stringify({ error: \"Erro ao criar parceiro\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n-// ✅ ATUALIZAR PARCEIRO (PUT)\r\n+// ✅ ATUALIZAR PARCEIRO E SEU VOUCHER (PUT)\r\n export async function PUT(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n \r\n@@ -113,23 +116,34 @@\n \r\n     const { id, nome_empresa, email, foto, desconto } = await req.json();\r\n \r\n     if (!id || !nome_empresa || !email || !desconto) {\r\n-      return new Response(JSON.stringify({ error: \"Todos os campos são obrigatórios\" }), { status: 400 });\r\n+      return new Response(JSON.stringify({ error: \"ID, Nome, Email e Desconto são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n-    const result = await pool.query(\r\n-      \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3, desconto = $4 WHERE id = $5 RETURNING id, nome_empresa, email, foto, desconto\",\r\n-      [nome_empresa, email, foto, desconto, id]\r\n+    // Atualizar dados do parceiro\r\n+    const parceiroUpdate = await pool.query(\r\n+      \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n+      [nome_empresa, email, foto, id]\r\n     );\r\n \r\n-    if (result.rows.length === 0) {\r\n+    if (parceiroUpdate.rows.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n     }\r\n \r\n-    return new Response(JSON.stringify({ success: true, parceiro: result.rows[0] }), {\r\n+    // Atualizar desconto e voucher\r\n+    const existingVoucher = await pool.query(\"SELECT id FROM vouchers WHERE parceiro_id = $1\", [id]);\r\n+\r\n+    if (existingVoucher.rows.length > 0) {\r\n+      await pool.query(\"UPDATE vouchers SET desconto = $1 WHERE parceiro_id = $2\", [desconto, id]);\r\n+    } else {\r\n+      const voucherCode = await generateUniqueVoucher(nome_empresa, desconto);\r\n+      await pool.query(\"INSERT INTO vouchers (parceiro_id, codigo, desconto, data_criacao) VALUES ($1, $2, $3, NOW())\", [id, voucherCode, desconto]);\r\n+    }\r\n+\r\n+    return new Response(JSON.stringify({ success: true, parceiro: parceiroUpdate.rows[0] }), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n \r\n@@ -150,21 +164,21 @@\n \r\n     const { ids } = await req.json();\r\n \r\n     if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n-      return new Response(JSON.stringify({ error: \"IDs inválidos.\" }), { status: 400 });\r\n+      return new Response(JSON.stringify({ error: \"IDs inválidos\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"🗑️ Excluindo parceiros:\", ids);\r\n \r\n-    // Primeiro exclui os vouchers relacionados ao parceiro\r\n+    // Excluir vouchers associados aos parceiros\r\n     await pool.query(\"DELETE FROM vouchers WHERE parceiro_id = ANY($1)\", [ids]);\r\n \r\n-    // Depois exclui os parceiros\r\n+    // Excluir parceiros\r\n     const result = await pool.query(\"DELETE FROM parceiros WHERE id = ANY($1) RETURNING id\", [ids]);\r\n \r\n     if (result.rowCount === 0) {\r\n-      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão.\" }), { status: 404 });\r\n+      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão\" }), { status: 404 });\r\n     }\r\n \r\n     return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n       status: 200,\r\n"
                },
                {
                    "date": 1740491031486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,19 +121,27 @@\n     }\r\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n-    // Atualizar dados do parceiro\r\n+    let fotoParceiro = foto || \"/assets/images/users/dummy-avatar.jpg\"; // Mantém a imagem antiga\r\n+\r\n+    // 🔹 Se a nova imagem foi enviada em Base64, salva no servidor\r\n+    if (foto && foto.startsWith(\"data:image\")) {\r\n+        const filename = `parceiro_${Date.now()}.png`;\r\n+        fotoParceiro = saveImage(foto, filename);\r\n+    }\r\n+\r\n+    // 🔹 Atualizar dados do parceiro\r\n     const parceiroUpdate = await pool.query(\r\n       \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n-      [nome_empresa, email, foto, id]\r\n+      [nome_empresa, email, fotoParceiro, id]\r\n     );\r\n \r\n     if (parceiroUpdate.rows.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n     }\r\n \r\n-    // Atualizar desconto e voucher\r\n+    // 🔹 Atualizar desconto e voucher\r\n     const existingVoucher = await pool.query(\"SELECT id FROM vouchers WHERE parceiro_id = $1\", [id]);\r\n \r\n     if (existingVoucher.rows.length > 0) {\r\n       await pool.query(\"UPDATE vouchers SET desconto = $1 WHERE parceiro_id = $2\", [desconto, id]);\r\n"
                },
                {
                    "date": 1740491171597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,21 @@\n import { Pool } from \"pg\";\r\n import { getServerSession } from \"next-auth\";\r\n import { options } from \"@/app/api/auth/[...nextauth]/options\";\r\n import bcrypt from \"bcryptjs\"; \r\n+import fs from \"fs\";\r\n+import path from \"path\";\r\n \r\n+// 📌 Função para salvar imagem no servidor\r\n+const saveImage = (base64Image, filename) => {\r\n+    const imagePath = path.join(process.cwd(), \"public/uploads\", filename);\r\n+    const base64Data = base64Image.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n+    \r\n+    fs.writeFileSync(imagePath, base64Data, \"base64\");\r\n+\r\n+    return `/uploads/${filename}`; // Retorna apenas o caminho da imagem\r\n+};\r\n+\r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n });\r\n \r\n"
                },
                {
                    "date": 1740491307254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n // 📌 Função para salvar imagem no servidor\r\n const saveImage = (base64Image, filename) => {\r\n     const imagePath = path.join(process.cwd(), \"public/uploads\", filename);\r\n     const base64Data = base64Image.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n-    \r\n+\r\n     fs.writeFileSync(imagePath, base64Data, \"base64\");\r\n \r\n     return `/uploads/${filename}`; // Retorna apenas o caminho da imagem\r\n };\r\n@@ -88,12 +88,20 @@\n \r\n     // Criptografar senha antes de armazenar\r\n     const senhaHash = await bcrypt.hash(senha, 10);\r\n \r\n+    // 📌 Verifica e salva a imagem\r\n+    let fotoParceiro = \"/assets/images/users/dummy-avatar.jpg\"; // Imagem padrão\r\n+\r\n+    if (foto && foto.startsWith(\"data:image\")) {\r\n+        const filename = `parceiro_${Date.now()}.png`;\r\n+        fotoParceiro = saveImage(foto, filename);\r\n+    }\r\n+\r\n     // Criar parceiro\r\n     const parceiroResult = await pool.query(\r\n       \"INSERT INTO parceiros (nome_empresa, email, senha, foto, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome_empresa, email, foto\",\r\n-      [nome_empresa, email, senhaHash, foto || \"/assets/images/users/default-avatar.jpg\"]\r\n+      [nome_empresa, email, senhaHash, fotoParceiro]\r\n     );\r\n \r\n     const parceiroId = parceiroResult.rows[0].id;\r\n \r\n@@ -133,17 +141,19 @@\n     }\r\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n-    let fotoParceiro = foto || \"/assets/images/users/dummy-avatar.jpg\"; // Mantém a imagem antiga\r\n+    // 📌 Manter imagem antiga se nenhuma nova for enviada\r\n+    const parceiroData = await pool.query(\"SELECT foto FROM parceiros WHERE id = $1\", [id]);\r\n+    let fotoParceiro = parceiroData.rows[0].foto || \"/assets/images/users/dummy-avatar.jpg\";\r\n \r\n-    // 🔹 Se a nova imagem foi enviada em Base64, salva no servidor\r\n+    // 📌 Se uma nova imagem foi enviada, salva no servidor\r\n     if (foto && foto.startsWith(\"data:image\")) {\r\n         const filename = `parceiro_${Date.now()}.png`;\r\n         fotoParceiro = saveImage(foto, filename);\r\n     }\r\n \r\n-    // 🔹 Atualizar dados do parceiro\r\n+    // Atualizar dados do parceiro\r\n     const parceiroUpdate = await pool.query(\r\n       \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n       [nome_empresa, email, fotoParceiro, id]\r\n     );\r\n@@ -151,18 +161,11 @@\n     if (parceiroUpdate.rows.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n     }\r\n \r\n-    // 🔹 Atualizar desconto e voucher\r\n-    const existingVoucher = await pool.query(\"SELECT id FROM vouchers WHERE parceiro_id = $1\", [id]);\r\n+    // Atualizar desconto do voucher\r\n+    await pool.query(\"UPDATE vouchers SET desconto = $1 WHERE parceiro_id = $2\", [desconto, id]);\r\n \r\n-    if (existingVoucher.rows.length > 0) {\r\n-      await pool.query(\"UPDATE vouchers SET desconto = $1 WHERE parceiro_id = $2\", [desconto, id]);\r\n-    } else {\r\n-      const voucherCode = await generateUniqueVoucher(nome_empresa, desconto);\r\n-      await pool.query(\"INSERT INTO vouchers (parceiro_id, codigo, desconto, data_criacao) VALUES ($1, $2, $3, NOW())\", [id, voucherCode, desconto]);\r\n-    }\r\n-\r\n     return new Response(JSON.stringify({ success: true, parceiro: parceiroUpdate.rows[0] }), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n@@ -171,42 +174,4 @@\n     console.error(\"❌ Erro ao atualizar parceiro:\", error);\r\n     return new Response(JSON.stringify({ error: \"Erro ao atualizar parceiro\" }), { status: 500 });\r\n   }\r\n }\r\n-\r\n-// ✅ EXCLUIR PARCEIROS (DELETE)\r\n-export async function DELETE(req) {\r\n-  try {\r\n-    const session = await getServerSession(options);\r\n-\r\n-    if (!session || session.user.role !== \"admin\") {\r\n-      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n-    }\r\n-\r\n-    const { ids } = await req.json();\r\n-\r\n-    if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n-      return new Response(JSON.stringify({ error: \"IDs inválidos\" }), { status: 400 });\r\n-    }\r\n-\r\n-    console.log(\"🗑️ Excluindo parceiros:\", ids);\r\n-\r\n-    // Excluir vouchers associados aos parceiros\r\n-    await pool.query(\"DELETE FROM vouchers WHERE parceiro_id = ANY($1)\", [ids]);\r\n-\r\n-    // Excluir parceiros\r\n-    const result = await pool.query(\"DELETE FROM parceiros WHERE id = ANY($1) RETURNING id\", [ids]);\r\n-\r\n-    if (result.rowCount === 0) {\r\n-      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão\" }), { status: 404 });\r\n-    }\r\n-\r\n-    return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n-      status: 200,\r\n-      headers: { \"Content-Type\": \"application/json\" },\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"❌ Erro ao excluir parceiros:\", error);\r\n-    return new Response(JSON.stringify({ error: \"Erro ao excluir parceiros\" }), { status: 500 });\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1741206101159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const base64Data = base64Image.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n \r\n     fs.writeFileSync(imagePath, base64Data, \"base64\");\r\n \r\n-    return `/uploads/${filename}`; // Retorna apenas o caminho da imagem\r\n+    return `/uploads/${filename}`; \r\n };\r\n \r\n const pool = new Pool({\r\n   connectionString: process.env.DATABASE_URL,\r\n@@ -30,9 +30,9 @@\n \r\n     console.log(\"📡 Buscando lista de parceiros...\");\r\n \r\n     const result = await pool.query(`\r\n-      SELECT p.id, p.nome_empresa, p.email, p.foto, v.codigo AS voucher_codigo, v.desconto\r\n+      SELECT p.id, p.nome_empresa, p.email, p.foto, v.codigo AS voucher_codigo, v.desconto, v.limite_uso\r\n       FROM parceiros p\r\n       LEFT JOIN vouchers v ON p.id = v.parceiro_id\r\n     `);\r\n \r\n@@ -71,48 +71,43 @@\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n-    const { nome_empresa, email, senha, foto, desconto } = await req.json();\r\n+    const { nome_empresa, email, senha, foto, desconto, limitar_voucher, limite_voucher } = await req.json();\r\n \r\n     if (!nome_empresa || !email || !senha || !desconto) {\r\n       return new Response(JSON.stringify({ error: \"Nome, email, senha e desconto são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Criando novo parceiro:\", email);\r\n \r\n-    // Verifica se o e-mail já existe\r\n     const emailCheck = await pool.query(\"SELECT id FROM parceiros WHERE email = $1\", [email]);\r\n     if (emailCheck.rows.length > 0) {\r\n       return new Response(JSON.stringify({ error: \"E-mail já cadastrado.\" }), { status: 409 });\r\n     }\r\n \r\n-    // Criptografar senha antes de armazenar\r\n     const senhaHash = await bcrypt.hash(senha, 10);\r\n \r\n-    // 📌 Verifica e salva a imagem\r\n-    let fotoParceiro = \"/assets/images/users/dummy-avatar.jpg\"; // Imagem padrão\r\n-\r\n+    let fotoParceiro = \"/assets/images/users/dummy-avatar.jpg\";\r\n     if (foto && foto.startsWith(\"data:image\")) {\r\n         const filename = `parceiro_${Date.now()}.png`;\r\n         fotoParceiro = saveImage(foto, filename);\r\n     }\r\n \r\n-    // Criar parceiro\r\n     const parceiroResult = await pool.query(\r\n       \"INSERT INTO parceiros (nome_empresa, email, senha, foto, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome_empresa, email, foto\",\r\n       [nome_empresa, email, senhaHash, fotoParceiro]\r\n     );\r\n \r\n     const parceiroId = parceiroResult.rows[0].id;\r\n \r\n-    // Gerar voucher único\r\n     const voucherCode = await generateUniqueVoucher(nome_empresa, desconto);\r\n \r\n-    // Criar voucher para o parceiro\r\n+    const limiteUsoFinal = limitar_voucher ? limite_voucher : null;\r\n+\r\n     await pool.query(\r\n-      \"INSERT INTO vouchers (parceiro_id, codigo, desconto, data_criacao) VALUES ($1, $2, $3, NOW())\",\r\n-      [parceiroId, voucherCode, desconto]\r\n+      \"INSERT INTO vouchers (parceiro_id, codigo, desconto, data_criacao, limite_uso) VALUES ($1, $2, $3, NOW(), $4)\",\r\n+      [parceiroId, voucherCode, desconto, limiteUsoFinal]\r\n     );\r\n \r\n     return new Response(JSON.stringify({ success: true, parceiro: parceiroResult.rows[0], voucher: voucherCode }), {\r\n       status: 201,\r\n@@ -133,27 +128,24 @@\n     if (!session || session.user.role !== \"admin\") {\r\n       return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n     }\r\n \r\n-    const { id, nome_empresa, email, foto, desconto } = await req.json();\r\n+    const { id, nome_empresa, email, foto, desconto, limitar_voucher, limite_voucher } = await req.json();\r\n \r\n     if (!id || !nome_empresa || !email || !desconto) {\r\n       return new Response(JSON.stringify({ error: \"ID, Nome, Email e Desconto são obrigatórios\" }), { status: 400 });\r\n     }\r\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n-    // 📌 Manter imagem antiga se nenhuma nova for enviada\r\n     const parceiroData = await pool.query(\"SELECT foto FROM parceiros WHERE id = $1\", [id]);\r\n     let fotoParceiro = parceiroData.rows[0].foto || \"/assets/images/users/dummy-avatar.jpg\";\r\n \r\n-    // 📌 Se uma nova imagem foi enviada, salva no servidor\r\n     if (foto && foto.startsWith(\"data:image\")) {\r\n         const filename = `parceiro_${Date.now()}.png`;\r\n         fotoParceiro = saveImage(foto, filename);\r\n     }\r\n \r\n-    // Atualizar dados do parceiro\r\n     const parceiroUpdate = await pool.query(\r\n       \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n       [nome_empresa, email, fotoParceiro, id]\r\n     );\r\n@@ -161,11 +153,15 @@\n     if (parceiroUpdate.rows.length === 0) {\r\n       return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n     }\r\n \r\n-    // Atualizar desconto do voucher\r\n-    await pool.query(\"UPDATE vouchers SET desconto = $1 WHERE parceiro_id = $2\", [desconto, id]);\r\n+    const limiteUsoFinal = limitar_voucher ? limite_voucher : null;\r\n \r\n+    await pool.query(\r\n+      \"UPDATE vouchers SET desconto = $1, limite_uso = $2 WHERE parceiro_id = $3\",\r\n+      [desconto, limiteUsoFinal, id]\r\n+    );\r\n+\r\n     return new Response(JSON.stringify({ success: true, parceiro: parceiroUpdate.rows[0] }), {\r\n       status: 200,\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n"
                },
                {
                    "date": 1741208729218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,12 @@\n \r\n     console.log(\"📡 Buscando lista de parceiros...\");\r\n \r\n     const result = await pool.query(`\r\n-      SELECT p.id, p.nome_empresa, p.email, p.foto, v.codigo AS voucher_codigo, v.desconto, v.limite_uso\r\n+      SELECT \r\n+        p.id, p.nome_empresa, p.email, p.foto, \r\n+        v.codigo AS voucher_codigo, v.desconto, \r\n+        COALESCE(v.limite_uso, 0) AS limite_uso\r\n       FROM parceiros p\r\n       LEFT JOIN vouchers v ON p.id = v.parceiro_id\r\n     `);\r\n \r\n@@ -46,24 +49,8 @@\n     return new Response(JSON.stringify({ error: \"Erro ao buscar parceiros\" }), { status: 500 });\r\n   }\r\n }\r\n \r\n-// ✅ FUNÇÃO PARA GERAR VOUCHER ÚNICO\r\n-const generateUniqueVoucher = async (nomeEmpresa, desconto) => {\r\n-  const formattedName = nomeEmpresa.replace(/\\s+/g, \"\").toUpperCase().substring(0, 3);\r\n-  let voucherCode;\r\n-  let exists = true;\r\n-\r\n-  while (exists) {\r\n-    voucherCode = `${formattedName}${desconto}${Math.floor(100 + Math.random() * 900)}`;\r\n-    \r\n-    const checkVoucher = await pool.query(\"SELECT id FROM vouchers WHERE codigo = $1\", [voucherCode]);\r\n-    exists = checkVoucher.rows.length > 0;\r\n-  }\r\n-\r\n-  return voucherCode;\r\n-};\r\n-\r\n // ✅ CRIAR NOVO PARCEIRO (POST)\r\n export async function POST(req) {\r\n   try {\r\n     const session = await getServerSession(options);\r\n@@ -137,9 +124,9 @@\n \r\n     console.log(\"📡 Atualizando parceiro:\", id);\r\n \r\n     const parceiroData = await pool.query(\"SELECT foto FROM parceiros WHERE id = $1\", [id]);\r\n-    let fotoParceiro = parceiroData.rows[0].foto || \"/assets/images/users/dummy-avatar.jpg\";\r\n+    let fotoParceiro = parceiroData.rows[0]?.foto || \"/assets/images/users/dummy-avatar.jpg\";\r\n \r\n     if (foto && foto.startsWith(\"data:image\")) {\r\n         const filename = `parceiro_${Date.now()}.png`;\r\n         fotoParceiro = saveImage(foto, filename);\r\n"
                }
            ],
            "date": 1740404920158,
            "name": "Commit-0",
            "content": "import { Pool } from \"pg\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { options } from \"@/app/api/auth/[...nextauth]/options\"; // Configuração do NextAuth\r\n\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\nexport async function GET(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    console.log(\"📡 Buscando lista de parceiros...\");\r\n\r\n    const result = await pool.query(\"SELECT id, nome_empresa, email, foto FROM parceiros\");\r\n\r\n    return new Response(JSON.stringify(result.rows), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Erro ao buscar parceiros:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao buscar parceiros\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { nome_empresa, email, senha, foto } = await req.json();\r\n\r\n    if (!nome_empresa || !email || !senha) {\r\n      return new Response(JSON.stringify({ error: \"Nome, email e senha são obrigatórios\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"📡 Criando novo parceiro:\", email);\r\n\r\n    const result = await pool.query(\r\n      \"INSERT INTO parceiros (nome_empresa, email, senha, foto, data_criacao) VALUES ($1, $2, $3, $4, NOW()) RETURNING id, nome_empresa, email, foto\",\r\n      [nome_empresa, email, senha, foto || \"/assets/images/users/default-avatar.jpg\"]\r\n    );\r\n\r\n    return new Response(JSON.stringify({ success: true, parceiro: result.rows[0] }), {\r\n      status: 201,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Erro ao criar parceiro:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao criar parceiro\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PUT(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { id, nome_empresa, email, foto } = await req.json();\r\n\r\n    if (!id || !nome_empresa || !email) {\r\n      return new Response(JSON.stringify({ error: \"ID, Nome e Email são obrigatórios\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"📡 Atualizando parceiro:\", id);\r\n\r\n    const result = await pool.query(\r\n      \"UPDATE parceiros SET nome_empresa = $1, email = $2, foto = $3 WHERE id = $4 RETURNING id, nome_empresa, email, foto\",\r\n      [nome_empresa, email, foto, id]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"Parceiro não encontrado\" }), { status: 404 });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, parceiro: result.rows[0] }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Erro ao atualizar parceiro:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao atualizar parceiro\" }), { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req) {\r\n  try {\r\n    const session = await getServerSession(options);\r\n\r\n    if (!session || session.user.role !== \"admin\") {\r\n      return new Response(JSON.stringify({ error: \"Acesso negado\" }), { status: 403 });\r\n    }\r\n\r\n    const { ids } = await req.json();\r\n\r\n    if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n      return new Response(JSON.stringify({ error: \"IDs inválidos\" }), { status: 400 });\r\n    }\r\n\r\n    console.log(\"🗑️ Excluindo parceiros:\", ids);\r\n\r\n    const result = await pool.query(\"DELETE FROM parceiros WHERE id = ANY($1) RETURNING id\", [ids]);\r\n\r\n    if (result.rowCount === 0) {\r\n      return new Response(JSON.stringify({ error: \"Nenhum parceiro encontrado para exclusão\" }), { status: 404 });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ success: true, deleted: result.rows }), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(\"❌ Erro ao excluir parceiros:\", error);\r\n    return new Response(JSON.stringify({ error: \"Erro ao excluir parceiros\" }), { status: 500 });\r\n  }\r\n}\r\n"
        }
    ]
}