{
    "sourceFile": "src/components/ThemeCustomizer.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740664704633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740664704633,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { Button, Col, Offcanvas, OffcanvasBody, OffcanvasHeader, Row } from 'react-bootstrap';\nimport { useLayoutContext } from '@/context/useLayoutContext';\nimport { toSentenceCase } from '@/utils/change-casing';\nimport SimplebarReactClient from './wrappers/SimplebarReactClient';\n\nconst EsquemaDeCores = () => {\n  const {\n    theme,\n    changeTheme\n  } = useLayoutContext();\n  const modos = ['claro', 'escuro'];\n  return <div>\n      <h5 className=\"mb-3 font-16 fw-semibold\">Esquema de Cores</h5>\n      {modos.map((modo, idx) => <div key={modo + idx} className=\"form-check mb-2\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"data-bs-theme\" id={`layout-color-${modo}`} onChange={() => changeTheme(modo)} checked={theme === modo} />\n          <label className=\"form-check-label\" htmlFor={`layout-color-${modo}`}>\n            {toSentenceCase(modo)}\n          </label>\n        </div>)}\n    </div>;\n};\n\nconst TemaTopbar = () => {\n  const {\n    topbarTheme,\n    changeTopbarTheme\n  } = useLayoutContext();\n  const modos = ['claro', 'escuro'];\n  return <div>\n      <h5 className=\"my-3 font-16 fw-semibold\">Cor da Barra Superior</h5>\n      {modos.map((modo, idx) => <div key={idx + modo} className=\"form-check mb-2\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"data-topbar-color\" id={`topbar-color-${modo}`} onChange={() => changeTopbarTheme(modo)} checked={topbarTheme === modo} />\n          <label className=\"form-check-label\" htmlFor={`topbar-color-${modo}`}>\n            {toSentenceCase(modo)}\n          </label>\n        </div>)}\n    </div>;\n};\n\nconst TemaMenu = () => {\n  const {\n    menu: {\n      theme\n    },\n    changeMenu: {\n      theme: changeMenuTheme\n    }\n  } = useLayoutContext();\n  const modos = ['claro', 'escuro'];\n  return <div>\n      <h5 className=\"my-3 font-16 fw-semibold\">Cor do Menu</h5>\n      {modos.map((modo, idx) => <div key={idx + modo + idx} className=\"form-check mb-2\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"data-menu-color\" id={`leftbar-color-${modo}`} onChange={() => changeMenuTheme(modo)} checked={theme === modo} />\n          <label className=\"form-check-label\" htmlFor={`leftbar-color-${modo}`}>\n            {toSentenceCase(modo)}\n          </label>\n        </div>)}\n    </div>;\n};\n\nconst TamanhoSidebar = () => {\n  const {\n    menu: {\n      size: menuSize\n    },\n    changeMenu: {\n      size: changeMenuSize\n    }\n  } = useLayoutContext();\n  const tamanhos = [{\n    name: 'Padrão',\n    size: 'default'\n  }, {\n    name: 'Condensado',\n    size: 'condensed'\n  }, {\n    name: 'Oculto',\n    size: 'hidden'\n  }, {\n    name: 'Pequeno Hover Ativo',\n    size: 'sm-hover-active'\n  }, {\n    name: 'Pequeno Hover',\n    size: 'sm-hover'\n  }];\n  return <div>\n      <h5 className=\"my-3 font-16 fw-semibold\">Tamanho da Barra Lateral</h5>\n      {tamanhos.map((tamanho, idx) => <div key={tamanho.size + idx} className=\"form-check mb-2\">\n          <input className=\"form-check-input\" type=\"radio\" name=\"data-menu-size\" id={`leftbar-size-${tamanho.size}`} onChange={() => changeMenuSize(tamanho.size)} checked={menuSize === tamanho.size} />\n          <label className=\"form-check-label\" htmlFor={`leftbar-size-${tamanho.size}`}>\n            {tamanho.name}\n          </label>\n        </div>)}\n    </div>;\n};\n\nconst PersonalizadorDeTema = ({\n  open,\n  toggle\n}) => {\n  const {\n    resetSettings,\n    theme\n  } = useLayoutContext();\n  return <div>\n      <Offcanvas placement=\"end\" show={open} onHide={toggle} className=\"border-0 rounded-start-4 overflow-hidden\" tabIndex={-1}>\n        <OffcanvasHeader closeVariant=\"white\" closeButton className=\"d-flex align-items-center bg-primary p-3\">\n          <h5 className=\"text-white m-0\">Configurações de Tema</h5>\n        </OffcanvasHeader>\n        <OffcanvasBody className=\"p-0\">\n          <SimplebarReactClient className=\"h-100\">\n            <div className=\"p-3 settings-bar\">\n              <EsquemaDeCores />\n\n              {theme === 'claro' && <TemaTopbar />}\n\n              {theme === 'claro' && <TemaMenu />}\n\n              <TamanhoSidebar />\n            </div>\n          </SimplebarReactClient>\n        </OffcanvasBody>\n        <div className=\"offcanvas-footer border-top p-3 text-center\">\n          <Row>\n            <Col>\n              <Button variant=\"danger\" onClick={resetSettings} className=\"w-100\">\n                Resetar\n              </Button>\n            </Col>\n          </Row>\n        </div>\n      </Offcanvas>\n    </div>;\n};\nexport default PersonalizadorDeTema;\n"
        }
    ]
}