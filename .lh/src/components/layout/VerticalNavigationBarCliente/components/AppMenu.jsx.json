{
    "sourceFile": "src/components/layout/VerticalNavigationBarCliente/components/AppMenu.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1739402963791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1739402963791,
            "name": "Commit-0",
            "content": "'use client';\n\nimport IconifyIcon from '@/components/wrappers/IconifyIcon';\nimport { findAllParent, findMenuItem, getMenuItemFromURL } from '@/helpers/Manu2';\nimport clsx from 'clsx';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { Fragment, useCallback, useEffect, useState } from 'react';\nimport { Collapse } from 'react-bootstrap';\nconst MenuItemWithChildren = ({\n  item,\n  className,\n  linkClassName,\n  subMenuClassName,\n  activeMenuItems,\n  toggleMenu\n}) => {\n  const [open, setOpen] = useState(activeMenuItems.includes(item.key));\n  useEffect(() => {\n    setOpen(activeMenuItems.includes(item.key));\n  }, [activeMenuItems, item]);\n  const toggleMenuItem = e => {\n    e.preventDefault();\n    const status = !open;\n    setOpen(status);\n    if (toggleMenu) toggleMenu(item, status);\n    return false;\n  };\n  const getActiveClass = useCallback(item => {\n    return activeMenuItems?.includes(item.key) ? 'active' : '';\n  }, [activeMenuItems]);\n  return <li className={className}>\n      <div onClick={toggleMenuItem} aria-expanded={open} role=\"button\" className={clsx(linkClassName)}>\n        {item.icon && <span className=\"nav-icon\">\n            {' '}\n            <IconifyIcon icon={item.icon} />{' '}\n          </span>}\n        <span className=\"nav-text\">{item.label}</span>\n        {!item.badge ? <IconifyIcon icon=\"bx:chevron-down\" className=\"menu-arrow ms-auto\" /> : <span className={`badge badge-pill text-end bg-${item.badge.variant}`}>{item.badge.text}</span>}\n      </div>\n      <Collapse in={open}>\n        <div>\n          <ul className={clsx(subMenuClassName)}>\n            {(item.children || []).map((child, idx) => {\n            return <Fragment key={child.key + idx}>\n                  {child.children ? <MenuItemWithChildren item={child} linkClassName={clsx('nav-link', getActiveClass(child))} activeMenuItems={activeMenuItems} className=\"sub-nav-item\" subMenuClassName=\"nav sub-navbar-nav\" toggleMenu={toggleMenu} /> : <MenuItem item={child} className=\"sub-nav-item\" linkClassName={clsx('sub-nav-link', getActiveClass(child))} />}\n                </Fragment>;\n          })}\n          </ul>\n        </div>\n      </Collapse>\n    </li>;\n};\nconst MenuItem = ({\n  item,\n  className,\n  linkClassName\n}) => {\n  return <li className={className}>\n      <MenuItemLink item={item} className={linkClassName} />\n    </li>;\n};\nconst MenuItemLink = ({\n  item,\n  className\n}) => {\n  return <Link href={item.url ?? ''} target={item.target} className={clsx(className, {\n    disabled: item.isDisabled\n  })}>\n      {item.icon && <span className=\"nav-icon\">\n          <IconifyIcon icon={item.icon} />\n        </span>}\n      <span className=\"nav-text\">{item.label}</span>\n      {item.badge && <span className={`badge badge-pill text-end bg-${item.badge.variant}`}>{item.badge.text}</span>}\n    </Link>;\n};\nconst AppMenu = ({\n  menuItems\n}) => {\n  const pathname = usePathname();\n  const [activeMenuItems, setActiveMenuItems] = useState([]);\n  const toggleMenu = (menuItem, show) => {\n    if (show) setActiveMenuItems([menuItem.key, ...findAllParent(menuItems, menuItem)]);\n  };\n  const getActiveClass = useCallback(item => {\n    return activeMenuItems?.includes(item.key) ? 'active' : '';\n  }, [activeMenuItems]);\n  const activeMenu = useCallback(() => {\n    const trimmedURL = pathname?.replaceAll('', '');\n    const matchingMenuItem = getMenuItemFromURL(menuItems, trimmedURL);\n    if (matchingMenuItem) {\n      const activeMt = findMenuItem(menuItems, matchingMenuItem.key);\n      if (activeMt) {\n        setActiveMenuItems([activeMt.key, ...findAllParent(menuItems, activeMt)]);\n      }\n      setTimeout(() => {\n        const activatedItem = document.querySelector(`#leftside-menu-container .simplebar-content a[href=\"${trimmedURL}\"]`);\n        if (activatedItem) {\n          const simplebarContent = document.querySelector('#leftside-menu-container .simplebar-content-wrapper');\n          if (simplebarContent) {\n            const offset = activatedItem.offsetTop - window.innerHeight * 0.4;\n            scrollTo(simplebarContent, offset, 600);\n          }\n        }\n      }, 400);\n\n      // scrollTo (Left Side Bar Active Menu)\n      const easeInOutQuad = (t, b, c, d) => {\n        t /= d / 2;\n        if (t < 1) return c / 2 * t * t + b;\n        t--;\n        return -c / 2 * (t * (t - 2) - 1) + b;\n      };\n      const scrollTo = (element, to, duration) => {\n        const start = element.scrollTop,\n          change = to - start,\n          increment = 20;\n        let currentTime = 0;\n        const animateScroll = function () {\n          currentTime += increment;\n          const val = easeInOutQuad(currentTime, start, change, duration);\n          element.scrollTop = val;\n          if (currentTime < duration) {\n            setTimeout(animateScroll, increment);\n          }\n        };\n        animateScroll();\n      };\n    }\n  }, [pathname, menuItems]);\n  useEffect(() => {\n    if (menuItems && menuItems.length > 0) activeMenu();\n  }, [activeMenu, menuItems]);\n  return <ul className=\"navbar-nav\" id=\"navbar-nav\">\n      {(menuItems || []).map((item, idx) => {\n      return <Fragment key={item.key + idx}>\n            {item.isTitle ? <li className={clsx('menu-title')}>{item.label}</li> : <>\n                {item.children ? <MenuItemWithChildren item={item} toggleMenu={toggleMenu} className=\"nav-item\" linkClassName={clsx('nav-link menu-arrow', getActiveClass(item))} subMenuClassName=\"nav sub-navbar-nav\" activeMenuItems={activeMenuItems} /> : <MenuItem item={item} linkClassName={clsx('nav-link', getActiveClass(item))} className=\"nav-item\" />}\n              </>}\n          </Fragment>;\n    })}\n    </ul>;\n};\nexport default AppMenu;"
        }
    ]
}